
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.PdfStamper;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Jefren
 */
public class Reservation_Tenant extends javax.swing.JFrame {
    private ArrayList<String> reservationDetails;
    private final MessageDialog md = new MessageDialog();
    private Connection connection;
    /**
     * Creates new form Reservation_Tenant
     */
    public Reservation_Tenant() {
        initComponents();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons/Backup and Recovery.png")));
        saveButton.setEnabled(false);
        clearButton.setEnabled(false);
        start();
        
         try {
            Class.forName("com.mysql.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mysql://localhost/181nprdb", "root", "");
        } catch (ClassNotFoundException | SQLException ex) {
//            Logger.getLogger(Reservation_Tenant.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }

    private void start() {
        sterm.setSelected(true);
        others.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        term = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        mName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        address = new javax.swing.JTextArea();
        jLabel6 = new javax.swing.JLabel();
        mNo = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        zipCode = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        schoolTermComboBox = new javax.swing.JComboBox();
        others = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        ayFrom = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        ayTo = new javax.swing.JTextField();
        oth = new javax.swing.JRadioButton();
        sterm = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        roomNumber = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        roomType = new javax.swing.JComboBox();
        cancelButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        datePaid = new datechooser.beans.DateChooserCombo();
        jLabel18 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImages(null);
        setUndecorated(true);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Personal Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Rondalo", 0, 12))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel1.setText("Name:");

        lName.setBackground(new java.awt.Color(255, 255, 204));
        lName.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        lName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                lNameKeyTyped(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Last Name");

        fName.setBackground(new java.awt.Color(255, 255, 204));
        fName.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        fName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fNameKeyTyped(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("First Name");

        mName.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        mName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mNameKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Middle Name");

        jLabel5.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel5.setText("Address:");

        address.setBackground(new java.awt.Color(255, 255, 204));
        address.setColumns(20);
        address.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        address.setRows(5);
        address.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addressKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(address);

        jLabel6.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel6.setText("Mobile Number:");

        mNo.setBackground(new java.awt.Color(255, 255, 204));
        mNo.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        mNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                mNoKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel7.setText("Zip Code:");

        zipCode.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        zipCode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                zipCodeKeyTyped(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel8.setText("Email:");

        email.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        email.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                emailKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(lName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(fName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mName)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mNo, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(zipCode, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(email)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(mName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(mNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(zipCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Reservation Detail", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Rondalo", 0, 12))); // NOI18N

        schoolTermComboBox.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        schoolTermComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "First Semester", "Second Semester", "Summer Term" }));
        schoolTermComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        others.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N

        jLabel13.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel13.setText("Academic Year:");

        ayFrom.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        ayFrom.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ayFromKeyTyped(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel16.setText("to");

        ayTo.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        ayTo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ayToKeyTyped(evt);
            }
        });

        oth.setBackground(new java.awt.Color(255, 255, 255));
        term.add(oth);
        oth.setText("Others:");
        oth.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        oth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                othItemStateChanged(evt);
            }
        });
        oth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                othActionPerformed(evt);
            }
        });

        sterm.setBackground(new java.awt.Color(255, 255, 255));
        term.add(sterm);
        sterm.setText("School Term:");
        sterm.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sterm.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                stermItemStateChanged(evt);
            }
        });
        sterm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stermActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        jLabel9.setText("Room Number:");

        roomNumber.setBackground(new java.awt.Color(255, 255, 204));
        roomNumber.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        jLabel10.setText("Room Type:");

        roomType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Suite", "Single Sharing Room", "Double Sharing Room", "Triple Sharing Room" }));
        roomType.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(sterm)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(oth)
                                .addGap(89, 89, 89)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(others)
                                    .addGroup(jPanel6Layout.createSequentialGroup()
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(schoolTermComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(roomType, 0, 185, Short.MAX_VALUE)
                                            .addComponent(roomNumber))
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel13)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ayFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel16)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(ayTo, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addContainerGap())))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(roomNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(roomType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(sterm)
                    .addComponent(schoolTermComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(ayFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ayTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oth)
                    .addComponent(others, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cancelButton.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        cancelButton.setText("Back");
        cancelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        saveButton.setText("Save");
        saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        clearButton.setText("Clear");
        clearButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        datePaid.setCurrentView(new datechooser.view.appearance.AppearancesList("Light",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    datePaid.setNothingAllowed(false);
    datePaid.setFormat(1);
    datePaid.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);

    jLabel18.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    jLabel18.setText("Date Reserved:");

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addComponent(jLabel18)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(datePaid, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addComponent(clearButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(saveButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(cancelButton)))
            .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addGap(11, 11, 11)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(datePaid, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(6, 6, 6)
            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(6, 6, 6)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cancelButton)
                .addComponent(saveButton)
                .addComponent(clearButton))
            .addContainerGap())
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void stermItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_stermItemStateChanged
        
    }//GEN-LAST:event_stermItemStateChanged

    private void othItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_othItemStateChanged
        
    }//GEN-LAST:event_othItemStateChanged

    private void stermActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stermActionPerformed
        if(sterm.isSelected()){
            others.setEnabled(false);
            schoolTermComboBox.setEnabled(true);
            ayFrom.setEnabled(true);
            ayTo.setEnabled(true);
        }
    }//GEN-LAST:event_stermActionPerformed

    private void othActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_othActionPerformed
        if(oth.isSelected()){
            others.setEnabled(true);
            schoolTermComboBox.setEnabled(false);
            ayFrom.setEnabled(false);
            ayTo.setEnabled(false);
        }
    }//GEN-LAST:event_othActionPerformed

    private void lNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_lNameKeyTyped
        
        enableClearButton();
        enableButton();
    }//GEN-LAST:event_lNameKeyTyped

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        clearAll();
        clearButton.setEnabled(false);
        saveButton.setEnabled(false);
    }//GEN-LAST:event_clearButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (md.confirmationSave(this) == md.YES) {
            if (checker()) {
                insertIntoDatabase();
                updateRoomStatusFromReservation(roomNumber.getText().trim());
                saveToPdf();
                clearAll();
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void insertIntoDatabase() throws NumberFormatException {
        try {
            // the mysql insert statement
            String rumId = "";
            PreparedStatement preparedStatement = connection.prepareStatement("SELECT `roomIdnum` FROM room where roomNumber = ?");
            preparedStatement.setInt(1, Integer.parseInt(roomNumber.getText().trim()));
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                rumId = resultSet.getString("roomIdnum");
            }
            
            preparedStatement = connection.prepareStatement("insert into reservation (roomIdnum, reservationLname, reservationFname,"
                    + " reservationMname, reservationHomeaddress, reservationZipCode, reservationMobileNo,"
                    + " reservationSchoolTerm, reservationEmail, reservationAyFrom,"
                    + " reservationAyTo, reservationOthers, reservationDatePaid, reservationStatus)"
                    + " values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
            
            preparedStatement.setString(1, rumId);
            preparedStatement.setString(2, lName.getText().trim().substring(0, 1).toUpperCase() + lName.getText().trim().substring(1,lName.getText().trim().length()));
            preparedStatement.setString(3, fName.getText().trim().substring(0, 1).toUpperCase() + fName.getText().trim().substring(1,fName.getText().trim().length()));
            
            if(!mName.getText().isEmpty()){
                preparedStatement.setString(4, mName.getText().trim().substring(0, 1).toUpperCase() + mName.getText().trim().substring(1,mName.getText().trim().length()));
            } else {
                preparedStatement.setNull(4, Types.VARCHAR);
            }
            
            if(!address.getText().isEmpty()){
                preparedStatement.setString(5, address.getText().trim());
            } else {
                preparedStatement.setNull(5, Types.VARCHAR);
            }
            
            if(!zipCode.getText().isEmpty()){
                preparedStatement.setString(6, zipCode.getText().trim());
            } else {
                preparedStatement.setNull(6, Types.VARCHAR);
            }
            
            preparedStatement.setString(7, mNo.getText().trim());
            
            if(sterm.isSelected()){
                preparedStatement.setString(8, schoolTermComboBox.getSelectedItem().toString());
            } else {
                preparedStatement.setNull(8, Types.VARCHAR);
            }
            
            if(!email.getText().isEmpty()){
                preparedStatement.setString(9, email.getText().trim());
            } else {
                preparedStatement.setNull(9, Types.VARCHAR);
            }
            
            if(sterm.isSelected() && !ayFrom.getText().isEmpty()){
                preparedStatement.setInt(10, Integer.parseInt(ayFrom.getText().trim()));
            } else {
                preparedStatement.setNull(10, Types.INTEGER);
            }
            
            if(sterm.isSelected() && !ayTo.getText().isEmpty()){
                preparedStatement.setInt(11, Integer.parseInt(ayTo.getText().trim()));
            } else {
                preparedStatement.setNull(11, Types.INTEGER);
            }
            
            if(oth.isSelected() && !others.getText().isEmpty()){
                preparedStatement.setString(12, others.getText().trim());
            } else {
                preparedStatement.setNull(12, Types.VARCHAR);
            }
            
            
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date utilDate = df.parse(df.format(datePaid.getDateFormat().parse(datePaid.getText())));
            java.sql.Date sDate = new java.sql.Date(utilDate.getTime());
            
            preparedStatement.setDate(13, sDate);
            preparedStatement.setString(14, "Pending");
            
            preparedStatement.execute();
            
//            preparedStatement = connection.prepareStatement("SELECT `reservationLname`, `reservationFname`, `reservationLname` "
//                    + "FROM reservation WHERE reservationLname LIKE ?");
//            preparedStatement.setString(1, reservationDetails.get(1).trim());
//            resultSet = preparedStatement.executeQuery();
//            if (resultSet.next()) {
//                int count = 0;
//                String rumnum = "";
//                preparedStatement = connection.prepareStatement("SELECT residentIdnum AS id FROM resident WHERE roomIdnum = ? "
//                        + "UNION SELECT reservationIdnum AS id FROM reservation WHERE roomIdnum = ? AND reservationStatus LIKE 'Pending'");
//                preparedStatement.setInt(1, Integer.parseInt(rumId.trim()));
//                preparedStatement.setInt(2, Integer.parseInt(rumId.trim()));
//                resultSet = preparedStatement.executeQuery();
//                while (resultSet.next()) {
//                    count++;
//                }
//                if (reservationDetails.get(13).trim().contains("Triple") & count == 1) {
//                    preparedStatement = connection.prepareStatement("UPDATE room SET roomStatus = 'partially occupied' WHERE roomIdnum = ?");
//                    preparedStatement.setInt(1, Integer.parseInt(rumId.trim()));
//                    preparedStatement.executeUpdate();
//                } else if (reservationDetails.get(13).trim().contains("Triple") & count == 2) {
//                    preparedStatement = connection.prepareStatement("UPDATE room SET roomStatus = 'partially occupied' WHERE roomIdnum = ?");
//                    preparedStatement.setInt(1, Integer.parseInt(rumId.trim()));
//                    preparedStatement.executeUpdate();
//                } else if (reservationDetails.get(13).trim().contains("Double") & count == 1) {
//                    preparedStatement = connection.prepareStatement("UPDATE room SET roomStatus = 'partially occupied' WHERE roomIdnum = ?");
//                    preparedStatement.setInt(1, Integer.parseInt(rumId.trim()));
//                    preparedStatement.executeUpdate();
//                } else {
//                    preparedStatement = connection.prepareStatement("UPDATE room SET roomStatus = 'fully occupied' WHERE roomIdnum = ?");
//                    preparedStatement.setInt(1, Integer.parseInt(rumId.trim()));
//                    preparedStatement.executeUpdate();
//                }
//            }
        } catch (SQLException | ParseException ex) {
            md.error(this, ex.getMessage());
        }
    }

    private boolean checker() {
        boolean tester = false;
        if( mNo.getText().trim().length() != 0 
                & fName.getText().trim().length() != 0 
                & lName.getText().trim().length() != 0 
                & mobileNumberChecker() 
                & zipCodeChecker() 
                & emailAddressChecker() 
                & yearTo() 
                & yearFrom()){
            tester = true;
        } else {
            tester = false;
        }
        return tester;
    }

    private boolean zipCodeChecker() {
        String str = zipCode.getText().trim();
        char[] chars = str.toCharArray();
        boolean tester = true;
        //if it is null
        if (!str.equals("")) {
            for (int i = 0; i < chars.length; i++) {
                try {
                    Integer.parseInt(String.valueOf(chars[i]));
                } catch (NumberFormatException nfe) {
                    tester = false;
                    md.error(this, "Not a number.");
                    zipCode.setText("");
                }
            }
            //checks if the zipCode is 4 digits.
            if (!(str.length() >= 4)) {
                tester = false;
                md.error(this, "The zipcode is less than 4 digits.");
                zipCode.setText("");
            }
            
            if(!(str.length() <= 6)){
                tester = false;
                md.error(this, "The zipcode is more than 6 digits.");
                zipCode.setText("");
            }
        }
        return tester;
    }

    private boolean yearTo() {
        String str = ayTo.getText().trim();
        char[] chars = str.toCharArray();
        boolean tester = true;
        //if it is null
        if (!str.equals("")) {
            //checks if the Year is alphanummeric
            for (int i = 0; i < chars.length; i++) {
                try {
                    Integer.parseInt(String.valueOf(chars[i]));
                } catch (NumberFormatException nfe) {
                    tester = false;
                    md.error(this, "You've entered an alphanumeric, please try again.");
                    ayTo.setText("");
                }
            }
            //checks if the Year is 4 digits.
            if (str.length() != 4) {
                tester = false;
                md.error(this, "The number you've enter is more than 4 digits.");
                ayTo.setText("");
            }
        }
        return tester;
    }
    
    private boolean yearFrom() {
        String str = ayFrom.getText().trim();
        char[] chars = str.toCharArray();
        boolean tester = true;
        //if it is null
        if (!str.equals("")) {
            //checks if the Year is alphanummeric
            for (int i = 0; i < chars.length; i++) {
                try {
                    Integer.parseInt(String.valueOf(chars[i]));
                } catch (NumberFormatException nfe) {
                    tester = false;
                    md.error(this, "Not a number.");
                    ayFrom.setText("");
                }
            }
            //checks if the Year is 4 digits.
            if (str.length() != 4) {
                tester = false;
                md.error(this, "The year is not 4 digits.");
                ayFrom.setText("");
            }
        }
        return tester;
    }

    private boolean mobileNumberChecker() {
        String str = mNo.getText().trim();
        char[] chars = str.toCharArray();
        boolean tester = true;
        //if it is null                
        if (!str.equals("")) {//checks if the number is alphanumeric
            for (int i = 0; i < chars.length; i++) {
                try {
                    Integer.parseInt(String.valueOf(chars[i]));
                } catch (NumberFormatException nfe) {
                    saveButton.setEnabled(false);
                    md.error(this, "Not a number");
                    mNo.setText("");
                    tester = false;
                }
            }
            //checks if the number is 11 digits.
            if (str.length() != 11) {
                saveButton.setEnabled(false);
                md.error(this, "The mobile number must be 11 digits.");
                mNo.setText("");
                tester = false;
            }
        }
        return tester;
    }

    private boolean emailAddressChecker() {
        char atSymbol = '@';
        String dotCom = ".com";
        String emailAddress = email.getText().trim();
        boolean tester = true;
        //find the @ symbol
        int atpos = emailAddress.indexOf(atSymbol);
        //find the .com
        int emadd = emailAddress.indexOf(dotCom, atpos);             
        if (!emailAddress.equals("")) {
            if (emadd == -1) {
                tester = false;
                md.error(this, "Invalid email address.");
            }
        }
        return tester;
    }
    
    

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        if(md.confirmationBack(this) == md.YES){
            dispose();
            new Home().setVisible(true);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void fNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fNameKeyTyped
        enableClearButton();
        enableButton();
//        System.out.println(lName.getText().trim().substring(0, 1).toUpperCase() + lName.getText().trim().substring(1,lName.getText().length()));
    }//GEN-LAST:event_fNameKeyTyped

    private void enableClearButton() {
        // TODO add your handling code here:
        if (!fName.getText().isEmpty()
                || !lName.getText().isEmpty()
                || !mName.getText().isEmpty()
                || !address.getText().isEmpty()
                || !mNo.getText().isEmpty() 
                || !zipCode.getText().isEmpty() 
                || !email.getText().isEmpty() 
                || !ayFrom.getText().isEmpty() 
                || !ayTo.getText().isEmpty()
                || !others.getText().isEmpty()) {              
            clearButton.setEnabled(true);
        }
        else
            clearButton.setEnabled(false);
    }
    
    private void enableButton() {
        // TODO add your handling code here:
        if ((!fName.getText().isEmpty() & !lName.getText().isEmpty() & !mNo.getText().isEmpty())
                & (!mName.getText().isEmpty()
                | !address.getText().isEmpty()
                | !zipCode.getText().isEmpty()
                | !email.getText().isEmpty()
                | ((!ayFrom.getText().isEmpty() & !ayTo.getText().isEmpty()) | (!others.getText().isEmpty())))) {
            saveButton.setEnabled(true);
        } else {
            saveButton.setEnabled(false);
        }
    }
    
    private void mNameKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mNameKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_mNameKeyTyped

    private void addressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressKeyTyped
        // TODO add your handling code here:
        enableClearButton();
        enableButton();
    }//GEN-LAST:event_addressKeyTyped

    private void mNoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mNoKeyTyped
        // TODO add your handling code here:
        enableClearButton();
        enableButton();
    }//GEN-LAST:event_mNoKeyTyped

    private void zipCodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_zipCodeKeyTyped
        // TODO add your handling code here:
        enableClearButton();
        enableButton();
    }//GEN-LAST:event_zipCodeKeyTyped

    private void emailKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_emailKeyTyped
        // TODO add your handling code here:
        enableClearButton();
        enableButton();
    }//GEN-LAST:event_emailKeyTyped

    private void ayFromKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ayFromKeyTyped
        // TODO add your handling code here:
        enableClearButton();
        enableButton();
    }//GEN-LAST:event_ayFromKeyTyped

    private void ayToKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ayToKeyTyped
        // TODO add your handling code here:
        enableClearButton();
        enableButton();
    }//GEN-LAST:event_ayToKeyTyped

    private void clearAll() {
        lName.setText("");
        mName.setText("");
        fName.setText("");
        address.setText("");
        mNo.setText("");
        zipCode.setText("");
        email.setText("");
        ayFrom.setText("");
        ayTo.setText("");
        others.setText("");
        roomNumber.setText("");
        roomType.setSelectedIndex(0);
        schoolTermComboBox.setSelectedIndex(0);
        sterm.setSelected(true);
    }
    
    private void saveToPdf(){
        try {
            // TODO add your handling code here:
            Document doc = new Document();
            BufferedReader br = new BufferedReader(new FileReader("dir\\defaults.txt"));
            String path="";
            try {
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                }
                path = sb.toString().trim();
            } finally {
                br.close();
            }
            FileOutputStream fos = new FileOutputStream(path+"\\reservation\\"+lName.getText().trim()+", "+fName.getText().trim()+ "ReservationForm.pdf");
            PdfWriter pdfWriter = PdfWriter.getInstance(doc, fos);
            PdfReader pdfReader = new PdfReader("ReservationForm.pdf");
 
            PdfStamper pdfStamper = new PdfStamper(pdfReader, fos);
            for (int i = 1; i <= pdfReader.getNumberOfPages(); i++) {
                PdfContentByte content = pdfStamper.getOverContent(i);
                //Text over the existing page
                BaseFont bf = BaseFont.createFont(BaseFont.TIMES_ROMAN,BaseFont.WINANSI, BaseFont.EMBEDDED);
                content.beginText();
                content.setFontAndSize(bf, 10);
                content.showTextAligned(PdfContentByte.ALIGN_LEFT, datePaid.getText().trim(), 435, 655, 0);
                if(mName.getText().isEmpty()){
                    content.showTextAligned(PdfContentByte.ALIGN_LEFT, lName.getText().trim() +", "+ fName.getText().trim(), 265, 625, 0);
                } else {
                    content.showTextAligned(PdfContentByte.ALIGN_LEFT, lName.getText().trim() +", "+ fName.getText().trim() 
                            + " " + mName.getText().trim().charAt(0) +".", 265, 625, 0);
                }
                content.showTextAligned(PdfContentByte.ALIGN_LEFT, address.getText().trim(), 265, 600, 0);
                content.showTextAligned(PdfContentByte.ALIGN_LEFT, zipCode.getText().trim(), 265, 580, 0);
                content.showTextAligned(PdfContentByte.ALIGN_LEFT, mNo.getText().trim(), 265, 565, 0);
                content.showTextAligned(PdfContentByte.ALIGN_LEFT, email.getText().trim(), 265, 550, 0);   
                content.setFontAndSize(bf, 12);
                content.showTextAligned(PdfContentByte.ALIGN_LEFT, "Room No.:"+roomNumber.getText(), 125, 370, 0); 
                content.showTextAligned(PdfContentByte.ALIGN_LEFT, roomType.getSelectedItem().toString().trim(), 325, 370, 0);   
                content.showTextAligned(PdfContentByte.ALIGN_LEFT, schoolTermComboBox.getSelectedItem().toString(), 125, 310, 0);
                if(sterm.isSelected()) {
                    if (!ayFrom.getText().trim().isEmpty() & !ayTo.getText().trim().isEmpty()) {
                        content.showTextAligned(PdfContentByte.ALIGN_LEFT, ayFrom.getText().trim() + " - " + ayTo.getText().trim(), 325, 310, 0);
                    } else {
                        content.showTextAligned(PdfContentByte.ALIGN_LEFT, " - ", 325, 310, 0);
                    }
                    content.showTextAligned(PdfContentByte.ALIGN_LEFT, " - ", 435, 310, 0);
                } else {
                    content.showTextAligned(PdfContentByte.ALIGN_LEFT, " - ", 325, 310, 0);
                    if(others.getText().trim().isEmpty()){
                        content.showTextAligned(PdfContentByte.ALIGN_LEFT, " - ", 435, 310, 0);
                    } else {
                        content.showTextAligned(PdfContentByte.ALIGN_LEFT, others.getText().trim() , 435, 310, 0);
                    }
                    
                }  
                content.showTextAligned(PdfContentByte.ALIGN_LEFT, datePaid.getText().trim(), 265, 210, 0);  
                content.endText(); 
            }
            pdfStamper.close();
            pdfReader.close();
            fos.close();
            pdfWriter.close();
            md.successful(this);
        } catch (DocumentException ex) {
//            Logger.getLogger(Reservation_Tenant.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        } catch (FileNotFoundException ex) {
//            Logger.getLogger(Reservation_Tenant.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        } catch (IOException ex) {
//            Logger.getLogger(Reservation_Tenant.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }
    
    public boolean updateRoomStatusFromReservation(String roomNum) {
        boolean status = true;
        int count = 0;
        try {
            String roomId = "";
            String query = "";
            PreparedStatement preparedStatement = connection.prepareStatement("SELECT `roomIdnum` FROM room WHERE roomNumber LIKE ?");
            preparedStatement.setString(1, roomNum);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                roomId = resultSet.getString("roomIdnum");
                break;
            }
            
            preparedStatement = connection.prepareStatement("SELECT "
                    + "(SELECT DISTINCT COUNT(reservationIdnum) "
                    + "FROM  room  JOIN reservation ON room.roomIdnum = reservation.roomIdnum "
                    + "WHERE room.roomIdnum = ? AND reservationStatus = 'Pending') + "
                    + "(SELECT DISTINCT COUNT(residentIdnum) "
                    + "FROM  room  JOIN resident ON room.roomIdnum = resident.roomIdnum "
                    + "WHERE room.roomIdnum = ?) AS count");
            preparedStatement.setString(1, roomId);
            preparedStatement.setString(2, roomId);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                count = resultSet.getInt("count");
            }

            preparedStatement = connection.prepareStatement("SELECT * FROM room "
                    + "WHERE roomIdnum = ?");
            preparedStatement.setString(1, roomId);
            resultSet = preparedStatement.executeQuery();
//            System.out.println(count);
            while (resultSet.next()) {
                switch (resultSet.getString("roomType")) {
                    case "S":
                        switch (count) {
                            case 1:
                                if (status) {
                                    preparedStatement = connection.prepareStatement("UPDATE room "
                                            + "SET roomStatus = 'fully occupied' "
                                            + "WHERE roomIdnum = ?");
                                    preparedStatement.setString(1, roomId);
                                    status = preparedStatement.executeUpdate() == 1;
                                }
                                break;
                            default:
                                if (status) {
                                    preparedStatement = connection.prepareStatement("UPDATE room "
                                            + "SET roomStatus = 'unoccupied' "
                                            + "WHERE roomIdnum = ?");
                                    preparedStatement.setString(1, roomId);
                                    status = preparedStatement.executeUpdate() == 1;
                                }
                                break;
                        }
                        break;

                    case "D":
                        switch (count) {
                            case 2:
                                if (status) {
                                    preparedStatement = connection.prepareStatement("UPDATE room "
                                            + "set roomStatus = 'fully occupied' "
                                            + "WHERE roomIdnum = ?");
                                    preparedStatement.setString(1, roomId);
                                    status = preparedStatement.executeUpdate() == 1;
                                }
                                break;

                            case 1:
                                if (status) {
                                    preparedStatement = connection.prepareStatement("UPDATE room "
                                            + "set roomStatus = 'partially occupied' "
                                            + "WHERE roomIdnum = ?");
                                    preparedStatement.setString(1, roomId);
                                    status = preparedStatement.executeUpdate() == 1;
                                }
                                break;

                            default:
                                if (status) {
                                    preparedStatement = connection.prepareStatement("UPDATE room "
                                            + "set roomStatus = 'unoccupied' "
                                            + "WHERE roomIdnum = ?");
                                    preparedStatement.setString(1, roomId);
                                    status = preparedStatement.executeUpdate() == 1;
                                }
                                break;
                        }
                        break;

                    case "T":
                        switch (count) {
                            case 3:
                                if (status) {
                                    preparedStatement = connection.prepareStatement("UPDATE room "
                                            + "set roomStatus = 'fully occupied' "
                                            + "WHERE roomIdnum = ?");
                                    preparedStatement.setString(1, roomId);
                                    status = preparedStatement.executeUpdate() == 1;
                                }
                                break;
                            case 1:
                            case 2:
                                if (status) {
                                    preparedStatement = connection.prepareStatement("UPDATE room "
                                            + "set roomStatus = 'partially occupied' "
                                            + "WHERE roomIdnum = ?");
                                    preparedStatement.setString(1, roomId);
                                    status = preparedStatement.executeUpdate() == 1;
                                }
                                break;

                            default:
                                if (status) {
                                    preparedStatement = connection.prepareStatement("UPDATE room "
                                            + "set roomStatus = 'unoccupied' "
                                            + "WHERE roomIdnum = ?");
                                    preparedStatement.setString(1, roomId);
                                    status = preparedStatement.executeUpdate() == 1;
                                }
                                break;
                        }
                }
            }
        } catch (SQLException ex) {
//            Logger.getLogger(Reservation_Tenant.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        return status;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reservation_Tenant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Reservation_Tenant().setVisible(true);
                
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea address;
    private javax.swing.JTextField ayFrom;
    private javax.swing.JTextField ayTo;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearButton;
    private datechooser.beans.DateChooserCombo datePaid;
    private javax.swing.JTextField email;
    private javax.swing.JTextField fName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lName;
    private javax.swing.JTextField mName;
    private javax.swing.JTextField mNo;
    private javax.swing.JRadioButton oth;
    private javax.swing.JTextField others;
    private javax.swing.JTextField roomNumber;
    private javax.swing.JComboBox roomType;
    private javax.swing.JButton saveButton;
    private javax.swing.JComboBox schoolTermComboBox;
    private javax.swing.JRadioButton sterm;
    private javax.swing.ButtonGroup term;
    private javax.swing.JTextField zipCode;
    // End of variables declaration//GEN-END:variables

}
