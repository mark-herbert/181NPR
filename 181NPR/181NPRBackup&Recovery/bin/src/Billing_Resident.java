import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Mark Herbert Cabuang
 */
public class Billing_Resident extends javax.swing.JFrame {

    /**
     * Creates new form Billing_Resident
     */
    private DefaultTableModel tableModel = new DefaultTableModel();
    private ArrayList<BillingImpl> BillingResident;
    private final String idNum = "";
    private final String name = "";
    private String status = "";
    private final String resident = "";
    private int row = 0;
    private final DecimalFormat df = new DecimalFormat("#,##0.00");
    private Connection connection;

    public Billing_Resident() {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons/Backup and Recovery.png")));
        initComponents();
        
        try {
            Class.forName("com.mysql.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mysql://localhost/181nprdb", "root", "");
        } catch (ClassNotFoundException | SQLException ex) {
//            Logger.getLogger(InventoryForm.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        residentTable.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.addKeyListener(listener);
        this.setFocusable(true);
        setRow();
        sort();
    }

    private void sort() {
        tableModel = (DefaultTableModel) residentTable.getModel();
        residentTable.setRowSorter(new TableRowSorter(tableModel));
        int[] selection = residentTable.getSelectedRows();
        for (int i = 0; i < selection.length; i++) {
            selection[i] = residentTable.convertRowIndexToModel(selection[i]);
        }
    }

    private void setRow() {
        tableModel = (DefaultTableModel) residentTable.getModel();
        tableModel.getDataVector().removeAllElements();
        tableModel.fireTableDataChanged();
        BillingResident = getAllResidentBilling();
        for (BillingImpl info : BillingResident) {
            tableModel.addRow(new Object[]{
                info.getFull_name(),
                info.getRegistrationDate(),
                df.format(Double.parseDouble(info.getBalance())),
                info.getDatePaid()
            });
        }
        residentTable.setModel(tableModel);
    }
    /*
  
     /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popMenu = new javax.swing.JPopupMenu();
        statementOfAccounts = new javax.swing.JMenuItem();
        monthlyBill = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        filter = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        residentTable = new javax.swing.JTable();
        home = new javax.swing.JLabel();

        statementOfAccounts.setText("Statement of Accounts");
        statementOfAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statementOfAccountsActionPerformed(evt);
            }
        });
        popMenu.add(statementOfAccounts);

        monthlyBill.setText("Payment Remittance");
        monthlyBill.setToolTipText("");
        monthlyBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthlyBillActionPerformed(evt);
            }
        });
        popMenu.add(monthlyBill);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/monitoringsystem/181.jpg"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        jLabel1.setText("Filter by:");

        searchField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        searchField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchFieldCaretUpdate(evt);
            }
        });

        filter.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        filter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Resident", "Paid", "Unpaid" }));
        filter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterItemStateChanged(evt);
            }
        });

        residentTable.setAutoCreateRowSorter(true);
        residentTable.setFont(new java.awt.Font("Rondalo", 0, 11)); // NOI18N
        residentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Resident", "Registration date", "Balance", "Last Date Paid"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        residentTable.getTableHeader().setReorderingAllowed(false);
        residentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                residentTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(residentTable);
        if (residentTable.getColumnModel().getColumnCount() > 0) {
            residentTable.getColumnModel().getColumn(0).setPreferredWidth(175);
            residentTable.getColumnModel().getColumn(0).setHeaderValue("Resident");
            residentTable.getColumnModel().getColumn(1).setHeaderValue("Registration date");
            residentTable.getColumnModel().getColumn(2).setHeaderValue("Balance");
            residentTable.getColumnModel().getColumn(3).setHeaderValue("Last Date Paid");
        }

        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Back.png"))); // NOI18N
        home.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                                .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(home)))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(346, 346, 346))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 650, 530));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void filterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterItemStateChanged
        // TODO add your handling code here:
        String str = filter.getSelectedItem().toString();

        switch (str) {
            case "Paid":
                tableModel = (DefaultTableModel) residentTable.getModel();
                tableModel.getDataVector().removeAllElements();
                tableModel.fireTableDataChanged();
                BillingResident = getAllResidentBillingByStatus("Paid");
                for (BillingImpl info : BillingResident) {
                    tableModel.addRow(new Object[]{
                        info.getFull_name(),
                        info.getRegistrationDate(),
                        df.format(Double.parseDouble(info.getBalance().trim())),
                        info.getDatePaid()
                    });
                }
                break;

            case "Unpaid":
                tableModel = (DefaultTableModel) residentTable.getModel();
                tableModel.getDataVector().removeAllElements();
                tableModel.fireTableDataChanged();
                BillingResident = getAllResidentBillingByStatus("Unpaid");
                for (BillingImpl info : BillingResident) {
                    tableModel.addRow(new Object[]{
                        info.getFull_name(),
                        info.getRegistrationDate(),
                        df.format(Double.parseDouble(info.getBalance().trim())),
                        info.getDatePaid()
                    });
                }
                break;
            default:
                setRow();
        }
        sort();
        searchField.setText(searchField.getText());
    }//GEN-LAST:event_filterItemStateChanged

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1KeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void searchFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchFieldCaretUpdate
        if (searchField.getText().length() > 0) {
            String str = filter.getSelectedItem().toString();
            switch (str) {
                case "Paid":
                    tableModel = (DefaultTableModel) residentTable.getModel();
                    tableModel.getDataVector().removeAllElements();
                    tableModel.fireTableDataChanged();
                    BillingResident = getAllResidentBillingByName("Paid", searchField.getText());
                    for (BillingImpl info : BillingResident) {
                        tableModel.addRow(new Object[]{
                            info.getFull_name(),
                            info.getRegistrationDate(),
                            df.format(Double.parseDouble(info.getBalance().trim())),
                            info.getDatePaid()
                        });
                    }
                    break;
                case "Unpaid":
                    tableModel = (DefaultTableModel) residentTable.getModel();
                    tableModel.getDataVector().removeAllElements();
                    tableModel.fireTableDataChanged();
                    BillingResident = getAllResidentBillingByName("Unpaid", searchField.getText());
                    for (BillingImpl info : BillingResident) {
                        tableModel.addRow(new Object[]{
                            info.getFull_name(),
                            info.getRegistrationDate(),
                            df.format(Double.parseDouble(info.getBalance().trim())),
                            info.getDatePaid()
                        });
                    }
                    break;
                default:
                    tableModel = (DefaultTableModel) residentTable.getModel();
                    tableModel.getDataVector().removeAllElements();
                    tableModel.fireTableDataChanged();
                    BillingResident = getAllResidentBillingByName("", searchField.getText());
                    for (BillingImpl info : BillingResident) {
                        tableModel.addRow(new Object[]{
                            info.getFull_name(),
                            info.getRegistrationDate(),
                            df.format(Double.parseDouble(info.getBalance().trim())),
                            info.getDatePaid()
                        });
                    }
                    break;
            }
        } else {
            String str = filter.getSelectedItem().toString();

            switch (str) {
                case "Paid":
                    tableModel = (DefaultTableModel) residentTable.getModel();
                    tableModel.getDataVector().removeAllElements();
                    tableModel.fireTableDataChanged();
                    BillingResident = getAllResidentBillingByStatus("Paid");
                    for (BillingImpl info : BillingResident) {
                        tableModel.addRow(new Object[]{
                            info.getFull_name(),
                            info.getRegistrationDate(),
                            df.format(Double.parseDouble(info.getBalance().trim())),
                            info.getDatePaid()
                        });
                    }
                    break;

                case "Unpaid":
                    tableModel = (DefaultTableModel) residentTable.getModel();
                    tableModel.getDataVector().removeAllElements();
                    tableModel.fireTableDataChanged();
                    BillingResident = getAllResidentBillingByStatus("Unpaid");
                    for (BillingImpl info : BillingResident) {
                        tableModel.addRow(new Object[]{
                            info.getFull_name(),
                            info.getRegistrationDate(),
                            df.format(Double.parseDouble(info.getBalance().trim())),
                            info.getDatePaid()
                        });
                    }

                    break;
                default:
                    setRow();
                    break;
            }
        }
    }//GEN-LAST:event_searchFieldCaretUpdate

    private void homeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMouseClicked
        this.dispose();
        new Home().setVisible(true);
    }//GEN-LAST:event_homeMouseClicked

    private void monthlyBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthlyBillActionPerformed
        String selectedName = residentTable.getValueAt(residentTable.getSelectedRow(), 0).toString();
        String lastDatePaid = residentTable.getValueAt(residentTable.getSelectedRow(), 3).toString();
        new Billing(getResidentId(selectedName), lastDatePaid).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_monthlyBillActionPerformed

    private void residentTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_residentTableMouseReleased
        if (residentTable.getSelectedRowCount() == 1) {
            if (evt.isPopupTrigger()) {
                status = residentTable.getValueAt(residentTable.getSelectedRow(), 1).toString();
                javax.swing.JTable source = (javax.swing.JTable) evt.getSource();
                row = source.rowAtPoint(evt.getPoint());
                int column = source.columnAtPoint(evt.getPoint());
                if (!source.isRowSelected(row)) {
                    source.changeSelection(row, column, false, false);
                }
                popMenu.show(evt.getComponent(), evt.getX(), evt.getY());
                if (residentHasPreviousStatement(getResidentId(residentTable.getValueAt(residentTable.getSelectedRow(), 0).toString()))) {
                    monthlyBill.setEnabled(true);
                } else {
                    monthlyBill.setEnabled(false);
                }
            }
        }
    }//GEN-LAST:event_residentTableMouseReleased

    private void statementOfAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statementOfAccountsActionPerformed
        String residentId = getResidentId(residentTable.getValueAt(residentTable.getSelectedRow(), 0).toString());
        String lastDatePaid = residentTable.getValueAt(residentTable.getSelectedRow(), 3).toString();
        new Billing_v2(residentId, getDatein(residentId, lastDatePaid)).setVisible(true);
        this.dispose();
    }//GEN-LAST:event_statementOfAccountsActionPerformed
    KeyListener listener = new KeyListener() {

        @Override
        public void keyTyped(KeyEvent ke) {
            if (ke.getKeyCode() == KeyEvent.VK_ESCAPE) {
                if (JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Confirmation",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    // yes option
                    JOptionPane.showMessageDialog(null, "Success!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            }
//    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        ;

        @Override
        public void keyPressed(KeyEvent ke) {
            //throw new UnsupportedOperationException("Not supported yet.");
            //To change body of generated methods, choose Tools | Templates.
            if (ke.getKeyCode() == KeyEvent.VK_ESCAPE) {
                if (JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Confirmation",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    // yes option
                    JOptionPane.showMessageDialog(null, "Success!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }

        ;

        @Override
        public void keyReleased(KeyEvent ke) {
            if (ke.getKeyCode() == KeyEvent.VK_ESCAPE) {
                if (JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Confirmation",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    // yes option
                    JOptionPane.showMessageDialog(null, "Success!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            }
//    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        };

    };
    
    
    public ArrayList<BillingImpl> getAllResidentBilling() {
        ArrayList<BillingImpl> billingResident = new ArrayList<>();
        try {
            PreparedStatement preparedStatement = connection.prepareStatement(
                    "SELECT * FROM (SELECT CONCAT(residentLname,', ',residentFname) AS name, "
                    + "registrationDate, billingBalance, billingDatePaid, billingDatein FROM "
                    + "(SELECT resident.residentIdnum, residentLname, residentFname, registrationDate, "
                    + "billingBalance, billingDatePaid, billingDatein "
                    + "FROM resident LEFT JOIN billing ON resident.residentIdnum = billing.residentIdnum "
                    + "LEFT JOIN registration ON registration.registrationIdnum = resident.registrationIdnum "
                    + "WHERE status NOT LIKE 'Leave' AND billingStatus NOT LIKE 'Replaced' "
                    + "ORDER BY billingDatein DESC, billingDatePaid ASC) as t1 GROUP BY name "
                    + "ORDER BY billingDatePaid DESC, billingDatein DESC) AS t1 ORDER BY name");
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                BillingImpl bill = new BillingImpl();
                if (resultSet.getString("name") != null) {
                    bill.setFull_name(resultSet.getString("name").trim());
                }
                if (resultSet.getString("registrationDate") != null) {
                    bill.setRegistrationDate(resultSet.getString("registrationDate"));
                }
                if (resultSet.getString("billingBalance") != null) {
                    bill.setBalance(resultSet.getString("billingBalance"));
                } else {
                    bill.setBalance("0.00");
                }
                if (resultSet.getString("billingDatePaid") != null) {
                    bill.setDatePaid(resultSet.getString("billingDatePaid").trim());
                }
                billingResident.add(bill);
            }
        } catch (SQLException ex) {
//            Logger.getLogger(Billing_Resident.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        return billingResident;
    }
    
    public String getResidentId(String name) {
        String id = "";
        try {
            String[] ResidentName = name.split(",");
            PreparedStatement preparedStatement = connection.prepareStatement("SELECT residentIdnum FROM resident WHERE residentLname LIKE ? AND residentFname LIKE ?");
            preparedStatement.setString(1, ResidentName[0].trim());
            preparedStatement.setString(2, ResidentName[1].trim());
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                id = resultSet.getString("residentIdnum");
            }
        } catch (SQLException ex) {
//            Logger.getLogger(Billing_Resident.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        return id;
    }
    
    public double getPreviousBalance(String id, String prev) {
        double balance = 0.0;
        try {
            PreparedStatement preparedStatement;
            ResultSet resultSet;
            preparedStatement = connection.prepareStatement("SELECT billingBalance FROM billing WHERE residentIdnum = ? AND billingStatus = 'Paid' ORDER BY billingDatePaid DESC LIMIT 1");
            preparedStatement.setString(1, id);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                balance = resultSet.getDouble("billingBalance");
            }
        } catch (SQLException ex) {
//            Logger.getLogger(Billing_Resident.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        return balance;
    }
    
    public ArrayList<BillingImpl> getAllResidentBillingByStatus(String status) {
        ArrayList<BillingImpl> billingResident = new ArrayList<>();
        try {
            PreparedStatement preparedStatement;
            if (status.equalsIgnoreCase("Paid")) {
                preparedStatement = connection.prepareStatement(
                        "SELECT * FROM (SELECT CONCAT(residentLname,', ',residentFname) AS name, "
                        + "registrationDate, billingBalance, billingDatePaid, billingDatein FROM "
                        + "(SELECT resident.residentIdnum, residentLname, residentFname, registrationDate, "
                        + "billingBalance, billingDatePaid, billingDatein "
                        + "FROM resident LEFT JOIN billing ON resident.residentIdnum = billing.residentIdnum "
                        + "LEFT JOIN registration ON registration.registrationIdnum = resident.registrationIdnum "
                        + "WHERE status NOT LIKE 'Leave' AND billingStatus NOT LIKE 'Replaced' "
                        + "ORDER BY billingDatein DESC, billingDatePaid ASC) as t1 GROUP BY name "
                        + "ORDER BY billingDatePaid DESC, billingDatein DESC) AS t1 WHERE billingBalance = ? ORDER BY name");
                preparedStatement.setDouble(1, 0.00);
            } else {
                preparedStatement = connection.prepareStatement("SELECT * FROM (SELECT CONCAT(residentLname,', ',residentFname) AS name, "
                        + "registrationDate, billingBalance, billingDatePaid, billingDatein FROM "
                        + "(SELECT resident.residentIdnum, residentLname, residentFname, registrationDate, "
                        + "billingBalance, billingDatePaid, billingDatein "
                        + "FROM resident LEFT JOIN billing ON resident.residentIdnum = billing.residentIdnum "
                        + "LEFT JOIN registration ON registration.registrationIdnum = resident.registrationIdnum "
                        + "WHERE status NOT LIKE 'Leave' AND billingStatus NOT LIKE 'Replaced' "
                        + "ORDER BY billingDatein DESC, billingDatePaid ASC) as t1 GROUP BY name "
                        + "ORDER BY billingDatePaid DESC, billingDatein DESC) AS t1 WHERE billingBalance != ? ORDER BY name");
                preparedStatement.setDouble(1, 0.00);
            }
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                BillingImpl bill = new BillingImpl();
                if (resultSet.getString("name") != null) {
                    bill.setFull_name(resultSet.getString("name").trim());
                }
                if (resultSet.getString("registrationDate") != null) {
                    bill.setRegistrationDate(resultSet.getString("registrationDate"));
                }
                if (resultSet.getString("billingBalance") != null) {
                    bill.setBalance(resultSet.getString("billingBalance"));
                } else {
                    bill.setBalance("0.00");
                }
                if (resultSet.getString("billingDatePaid") != null) {
                    bill.setDatePaid(resultSet.getString("billingDatePaid").trim());
                }
                billingResident.add(bill);
            }
        } catch (SQLException ex) {
//            Logger.getLogger(Billing_Resident.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        return billingResident;
    }
    
    public ArrayList<BillingImpl> getAllResidentBillingByName(String status, String keyword) {
        ArrayList<BillingImpl> billingResident = new ArrayList<>();
        try {
            PreparedStatement preparedStatement;
            if (status.equalsIgnoreCase("Paid")) {
                preparedStatement = connection.prepareStatement(
                        "SELECT * FROM (SELECT CONCAT(residentLname,', ',residentFname) AS name, "
                        + "registrationDate, billingBalance, billingDatePaid, billingDatein FROM "
                        + "(SELECT resident.residentIdnum, residentLname, residentFname, registrationDate, "
                        + "billingBalance, billingDatePaid, billingDatein "
                        + "FROM resident LEFT JOIN billing ON resident.residentIdnum = billing.residentIdnum "
                        + "LEFT JOIN registration ON registration.registrationIdnum = resident.registrationIdnum "
                        + "WHERE (resident.residentLname LIKE ? OR resident.residentFname LIKE ?) "
                        + "AND (status NOT LIKE 'Leave' AND billingStatus NOT LIKE 'Replaced') "
                        + "ORDER BY billingDatein DESC, billingDatePaid ASC) as t1 GROUP BY name "
                        + "ORDER BY billingDatePaid DESC, billingDatein DESC) AS t1 WHERE billingBalance = 0.00 ORDER BY name");
                preparedStatement.setString(1, "%" + keyword + "%");
                preparedStatement.setString(2, "%" + keyword + "%");
                ResultSet resultSet = preparedStatement.executeQuery();
                while (resultSet.next()) {
                    BillingImpl bill = new BillingImpl();
                    if (resultSet.getString("name") != null) {
                        bill.setFull_name(resultSet.getString("name").trim());
                    }
                    if (resultSet.getString("registrationDate") != null) {
                        bill.setRegistrationDate(resultSet.getString("registrationDate"));
                    }
                    if (resultSet.getString("billingBalance") != null) {
                        bill.setBalance(resultSet.getString("billingBalance"));
                    } else {
                        bill.setBalance("0.00");
                    }
                    if (resultSet.getString("billingDatePaid") != null) {
                        bill.setDatePaid(resultSet.getString("billingDatePaid").trim());
                    }
                    billingResident.add(bill);
                }
            } else if (status.equalsIgnoreCase("Unpaid")) {
                preparedStatement = connection.prepareStatement(
                        "SELECT * FROM (SELECT CONCAT(residentLname,', ',residentFname) AS name, "
                        + "registrationDate, billingBalance, billingDatePaid, billingDatein FROM "
                        + "(SELECT resident.residentIdnum, residentLname, residentFname, registrationDate,"
                        + "billingBalance, billingDatePaid, billingDatein "
                        + "FROM resident LEFT JOIN billing ON resident.residentIdnum = billing.residentIdnum "
                        + "LEFT JOIN registration ON registration.registrationIdnum = resident.registrationIdnum "
                        + "WHERE (resident.residentLname LIKE ? OR resident.residentFname LIKE ?) "
                        + "AND (status NOT LIKE 'Leave' AND billingStatus NOT LIKE 'Replaced') "
                        + "ORDER BY billingDatein DESC, billingDatePaid ASC) as t1 GROUP BY name "
                        + "ORDER BY billingDatePaid DESC, billingDatein DESC) AS t1 WHERE billingBalance != 0.00 ORDER BY name");
                preparedStatement.setString(1, "%" + keyword + "%");
                preparedStatement.setString(2, "%" + keyword + "%");
                ResultSet resultSet = preparedStatement.executeQuery();
                while (resultSet.next()) {
                    BillingImpl bill = new BillingImpl();
                    if (resultSet.getString("name") != null) {
                        bill.setFull_name(resultSet.getString("name").trim());
                    }
                    if (resultSet.getString("registrationDate") != null) {
                        bill.setRegistrationDate(resultSet.getString("registrationDate"));
                    }
                    if (resultSet.getString("billingBalance") != null) {
                        bill.setBalance(resultSet.getString("billingBalance"));
                    } else {
                        bill.setBalance("0.00");
                    }
                    if (resultSet.getString("billingDatePaid") != null) {
                        bill.setDatePaid(resultSet.getString("billingDatePaid").trim());
                    }
                    billingResident.add(bill);
                }
            } else {
                preparedStatement = connection.prepareStatement(
                        "SELECT * FROM (SELECT CONCAT(residentLname,', ',residentFname) AS name, "
                        + "registrationDate, billingBalance, billingDatePaid, billingDatein FROM "
                        + "(SELECT resident.residentIdnum, residentLname, residentFname, registrationDate,"
                        + "billingBalance, billingDatePaid, billingDatein "
                        + "FROM resident LEFT JOIN billing ON resident.residentIdnum = billing.residentIdnum "
                        + "LEFT JOIN registration ON registration.registrationIdnum = resident.registrationIdnum "
                        + "WHERE (resident.residentLname LIKE ? OR resident.residentFname LIKE ?) "
                        + "AND (status NOT LIKE 'Leave' AND billingStatus NOT LIKE 'Replaced') "
                        + "ORDER BY billingDatein DESC, billingDatePaid ASC) as t1 GROUP BY name "
                        + "ORDER BY billingDatePaid DESC, billingDatein DESC) AS t1 ORDER BY name");
                preparedStatement.setString(1, "%" + keyword + "%");
                preparedStatement.setString(2, "%" + keyword + "%");
                ResultSet resultSet = preparedStatement.executeQuery();
                while (resultSet.next()) {
                    BillingImpl bill = new BillingImpl();
                    if (resultSet.getString("name") != null) {
                        bill.setFull_name(resultSet.getString("name").trim());
                    }
                    if (resultSet.getString("registrationDate") != null) {
                        bill.setRegistrationDate(resultSet.getString("registrationDate"));
                    }
                    if (resultSet.getString("billingBalance") != null) {
                        bill.setBalance(resultSet.getString("billingBalance"));
                    } else {
                        bill.setBalance("0.00");
                    }
                    if (resultSet.getString("billingDatePaid") != null) {
                        bill.setDatePaid(resultSet.getString("billingDatePaid").trim());
                    }
                    billingResident.add(bill);
                }
            }
        } catch (SQLException ex) {
//            Logger.getLogger(Billing_Resident.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        return billingResident;
    }
    
    public boolean residentHasPreviousStatement(String residentIdnum) {
        try {
            PreparedStatement preparedStatement = connection.prepareStatement("SELECT billingIdnum FROM billing WHERE residentIdnum = ? AND billingStatus LIKE 'UNPAID'");
            preparedStatement.setInt(1, Integer.parseInt(residentIdnum));
            ResultSet rs = preparedStatement.executeQuery();
            while (rs.next()) {
                return true;
            }
            return false;
        } catch (SQLException ex) {
//            Logger.getLogger(Billing_Resident.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
            return false;
        }
    }
    
    public String getDatein(String id, String date) {
        String d = "";
        try {
            PreparedStatement preparedStatement;
            ResultSet resultSet;
            preparedStatement = connection.prepareStatement("SELECT billingDatein FROM billing WHERE residentIdnum = ? AND billingDatePaid = ?");
            preparedStatement.setString(1, id);
            preparedStatement.setString(2, date);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                d = resultSet.getString("billingDatein");
            }
        } catch (SQLException ex) {
//            Logger.getLogger(Billing_Resident.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        return d;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Billing_Resident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Billing_Resident().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox filter;
    private javax.swing.JLabel home;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem monthlyBill;
    private javax.swing.JPopupMenu popMenu;
    private javax.swing.JTable residentTable;
    private javax.swing.JTextField searchField;
    private javax.swing.JMenuItem statementOfAccounts;
    // End of variables declaration//GEN-END:variables
}
