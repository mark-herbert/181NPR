import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Kathreen Silen
 */
public class ShuttleService extends javax.swing.JFrame {

    /**
     * Creates new form ShuttleService
     */
    private String idnum = "";
    private DefaultTableModel tableModel = new DefaultTableModel();
    private int c;
    private JFormattedTextField jFormattedTextField3;
    int row;
    int totalNumberOfRides;
    String idNum;
    int totalNumberRides;
    private String timeStamp = new SimpleDateFormat("yyyy-MM-dd").format(Calendar.getInstance().getTime());
    private Connection connection;

    public ShuttleService(String idnum, JFormattedTextField jFormattedTextField3) throws ClassNotFoundException {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons/Backup and Recovery.png")));
        initComponents();
        
        try {
            Class.forName("com.mysql.jdbc.Driver");
            connection = DriverManager.getConnection("jdbc:mysql://localhost/181nprdb", "root", "");
        } catch (ClassNotFoundException | SQLException ex) {
//            Logger.getLogger(InventoryForm.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        
        this.idNum = idnum;
        this.jFormattedTextField3 = jFormattedTextField3;
        try {
            tableModel = (DefaultTableModel) shuttleTable.getModel();
            tableModel.getDataVector().removeAllElements();
            tableModel.fireTableDataChanged();
            String[] ymd = timeStamp.split("-");
            int year = Integer.parseInt(ymd[0]);
            int month = Integer.parseInt(ymd[1]);
            int day = Integer.parseInt(ymd[2]);
            Calendar calendar = Calendar.getInstance();
            calendar.set(Calendar.YEAR, year);
            calendar.set(Calendar.MONTH, month);
            int daysQty = calendar.getActualMaximum(Calendar.DAY_OF_MONTH); // Something like this
            DateFormat outputFormat = new SimpleDateFormat("MMM dd, yyyy");
            DateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd");
            for (int days = 1; days <= daysQty; days++) {
                String inputText = year + "-" + month + "-" + days;
                java.util.Date date = inputFormat.parse(inputText);
                String outputText = outputFormat.format(date);
                tableModel.addRow(new Object[]{
                    outputText,
                    ""
                });
            }
            ArrayList<ShuttleImpl> rides = getRides(idnum);
            for(ShuttleImpl s : rides){
                for(int i = 0; i < shuttleTable.getRowCount(); i++){
                    if(s.getShuttleDate().trim().equalsIgnoreCase(shuttleTable.getValueAt(i, 0).toString())){
                        shuttleTable.setValueAt(s.getNumberOfRides(), i, 1);
                    }
                }
                noRides.setText((Integer.parseInt(noRides.getText()) + s.getNumberOfRides())+"");
//                tableModel.addRow(new Object[]{
//                        s.getShuttleDate(),
//                        s.getNumberOfRides()
//                    });
            }
        } catch (ParseException ex) {
//            Logger.getLogger(ShuttleService.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }

    }

    public ShuttleService() {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons/Backup and Recovery.png")));
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        shuttleTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        noRides = new javax.swing.JTextField();
        confirmButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        shuttleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Date", "Number of Rides"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        shuttleTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shuttleTableMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                shuttleTableMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                shuttleTableMouseReleased(evt);
            }
        });
        shuttleTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                shuttleTableKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                shuttleTableKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                shuttleTableKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(shuttleTable);
        if (shuttleTable.getColumnModel().getColumnCount() > 0) {
            shuttleTable.getColumnModel().getColumn(0).setResizable(false);
            shuttleTable.getColumnModel().getColumn(1).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(26, 48, 284, 520));

        jLabel1.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        jLabel1.setText("Total Number of Rides: ");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 590, -1, -1));

        noRides.setText("0");
        noRides.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                noRidesMouseClicked(evt);
            }
        });
        noRides.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noRidesActionPerformed(evt);
            }
        });
        jPanel1.add(noRides, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 590, 160, -1));

        confirmButton.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        confirmButton.setText("Confirm");
        confirmButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });
        jPanel1.add(confirmButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 620, -1, -1));

        cancelButton.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        cancelButton.setText("Cancel");
        cancelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        jPanel1.add(cancelButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 620, -1, -1));

        jLabel2.setFont(new java.awt.Font("Rondalo", 1, 18)); // NOI18N
        jLabel2.setText("SHUTTLE RIDE");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 20, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 330, 660));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void noRidesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noRidesActionPerformed

    }//GEN-LAST:event_noRidesActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        boolean status = true;
        try {
            for (int i = 0; i < shuttleTable.getRowCount(); i++) {
                if (shuttleTable.getValueAt(i, 1) != null && !shuttleTable.getValueAt(i, 1).toString().trim().isEmpty()) {
                    java.util.Date utilDate = new SimpleDateFormat("MMMM dd, yyyy").parse(shuttleTable.getValueAt(i, 0).toString());
                    java.sql.Date sqlDate = new java.sql.Date(new SimpleDateFormat("yyyy-mm-dd").parse(new SimpleDateFormat("yyyy-mm-dd").format(utilDate)).getTime());
                    ArrayList<String> info = new ArrayList<>();
                    info.add(new SimpleDateFormat("yyyy-mm-dd").format(sqlDate));
                    info.add(shuttleTable.getValueAt(i, 1).toString());
                    info.add(idNum);
                    if (!isSaved(info)) {
                        if (!insertShuttle(info)) {
                            JOptionPane.showMessageDialog(null, "Server Error!", "Error", JOptionPane.ERROR_MESSAGE);
                            status = false;
                            break;
                        }
                    }
                }
            }
        } catch (ParseException ex) {
//            Logger.getLogger(ShuttleService.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        if (status) {
            new MessageDialog().successful(this);
            jFormattedTextField3.setText(noRides.getText().trim());
            dispose();
        }
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void noRidesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_noRidesMouseClicked
        computeTotalRides();
    }//GEN-LAST:event_noRidesMouseClicked

    private void shuttleTableKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_shuttleTableKeyReleased
        computeTotalRides();
    }//GEN-LAST:event_shuttleTableKeyReleased

    private void shuttleTableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_shuttleTableKeyPressed
        computeTotalRides();
    }//GEN-LAST:event_shuttleTableKeyPressed

    private void shuttleTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_shuttleTableKeyTyped
        computeTotalRides();
    }//GEN-LAST:event_shuttleTableKeyTyped

    private void shuttleTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shuttleTableMouseClicked
        computeTotalRides();
    }//GEN-LAST:event_shuttleTableMouseClicked

    private void shuttleTableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shuttleTableMousePressed
        computeTotalRides();
    }//GEN-LAST:event_shuttleTableMousePressed

    private void shuttleTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shuttleTableMouseReleased
        computeTotalRides();
    }//GEN-LAST:event_shuttleTableMouseReleased

    private void computeTotalRides() throws NumberFormatException {
        c = 0;
        tableModel = (DefaultTableModel) shuttleTable.getModel();
        for (int count = 0; count < tableModel.getRowCount(); count++) {
            if (tableModel.getValueAt(count, 1) != null) {
                if (!tableModel.getValueAt(count, 1).toString().equals("")) {
                    c += Integer.parseInt(tableModel.getValueAt(count, 1).toString());
                } else {
                    c += 0;
                }
            }
        }
        noRides.setText(c + "");
    }
    
    public ArrayList<ShuttleImpl> getRides(String residentIdnum) {
        ArrayList<ShuttleImpl> rides = new ArrayList<>();
        try {
            PreparedStatement preparedStatement;
            ResultSet resultSet;
            preparedStatement = connection.prepareStatement("SELECT shuttleDate, shuttleNoRides FROM shuttle WHERE residentIdnum = ? AND shuttleStatus = 'unpaid'");
            preparedStatement.setString(1, residentIdnum);
            resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                rides.add(new ShuttleImpl(new SimpleDateFormat("MMM dd, yyyy").format(resultSet.getDate("shuttleDate")), resultSet.getInt("shuttleNoRides")));
            }
        } catch (SQLException ex) {
//            Logger.getLogger(ShuttleService.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        return rides;
    }
    
    public boolean isSaved(ArrayList<String> info) {
        boolean status = false;
        try {
            PreparedStatement preparedStatement;
            preparedStatement = connection.prepareStatement("SELECT * FROM shuttle WHERE shuttleDate = ? AND shuttleStatus = 'unpaid' AND shuttleNoRides = ? AND residentIdnum = ?");
            preparedStatement.setString(1, info.get(0));
            preparedStatement.setString(2, info.get(1));
            preparedStatement.setString(3, info.get(2));
            ResultSet resultSet = preparedStatement.executeQuery();
            int c = 0;
            while (resultSet.next()) {
                c++;
            }
            if (c != 0) {
                status = true;
            }
        } catch (SQLException ex) {
//            Logger.getLogger(ShuttleService.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        return status;
    }
    
    public boolean insertShuttle(ArrayList<String> info) {
        boolean status = true;
        try {
            PreparedStatement preparedStatement;
            ResultSet resultSet;
            preparedStatement = connection.prepareStatement("INSERT INTO shuttle (shuttleDate, shuttleNoRides, residentIdnum, shuttleStatus) VALUES (?,?,?,?)");
            preparedStatement.setString(1, info.get(0));
            preparedStatement.setInt(2, Integer.parseInt(info.get(1)));
            preparedStatement.setInt(3, Integer.parseInt(info.get(2)));
            preparedStatement.setString(4, "unpaid");
            status = preparedStatement.executeUpdate() == 1;
        } catch (SQLException ex) {
            status = false;
//            Logger.getLogger(ShuttleService.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        return status;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShuttleService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShuttleService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShuttleService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShuttleService.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ShuttleService(null,null).setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ShuttleService.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField noRides;
    private javax.swing.JTable shuttleTable;
    // End of variables declaration//GEN-END:variables
}
