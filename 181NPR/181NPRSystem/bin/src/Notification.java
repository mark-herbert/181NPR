
import datechooser.model.exeptions.IncompatibleDataExeption;
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Kenneth
 */
public class Notification extends javax.swing.JFrame {

    /**
     * Creates new form Notification
     */
    private final NPRInterface client;
    private String user;
    protected TimerThread timerThread;
    private DefaultTableModel model;
    private DefaultTableModel model1;
    private DefaultTableModel model2;
    private ArrayList<LogsImpl> id;
    private ArrayList<LogsImpl> logs;
    private boolean status = false;
    private String yesterdaysDate = null;
    private Calendar yesterday;
    private final MessageDialog md = new MessageDialog();
    
    public Notification(NPRInterface client, String user) {
        initComponents();
        this.client = client;
        this.user = user;
        notifs.getTableHeader().setReorderingAllowed(Boolean.FALSE);
        reservationTable.getTableHeader().setReorderingAllowed(Boolean.FALSE);
        transientTable.getTableHeader().setReorderingAllowed(Boolean.FALSE);
        model = (DefaultTableModel) notifs.getModel();
        SimpleDateFormat sqlDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        yesterday = Calendar.getInstance();
        yesterday.add(Calendar.DATE, -1);
        yesterdaysDate = sqlDateFormat.format(yesterday.getTime());
        String[] d = yesterdaysDate.split("-");
        try {
            logs = client.getAllResidentsForNotif(yesterdaysDate);
        } catch (RemoteException ex) {
//            Logger.getLogger(Notification.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        try {
            dateChooser.setDefaultPeriods(new datechooser.model.multiple.PeriodSet(
                    new datechooser.model.multiple.Period(
                            new java.util.GregorianCalendar(Integer.parseInt(d[0]), Integer.parseInt(d[1])-1, Integer.parseInt(d[2])),
                            new java.util.GregorianCalendar(Integer.parseInt(d[0]), Integer.parseInt(d[1])-1, Integer.parseInt(d[2])))));
        } catch (IncompatibleDataExeption ex) {
//            Logger.getLogger(Notification.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        setNotifs();
        setReservations();
        setTransients();
        timerThread = new TimerThread(time, date, day);
        timerThread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        day = new javax.swing.JLabel();
        date = new javax.swing.JLabel();
        time = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        dateChooser = new datechooser.beans.DateChooserCombo();
        resident = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notifs = new javax.swing.JTable();
        checkAll = new javax.swing.JCheckBox();
        sendText = new javax.swing.JButton();
        sendEmail = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        transientTable = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        reservationTable = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jCheckBox2 = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setIconImage(new ImageIcon(getClass().getResource("icons/181NPR.png")).getImage());
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        day.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        day.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        day.setText("Monday");

        date.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        date.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        date.setText("Jan 01, 2001");

        time.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        time.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        time.setText("12:00 AM");

        jLabel4.setFont(new java.awt.Font("Rondalo", 0, 24)); // NOI18N
        jLabel4.setText("Notification");

        jLabel6.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        jLabel6.setText("Search");

        searchField.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        searchField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchFieldCaretUpdate(evt);
            }
        });

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Back.png"))); // NOI18N
        jLabel7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        jLabel1.setText("Date");

        dateChooser.setCurrentView(new datechooser.view.appearance.AppearancesList("Light",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    dateChooser.setNothingAllowed(false);
    dateChooser.setFormat(2);
    dateChooser.setFieldFont(new java.awt.Font("Rondalo", java.awt.Font.PLAIN, 14));
    dateChooser.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
    dateChooser.addCommitListener(new datechooser.events.CommitListener() {
        public void onCommit(datechooser.events.CommitEvent evt) {
            dateChooserOnCommit(evt);
        }
    });

    resident.setFont(new java.awt.Font("Rondalo", 0, 18)); // NOI18N
    resident.setMaximumSize(new java.awt.Dimension(883, 419));
    resident.setMinimumSize(new java.awt.Dimension(883, 419));
    resident.setName("Resident"); // NOI18N
    resident.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            residentStateChanged(evt);
        }
    });

    jPanel2.setBackground(new java.awt.Color(255, 255, 255));

    notifs.setAutoCreateRowSorter(true);
    notifs.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
    notifs.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "", "ID", "Name", "Date", "Time-out", "Time-in", "Remarks"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            true, false, false, false, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    notifs.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            notifsMouseClicked(evt);
        }
    });
    jScrollPane1.setViewportView(notifs);
    if (notifs.getColumnModel().getColumnCount() > 0) {
        notifs.getColumnModel().getColumn(0).setResizable(false);
        notifs.getColumnModel().getColumn(0).setPreferredWidth(5);
        notifs.getColumnModel().getColumn(1).setResizable(false);
        notifs.getColumnModel().getColumn(1).setPreferredWidth(125);
        notifs.getColumnModel().getColumn(2).setResizable(false);
        notifs.getColumnModel().getColumn(2).setPreferredWidth(300);
        notifs.getColumnModel().getColumn(3).setResizable(false);
        notifs.getColumnModel().getColumn(3).setPreferredWidth(100);
        notifs.getColumnModel().getColumn(4).setResizable(false);
        notifs.getColumnModel().getColumn(4).setPreferredWidth(80);
        notifs.getColumnModel().getColumn(5).setResizable(false);
        notifs.getColumnModel().getColumn(5).setPreferredWidth(80);
        notifs.getColumnModel().getColumn(6).setResizable(false);
    }

    checkAll.setBackground(new java.awt.Color(255, 255, 255));
    checkAll.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
    checkAll.setText("Check All");
    checkAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    checkAll.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            checkAllMouseClicked(evt);
        }
    });

    sendText.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
    sendText.setText("Send TEXT");
    sendText.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    sendText.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            sendTextActionPerformed(evt);
        }
    });

    sendEmail.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
    sendEmail.setText("Send EMAIL");
    sendEmail.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    sendEmail.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            sendEmailActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 858, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addComponent(checkAll)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sendText)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(sendEmail)))
            .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
        jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel2Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(checkAll)
                .addComponent(sendEmail)
                .addComponent(sendText))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    resident.addTab("Residents", jPanel2);

    jPanel3.setBackground(new java.awt.Color(255, 255, 255));

    jPanel5.setBackground(new java.awt.Color(255, 255, 255));
    jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Transient", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Rondalo", 0, 14))); // NOI18N

    transientTable.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
    transientTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "", "Name", "Days Left", "Remarks"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            true, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    transientTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            transientTableMouseClicked(evt);
        }
    });
    jScrollPane2.setViewportView(transientTable);
    if (transientTable.getColumnModel().getColumnCount() > 0) {
        transientTable.getColumnModel().getColumn(0).setResizable(false);
        transientTable.getColumnModel().getColumn(0).setPreferredWidth(5);
        transientTable.getColumnModel().getColumn(1).setResizable(false);
        transientTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        transientTable.getColumnModel().getColumn(2).setResizable(false);
        transientTable.getColumnModel().getColumn(2).setPreferredWidth(50);
        transientTable.getColumnModel().getColumn(3).setResizable(false);
        transientTable.getColumnModel().getColumn(3).setPreferredWidth(80);
    }

    jButton1.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
    jButton1.setText("Send TEXT");
    jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    jButton2.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
    jButton2.setText("Send EMAIL");
    jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    jCheckBox1.setBackground(new java.awt.Color(255, 255, 255));
    jCheckBox1.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
    jCheckBox1.setText("Check All");
    jCheckBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jCheckBox1MouseClicked(evt);
        }
    });

    javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
    jPanel5.setLayout(jPanel5Layout);
    jPanel5Layout.setHorizontalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jCheckBox1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
            .addComponent(jButton1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton2)
            .addContainerGap())
        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
    );
    jPanel5Layout.setVerticalGroup(
        jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel5Layout.createSequentialGroup()
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1)
                .addComponent(jButton2)
                .addComponent(jCheckBox1))
            .addContainerGap())
    );

    jPanel6.setBackground(new java.awt.Color(255, 255, 255));
    jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Reservation", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Rondalo", 0, 14))); // NOI18N

    reservationTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {

        },
        new String [] {
            "", "Name", "Days Left", "Remarks"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            true, false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    reservationTable.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            reservationTableMouseClicked(evt);
        }
    });
    jScrollPane3.setViewportView(reservationTable);
    if (reservationTable.getColumnModel().getColumnCount() > 0) {
        reservationTable.getColumnModel().getColumn(0).setResizable(false);
        reservationTable.getColumnModel().getColumn(0).setPreferredWidth(5);
        reservationTable.getColumnModel().getColumn(1).setResizable(false);
        reservationTable.getColumnModel().getColumn(1).setPreferredWidth(200);
        reservationTable.getColumnModel().getColumn(2).setResizable(false);
        reservationTable.getColumnModel().getColumn(2).setPreferredWidth(50);
        reservationTable.getColumnModel().getColumn(3).setResizable(false);
        reservationTable.getColumnModel().getColumn(3).setPreferredWidth(80);
    }

    jButton3.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
    jButton3.setText("Send EMAIL");
    jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    jButton4.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
    jButton4.setText("Send TEXT");
    jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jButton4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton4ActionPerformed(evt);
        }
    });

    jCheckBox2.setBackground(new java.awt.Color(255, 255, 255));
    jCheckBox2.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
    jCheckBox2.setText("Check All");
    jCheckBox2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jCheckBox2.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jCheckBox2MouseClicked(evt);
        }
    });

    javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
    jPanel6.setLayout(jPanel6Layout);
    jPanel6Layout.setHorizontalGroup(
        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel6Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jCheckBox2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
            .addComponent(jButton4)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jButton3)
            .addContainerGap())
        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
    );
    jPanel6Layout.setVerticalGroup(
        jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel6Layout.createSequentialGroup()
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton4)
                .addComponent(jButton3)
                .addComponent(jCheckBox2))
            .addContainerGap())
    );

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    jPanel3Layout.setVerticalGroup(
        jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel3Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addContainerGap())
    );

    resident.addTab("Transients & Reservations", jPanel3);

    jLabel2.setFont(new java.awt.Font("Rondalo", 3, 14)); // NOI18N
    jLabel2.setForeground(new java.awt.Color(0, 0, 205));
    jLabel2.setText("SENT BOX");
    jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jLabel2MouseClicked(evt);
        }
    });

    jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/help.png"))); // NOI18N
    jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jLabel3MouseClicked(evt);
        }
    });

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jLabel7)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel3)
                    .addGap(316, 316, 316)
                    .addComponent(jLabel4)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(date, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(day, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(time, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
        .addComponent(resident, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
        jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jPanel1Layout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(date)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(day))
                .addComponent(jLabel7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(time)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addComponent(dateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(resident, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(0, 0, Short.MAX_VALUE))
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        // TODO add your handling code here:
        dispose();
        new Main(client, user).setVisible(true);
    }//GEN-LAST:event_jLabel7MouseClicked

    private void sendTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendTextActionPerformed
        // TODO add your handling code here:
        sendNotif();
        if(!id.isEmpty()){
            new SendMultipleMessage(this,true,client,id,"resident").setVisible(true);
        } else {
            md.unsuccessful(this, "No Selected Row/s");
        }
    }//GEN-LAST:event_sendTextActionPerformed

    private void sendEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendEmailActionPerformed
        // TODO add your handling code here:
        sendNotif();
        if(!id.isEmpty()){
            new SendMultipleEmail(this,true,client,id,"resident").setVisible(true);
        } else {
            md.unsuccessful(this, "No Selected Row/s");
        }
    }//GEN-LAST:event_sendEmailActionPerformed

    private void checkAllMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkAllMouseClicked
        // TODO add your handling code here:
        ArrayList<LogsImpl> table = new ArrayList<>();
        for(int rows = 0; rows < model.getRowCount(); rows++){
            String ID = model.getValueAt(rows, 1).toString();
            String FULLNAME = model.getValueAt(rows, 2).toString();
            String DATE = model.getValueAt(rows, 3).toString();
            String TIMEOUT = model.getValueAt(rows, 4).toString();
            String TIMEIN = model.getValueAt(rows, 5).toString();
            String REMARK = model.getValueAt(rows, 6).toString();
            table.add(new LogsImpl(ID,FULLNAME,DATE,TIMEOUT,TIMEIN,REMARK));
        }
        model.getDataVector().removeAllElements();
        model.fireTableDataChanged();
        if(checkAll.isSelected()){
            status = true;
            for(LogsImpl logsImpl : table){
                model.addRow(new Object[]{
                    status,
                    logsImpl.getId(),
                    logsImpl.getFullName(),
                    logsImpl.getDate(),
                    logsImpl.getTimeOut(),
                    logsImpl.getTimeIn(),
                    logsImpl.getStatus()
                });
            }
        } else {
            status = false;
            for(LogsImpl logsImpl : table){
                model.addRow(new Object[]{
                    status,
                    logsImpl.getId(),
                    logsImpl.getFullName(),
                    logsImpl.getDate(),
                    logsImpl.getTimeOut(),
                    logsImpl.getTimeIn(),
                    logsImpl.getStatus()
                });
            }
        }
    }//GEN-LAST:event_checkAllMouseClicked

    private void notifsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_notifsMouseClicked
        // TODO add your handling code here:
        for(int row = 0; row < model.getRowCount(); row++){
            if((boolean) model.getValueAt(row, 0)){
                checkAll.setSelected(true);
                status = true;
            } else {
                checkAll.setSelected(false);
                status = false;
                break;
            }
        }
    }//GEN-LAST:event_notifsMouseClicked

    private void searchFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchFieldCaretUpdate
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            SimpleDateFormat sqlDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            logs = client.getAllResidentForNotifSearch(sqlDateFormat.format(dateChooser.getDateFormat().parse(dateChooser.getText())),searchField.getText());
            if(searchField.getText().equalsIgnoreCase("late") || searchField.getText().equalsIgnoreCase("on time") || searchField.getText().equalsIgnoreCase("transient")){
                logs = client.getAllResidentForNotifSearch(sqlDateFormat.format(dateChooser.getDateFormat().parse(dateChooser.getText())),"");
            }
            setNotifs();
        } catch (RemoteException | ParseException ex) {
//            Logger.getLogger(Notification.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }//GEN-LAST:event_searchFieldCaretUpdate

    private void dateChooserOnCommit(datechooser.events.CommitEvent evt) {//GEN-FIRST:event_dateChooserOnCommit
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            SimpleDateFormat sqlDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            logs = client.getAllResidentForNotifSearch(sqlDateFormat.format(dateChooser.getDateFormat().parse(dateChooser.getText())),searchField.getText());
            if(searchField.getText().equalsIgnoreCase("late") || searchField.getText().equalsIgnoreCase("on time") || searchField.getText().equalsIgnoreCase("transient")){
                logs = client.getAllResidentForNotifSearch(sqlDateFormat.format(dateChooser.getDateFormat().parse(dateChooser.getText())),"");
            }
            setNotifs();
        } catch (RemoteException | ParseException ex) {
            Logger.getLogger(Notification.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }//GEN-LAST:event_dateChooserOnCommit

    private void jCheckBox2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox2MouseClicked
        // TODO add your handling code here:
        ArrayList<ReservationImpl> reservationImpl = new ArrayList<>();
        for(int i = 0; i < model2.getRowCount(); i++){
            String FULLNAME = model2.getValueAt(i, 1).toString();
            int DAYSLEFT = (int) model2.getValueAt(i, 2);
            String REMARKS = model2.getValueAt(i, 3).toString();
            reservationImpl.add(new ReservationImpl(FULLNAME, DAYSLEFT,REMARKS));
        }
        boolean status1 = false;
        if(jCheckBox2.isSelected()){
            status1 = true;
        }
        model2.getDataVector().removeAllElements();
        model2.fireTableDataChanged();
        for(ReservationImpl r: reservationImpl){
            model2.addRow(new Object[]{
                status1,
                r.getFullName(),
                r.getDaysLeft(),
                r.getRemarks()
            });
        }
    }//GEN-LAST:event_jCheckBox2MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        sendNotifReservation();
        if(!id.isEmpty()){
            new SendMultipleMessage(this,true,client,id,"reservation").setVisible(true);
        } else {
            md.unsuccessful(this, "No Selected Row/s");
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        sendNotifReservation();
        if(!id.isEmpty()){
            new SendMultipleEmail(this,true,client,id,"reservation").setVisible(true);
        } else {
            md.unsuccessful(this, "No Selected Row/s");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void residentStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_residentStateChanged
        // TODO add your handling code here:
        if(resident.getSelectedIndex() == 0){
            dateChooser.setEnabled(true);
            searchField.setEnabled(true);
        } else {
            dateChooser.setEnabled(!true);
            searchField.setEnabled(!true);
        }
    }//GEN-LAST:event_residentStateChanged

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        new SentBox(client,user).setVisible(true);
        dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        sendNotifTransient();
        if(!id.isEmpty()){
            new SendMultipleEmail(this,true,client,id,"transient").setVisible(true);
        } else {
            md.unsuccessful(this, "No Selected Row/s");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        sendNotifTransient();
        if(!id.isEmpty()){
            new SendMultipleMessage(this,true,client,id,"transient").setVisible(true);
        } else {
            md.unsuccessful(this, "No Selected Row/s");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseClicked
        // TODO add your handling code here:
        ArrayList<TransientImpl> transientImpl = new ArrayList<>();
        for(int i = 0; i < model1.getRowCount(); i++){
            String FULLNAME = model1.getValueAt(i, 1).toString();
            int DAYSLEFT = (int) model1.getValueAt(i, 2);
            String REMARKS = model1.getValueAt(i, 3).toString();
            transientImpl.add(new TransientImpl(FULLNAME,null,null,null, DAYSLEFT+"",REMARKS));
        }
        boolean status1 = false;
        if(jCheckBox1.isSelected()){
            status1 = true;
        }
        model1.getDataVector().removeAllElements();
        model1.fireTableDataChanged();
        for(TransientImpl t: transientImpl){
            model1.addRow(new Object[]{
                status1,
                t.getFull_name(),
                Integer.parseInt(t.getTotalDays()),
                t.getStatus()
            });
        }
    }//GEN-LAST:event_jCheckBox1MouseClicked

    private void transientTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transientTableMouseClicked
        // TODO add your handling code here:
        for(int row = 0; row < model1.getRowCount(); row++){
            if((boolean) model1.getValueAt(row, 0)){
                jCheckBox1.setSelected(true);
            } else {
                jCheckBox1.setSelected(false);
                break;
            }
        }
    }//GEN-LAST:event_transientTableMouseClicked

    private void reservationTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_reservationTableMouseClicked
        // TODO add your handling code here:
        for(int row = 0; row < model2.getRowCount(); row++){
            if((boolean) model2.getValueAt(row, 0)){
                jCheckBox2.setSelected(true);
            } else {
                jCheckBox2.setSelected(false);
                break;
            }
        }
    }//GEN-LAST:event_reservationTableMouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        try {
            String path = "";
            BufferedReader br = new BufferedReader(new FileReader("dir\\docs.txt"));
            try {
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                }
                path = sb.toString().trim();
            } catch (IOException ex) {
//                Logger.getLogger(AdminArchiveFrame.class.getName()).log(Level.SEVERE, null, ex);
                new MessageDialog().error(this, ex.getMessage());
            } finally {
                br.close();
            }
            Desktop.getDesktop().browse(new File(path).toURI());
        } catch (IOException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Notification.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel3MouseClicked

    public void sendNotif(){
        id = new ArrayList<>();
        if(model.getRowCount() >= 1 && (notifs.getSelectedRowCount() >= 1 || checkAll.isSelected())){
            for(int row = 0; row < model.getRowCount(); row++){
                if (model.getValueAt(row, 0) != null){
                    if((boolean) model.getValueAt(row, 0)){
                        id.add(new LogsImpl(model.getValueAt(row, 1).toString(),model.getValueAt(row, 2).toString()));
                    }
                }
            }
        }
    }
    
    public void sendNotifReservation(){
        id = new ArrayList<>();
        if(model2.getRowCount() >= 1 && (reservationTable.getSelectedRowCount() >= 1 || jCheckBox2.isSelected())){
            for(int row = 0; row < model2.getRowCount(); row++){
                if (model2.getValueAt(row, 0) != null){
                    if((boolean) model2.getValueAt(row, 0)){
                        id.add(new LogsImpl(model2.getValueAt(row, 1).toString(),model2.getValueAt(row, 1).toString()));
                    }
                }
            }
        }
    }
    
    public void sendNotifTransient(){
        id = new ArrayList<>();
        if(model1.getRowCount() >= 1 && (transientTable.getSelectedRowCount() >= 1 || jCheckBox1.isSelected())){
            for(int row = 0; row < model1.getRowCount(); row++){
                if (model1.getValueAt(row, 0) != null){
                    if((boolean) model1.getValueAt(row, 0)){
                        id.add(new LogsImpl(model1.getValueAt(row, 1).toString(),model1.getValueAt(row, 1).toString()));
                    }
                }
            }
        }
    }
    
    public void setNotifs(){
        try {
            model.getDataVector().removeAllElements();
            model.fireTableDataChanged();
            String remarks = "On Time";
            SimpleDateFormat oldFormat;
            SimpleDateFormat newFormat;
            Date timeInDate = null;
            Date timeOutDate = null;
            for(LogsImpl l : logs){
                boolean enter = true;
                oldFormat = new SimpleDateFormat("HH:mm:ss");
                newFormat = new SimpleDateFormat("hh:mm a");
                String timeOut = "";
                String timeIn = "";
                if(!l.getTimeOut().equals("")){
                    timeOut = newFormat.format(oldFormat.parse(l.getTimeOut()));
                    timeOutDate = newFormat.parse(timeOut);
                }
                if(!l.getTimeIn().equals("")){
                    timeIn = newFormat.format(oldFormat.parse(l.getTimeIn()));
                    timeInDate = newFormat.parse(timeIn);
                }
//                if(timeInDate != null && timeOutDate != null){
//                    if(timeIn.equals("") || timeOutDate.after(timeInDate)){
//                        remarks = "Late";
//                    }
//                }
                if(timeInDate == null){
                    remarks = "Late";
                } else if(timeInDate.after(oldFormat.parse(client.getAccounts().getCurfew()))){
                    remarks = "Late";
                } else if(timeIn.equals("")){
                    remarks = "Late";
                } else if(!timeOut.equals("")){
                    if(timeOutDate.after(oldFormat.parse(client.getAccounts().getCurfew()))){
                        remarks = "Late";
                    }
                }
                
                if(searchField.getText().equalsIgnoreCase("late")){
                    if(!remarks.equals("Late")){
                        enter = false;
                    }
                } else if(searchField.getText().equalsIgnoreCase("on time")){
                    if(!remarks.equals("On Time")){
                        enter = false;
                    }
                } else if(searchField.getText().equalsIgnoreCase("transient")){
                    if(!remarks.equals("Transient")){
                        enter = false;
                    }
                }
                if(enter){
                    model.addRow(new Object[]{
                        status,
                        l.getId(),
                        l.getFullName(),
                        yesterdaysDate,
                        timeOut,
                        timeIn,
                        remarks
                    });
                }
                remarks = "On Time";
            }
        } catch (ParseException | RemoteException ex) {
//            Logger.getLogger(Notification.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }
    
    private void setReservations(){
        try {
            model2 = (DefaultTableModel) reservationTable.getModel();
            model2.getDataVector().removeAllElements();
            model2.fireTableDataChanged();
            ArrayList<ReservationImpl> reservationImpl = client.getAllReservation();
            for(ReservationImpl r : reservationImpl){
                Date startDate = new Date(r.getDatePaid());
                long duration = Calendar.getInstance().getTime().getTime() - startDate.getTime();
                long hours = TimeUnit.MILLISECONDS.toHours(duration);
                int days = (int) (hours / 24);
                if (days <= 0) {
                    days = 1;
                }
                String remarks = "Pending";
                if((14-days) == 7 || (14-days) == 3){
                    remarks = "Notify";
                } else if((14-days) <= 0){
                    remarks = "End";
                }
                model2.addRow(new Object[]{
                    false,
                    r.getFullName(),
                    14-days,
                    remarks
                });
            }
        } catch (RemoteException ex) {
//            Logger.getLogger(Notification.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }
    
    private void setTransients(){
        try {
            model1 = (DefaultTableModel) transientTable.getModel();
            model1.getDataVector().removeAllElements();
            model1.fireTableDataChanged();
            for(TransientImpl trans : client.getAllTransient()){
                Date endDate = new Date(new SimpleDateFormat("MMMM dd, yyyy").format(new SimpleDateFormat("yyyy-MM-dd").parse(trans.getDeparture())));
                long duration = endDate.getTime() - Calendar.getInstance().getTime().getTime();
                long hours = TimeUnit.MILLISECONDS.toHours(duration);
                int days = (int) (hours/24);
                String remarks = trans.getStatus();
                if(days == 0){
                    remarks = "Due Date";
                }
                model1.addRow(new Object[]{
                    false,
                    trans.getFull_name(),
                    days,
                    remarks
                });
            }
        } catch (RemoteException | ParseException ex) {
//            Logger.getLogger(Notification.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Notification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Notification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Notification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Notification.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Notification().setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkAll;
    private javax.swing.JLabel date;
    private datechooser.beans.DateChooserCombo dateChooser;
    private javax.swing.JLabel day;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable notifs;
    private javax.swing.JTable reservationTable;
    private javax.swing.JTabbedPane resident;
    private javax.swing.JTextField searchField;
    private javax.swing.JButton sendEmail;
    private javax.swing.JButton sendText;
    private javax.swing.JLabel time;
    private javax.swing.JTable transientTable;
    // End of variables declaration//GEN-END:variables
}
