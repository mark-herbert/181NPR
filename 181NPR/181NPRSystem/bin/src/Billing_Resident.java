import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.rmi.RemoteException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.CaretEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Mark Herbert Cabuang
 */
public class Billing_Resident extends javax.swing.JFrame {

    /**
     * Creates new form Billing_Resident
     */    
    public javax.swing.JTextField searchFieldUpdater = new javax.swing.JTextField();
    private DefaultTableModel tableModel = new DefaultTableModel();
    private ArrayList<BillingImpl> BillingResident;
    private final NPRInterface client;
    private String idNum = "";
    private String name = "";
    private String status = "";
    private String resident = "";
    private int row = 0;
    private String user;
    private DecimalFormat df = new DecimalFormat("#,##0.00");

    public Billing_Resident(NPRInterface client, String user) {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons/Billing.png")));
        initComponents();
        searchFieldUpdater.addCaretListener(new javax.swing.event.CaretListener() {

            @Override
            public void caretUpdate(CaretEvent ce) {
                searchField.setText(searchFieldUpdater.getText().trim());
            }
        });
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        residentTable.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        this.addKeyListener(listener);
        this.setFocusable(true);
        this.client = client;
        this.user = user;
        setRow();
        sort();
    }

    private void sort() {
        tableModel = (DefaultTableModel) residentTable.getModel();
        residentTable.setRowSorter(new TableRowSorter(tableModel));
        int[] selection = residentTable.getSelectedRows();
        for (int i = 0; i < selection.length; i++) {
            selection[i] = residentTable.convertRowIndexToModel(selection[i]);
        }
    }

    private void setRow() {
        try {
            tableModel = (DefaultTableModel) residentTable.getModel();
            tableModel.getDataVector().removeAllElements();
            tableModel.fireTableDataChanged();
            BillingResident = client.getAllResidentBilling();
            for (BillingImpl info : BillingResident) {
                tableModel.addRow(new Object[]{
                    info.getFull_name(),
                    info.getRegistrationDate(),
                    df.format(Double.parseDouble(info.getBalance())),
                    info.getDatePaid()
                });
            }
            residentTable.setModel(tableModel);
        } catch (RemoteException ex) {
//            Logger.getLogger(Transient_Form.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }
    /*
  
     /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popMenu = new javax.swing.JPopupMenu();
        statementOfAccounts = new javax.swing.JMenuItem();
        monthlyBill = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        filter = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        residentTable = new javax.swing.JTable();
        home = new javax.swing.JLabel();

        statementOfAccounts.setText("Statement of Accounts");
        statementOfAccounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statementOfAccountsActionPerformed(evt);
            }
        });
        popMenu.add(statementOfAccounts);

        monthlyBill.setText("Payment Remittance");
        monthlyBill.setToolTipText("");
        monthlyBill.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                monthlyBillActionPerformed(evt);
            }
        });
        popMenu.add(monthlyBill);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jPanel1KeyPressed(evt);
            }
        });

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/monitoringsystem/181.jpg"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        jLabel1.setText("Filter by:");

        searchField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        searchField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchFieldCaretUpdate(evt);
            }
        });

        filter.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        filter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Resident", "Paid", "Unpaid" }));
        filter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterItemStateChanged(evt);
            }
        });

        residentTable.setAutoCreateRowSorter(true);
        residentTable.setFont(new java.awt.Font("Rondalo", 0, 11)); // NOI18N
        residentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Resident", "Registration date", "Balance", "Last Date Paid"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        residentTable.getTableHeader().setReorderingAllowed(false);
        residentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                residentTableMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(residentTable);
        if (residentTable.getColumnModel().getColumnCount() > 0) {
            residentTable.getColumnModel().getColumn(0).setPreferredWidth(175);
            residentTable.getColumnModel().getColumn(0).setHeaderValue("Resident");
            residentTable.getColumnModel().getColumn(1).setHeaderValue("Registration date");
            residentTable.getColumnModel().getColumn(2).setHeaderValue("Balance");
            residentTable.getColumnModel().getColumn(3).setHeaderValue("Last Date Paid");
        }

        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Back.png"))); // NOI18N
        home.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(4, 4, 4)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                                .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(home)))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(346, 346, 346))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 650, 530));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void filterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterItemStateChanged
        // TODO add your handling code here:
        try {
            String str = filter.getSelectedItem().toString();

            switch (str) {
                case "Paid":
                    tableModel = (DefaultTableModel) residentTable.getModel();
                    tableModel.getDataVector().removeAllElements();
                    tableModel.fireTableDataChanged();
                    BillingResident = client.getAllResidentBillingByStatus("Paid");
                    for (BillingImpl info : BillingResident) {
                        tableModel.addRow(new Object[]{
                            info.getFull_name(),
                            info.getRegistrationDate(),
                            df.format(Double.parseDouble(info.getBalance().trim())),
                            info.getDatePaid()
                        });
                    }
                    break;

                case "Unpaid":
                    tableModel = (DefaultTableModel) residentTable.getModel();
                    tableModel.getDataVector().removeAllElements();
                    tableModel.fireTableDataChanged();
                    BillingResident = client.getAllResidentBillingByStatus("Unpaid");
                    for (BillingImpl info : BillingResident) {
                        tableModel.addRow(new Object[]{
                            info.getFull_name(),
                            info.getRegistrationDate(),
                            df.format(Double.parseDouble(info.getBalance().trim())),
                            info.getDatePaid()
                        });
                    }
                    break;
                default:
                    setRow();
            }
            sort();
            searchField.setText(searchField.getText());
        } catch (RemoteException ex) {
//            Logger.getLogger(Transient_Form.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }//GEN-LAST:event_filterItemStateChanged

    private void jPanel1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPanel1KeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1KeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formKeyPressed

    private void searchFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchFieldCaretUpdate
        try {
            if (searchField.getText().length() > 0) {
                String str = filter.getSelectedItem().toString();
                switch (str) {
                    case "Paid":
                        tableModel = (DefaultTableModel) residentTable.getModel();
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        BillingResident = client.getAllResidentBillingByName("Paid", searchField.getText());
                        for (BillingImpl info : BillingResident) {
                            tableModel.addRow(new Object[]{
                                info.getFull_name(),
                                info.getRegistrationDate(),
                                df.format(Double.parseDouble(info.getBalance().trim())),
                                info.getDatePaid()
                            });
                        }
                        break;
                    case "Unpaid":
                        tableModel = (DefaultTableModel) residentTable.getModel();
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        BillingResident = client.getAllResidentBillingByName("Unpaid", searchField.getText());
                        for (BillingImpl info : BillingResident) {
                            tableModel.addRow(new Object[]{
                                info.getFull_name(),
                                info.getRegistrationDate(),
                                df.format(Double.parseDouble(info.getBalance().trim())),
                                info.getDatePaid()
                            });
                        }
                        break;
                    default:
                        tableModel = (DefaultTableModel) residentTable.getModel();
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        BillingResident = client.getAllResidentBillingByName("", searchField.getText());
                        for (BillingImpl info : BillingResident) {
                            tableModel.addRow(new Object[]{
                                info.getFull_name(),
                                info.getRegistrationDate(),
                                df.format(Double.parseDouble(info.getBalance().trim())),
                                info.getDatePaid()
                            });
                        }
                        break;
                }
            } else {
                String str = filter.getSelectedItem().toString();

                switch (str) {
                    case "Paid":
                        tableModel = (DefaultTableModel) residentTable.getModel();
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        BillingResident = client.getAllResidentBillingByStatus("Paid");
                        for (BillingImpl info : BillingResident) {
                            tableModel.addRow(new Object[]{
                                info.getFull_name(),
                                info.getRegistrationDate(),
                                df.format(Double.parseDouble(info.getBalance().trim())),
                                info.getDatePaid()
                            });
                        }
                        break;

                    case "Unpaid":
                        tableModel = (DefaultTableModel) residentTable.getModel();
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        BillingResident = client.getAllResidentBillingByStatus("Unpaid");
                        for (BillingImpl info : BillingResident) {
                            tableModel.addRow(new Object[]{
                                info.getFull_name(),
                                info.getRegistrationDate(),
                                df.format(Double.parseDouble(info.getBalance().trim())),
                                info.getDatePaid()
                            });
                        }

                        break;
                    default:
                        setRow();
                        break;
                }
            }
        } catch (RemoteException ex) {
//            Logger.getLogger(Transient_Form.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }//GEN-LAST:event_searchFieldCaretUpdate

    private void homeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMouseClicked
        this.dispose();
        new Main(client, user).setVisible(true);
    }//GEN-LAST:event_homeMouseClicked

    private void monthlyBillActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_monthlyBillActionPerformed
        try {
            String selectedName = residentTable.getValueAt(residentTable.getSelectedRow(), 0).toString();
            String lastDatePaid = residentTable.getValueAt(residentTable.getSelectedRow(), 3).toString();
            new Billing(client, client.getResidentId(selectedName), lastDatePaid, user).setVisible(true);
        } catch (RemoteException ex) {
//            Logger.getLogger(Reservation.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        this.dispose();
    }//GEN-LAST:event_monthlyBillActionPerformed

    private void residentTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_residentTableMouseReleased

        try {
            if (residentTable.getSelectedRowCount() == 1) {
                if (evt.isPopupTrigger()) {
                    status = residentTable.getValueAt(residentTable.getSelectedRow(), 1).toString();
                    javax.swing.JTable source = (javax.swing.JTable) evt.getSource();
                    row = source.rowAtPoint(evt.getPoint());
                    int column = source.columnAtPoint(evt.getPoint());
                    if (!source.isRowSelected(row)) {
                        source.changeSelection(row, column, false, false);
                    }
                    popMenu.show(evt.getComponent(), evt.getX(), evt.getY());
                    if (client.residentHasPreviousStatement(client.getResidentId(residentTable.getValueAt(residentTable.getSelectedRow(), 0).toString()))) {
                        monthlyBill.setEnabled(true);
                    } else {
                        monthlyBill.setEnabled(false);
                    }
                }
            }
        } catch (RemoteException ex) {
//            Logger.getLogger(Billing_Resident.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }//GEN-LAST:event_residentTableMouseReleased

    private void statementOfAccountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statementOfAccountsActionPerformed
        try {
            String residentId = client.getResidentId(residentTable.getValueAt(residentTable.getSelectedRow(), 0).toString());
            String lastDatePaid = residentTable.getValueAt(residentTable.getSelectedRow(), 3).toString();
            new Billing_v2(client, residentId, client.getDatein(residentId, lastDatePaid), user).setVisible(true);
        } catch (RemoteException ex) {
//            Logger.getLogger(Reservation.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        this.dispose();
    }//GEN-LAST:event_statementOfAccountsActionPerformed
    KeyListener listener = new KeyListener() {

        @Override
        public void keyTyped(KeyEvent ke) {
            if (ke.getKeyCode() == KeyEvent.VK_ESCAPE) {
                if (JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Confirmation",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    // yes option
                    JOptionPane.showMessageDialog(null, "Success!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            }
//    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }

        ;

        @Override
        public void keyPressed(KeyEvent ke) {
            //throw new UnsupportedOperationException("Not supported yet.");
            //To change body of generated methods, choose Tools | Templates.
            if (ke.getKeyCode() == KeyEvent.VK_ESCAPE) {
                if (JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Confirmation",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    // yes option
                    JOptionPane.showMessageDialog(null, "Success!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }

        ;

        @Override
        public void keyReleased(KeyEvent ke) {
            if (ke.getKeyCode() == KeyEvent.VK_ESCAPE) {
                if (JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?", "Confirmation",
                        JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    // yes option
                    JOptionPane.showMessageDialog(null, "Success!", "Success", JOptionPane.INFORMATION_MESSAGE);
                }
            }
//    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        }
    ;

    };
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Billing_Resident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Billing_Resident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Billing_Resident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Billing_Resident.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Billing_Resident(null).setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox filter;
    private javax.swing.JLabel home;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem monthlyBill;
    private javax.swing.JPopupMenu popMenu;
    private javax.swing.JTable residentTable;
    private javax.swing.JTextField searchField;
    private javax.swing.JMenuItem statementOfAccounts;
    // End of variables declaration//GEN-END:variables
}
