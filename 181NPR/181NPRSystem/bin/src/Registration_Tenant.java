/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
import datechooser.model.exeptions.IncompatibleDataExeption;
import datechooser.model.multiple.Period;
import datechooser.model.multiple.PeriodSet;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.rmi.RemoteException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Mark Herbert Cabuang
 */
public class Registration_Tenant extends javax.swing.JFrame {
    private String file = null;
    private String roomType = "";
    private String roomNo = "";
    private String id = "";
    private final NPRInterface client;
    private ArrayList<String> registrationDetails;
    private RegistrationImpl info = new RegistrationImpl();
    private boolean status = false;
    private String user;
    private final MessageDialog md = new MessageDialog();
    private InventoryForm iForm = new InventoryForm();
    private String roomNumber = "200";
    private IFloorPlanPreview ifpp = new IFloorPlanPreview();
    private boolean counter = false;
    private Date lastDate = null;

    /**
     * Creates new form Registration
     *
     * @param client
     */
    public Registration_Tenant(NPRInterface client, String user) {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons/Registration.png")));
        initComponents();
        this.client = client;
        this.user = user;
    }

    public Registration_Tenant(NPRInterface client, String reservationId, String user) {
        id = reservationId;
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons/Registration.png")));
        initComponents();
        this.client = client;
        this.user = user;
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        try {
            lastDate = birthDateChooser.getDateFormat().parse(birthDateChooser.getText());
            info = client.getReservationInfo(reservationId.trim());
            lastNameTextField.setText(info.getLast_name());
            firstNameTextField.setText(info.getFirst_name());
            middleNameTextField.setText(info.getMiddle_name());

            homeAddressTextArea.setText(info.getAddress());
            MobileNumber1.setText(info.getMobile_number());
            email.setText(info.getEmail());
            roomNumberTextField.setText(info.getRoom_number());
            roomNo = info.getRoom_number();
            roomNumber = info.getRoom_number();
            switch (info.getRoom_type()) {
                case "S":
                    roomTypeTextField.setText("Single Room");
                    roomType = "Single Room";
                    break;

                case "D":
                    roomTypeTextField.setText("Double-Sharing Room");
                    roomType = "Double-Sharing Room";
                    break;

                case "T":
                    roomTypeTextField.setText("Triple-Sharing Room");
                    roomType = "Triple-Sharing Room";
                    break;
            }
        } catch (RemoteException | ParseException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Registration_Tenant.class.getName()).log(Level.SEVERE, null, ex);
        }
        saveButton.setEnabled(false);
        clearButton1.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gender = new javax.swing.ButtonGroup();
        occupation = new javax.swing.ButtonGroup();
        chooser = new javax.swing.JFileChooser();
        mainPanel = new javax.swing.JPanel();
        basicInfoPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        lastNameTextField = new javax.swing.JTextField();
        firstNameTextField = new javax.swing.JTextField();
        middleNameLabel = new javax.swing.JLabel();
        collegeLabel = new javax.swing.JLabel();
        collegeTextField = new javax.swing.JTextField();
        departmentTextField = new javax.swing.JTextField();
        departmentLabel = new javax.swing.JLabel();
        courseLabel = new javax.swing.JLabel();
        courseTextField = new javax.swing.JTextField();
        yearLabel = new javax.swing.JLabel();
        yearTextField = new javax.swing.JTextField();
        genderLabel = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        homeAddressTextArea = new javax.swing.JTextArea();
        uploadPictureButton = new javax.swing.JButton();
        pictureFileNameLabel = new javax.swing.JLabel();
        homeAddressLabel = new javax.swing.JLabel();
        birthDateLabel = new javax.swing.JLabel();
        birthDateChooser = new datechooser.beans.DateChooserCombo();
        middleNameTextField = new javax.swing.JTextField();
        male = new javax.swing.JRadioButton();
        female = new javax.swing.JRadioButton();
        lastNameLabel = new javax.swing.JLabel();
        firstNameLabel = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        othersPanel = new javax.swing.JPanel();
        roomNumberLabel = new javax.swing.JLabel();
        roomTypeLabel = new javax.swing.JLabel();
        applianceAndInventoryFormButton = new javax.swing.JButton();
        roomTypeTextField = new javax.swing.JTextField();
        roomNumberTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        contactDetailsPanel = new javax.swing.JPanel();
        jLabel135 = new javax.swing.JLabel();
        mobileNumberLabel = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        email = new javax.swing.JTextField();
        jSeparator16 = new javax.swing.JSeparator();
        fatherNameTextField = new javax.swing.JTextField();
        flandlineLabel = new javax.swing.JLabel();
        fACodeTextField = new javax.swing.JTextField();
        fphoneNumberTextField = new javax.swing.JTextField();
        fPhoneNumberLabel = new javax.swing.JLabel();
        fareaCodeLabel = new javax.swing.JLabel();
        fatherNameLabel = new javax.swing.JLabel();
        fMobileNumberLabel = new javax.swing.JLabel();
        fMobileNumberTextField = new javax.swing.JTextField();
        fEmailTextField = new javax.swing.JTextField();
        fEmailLabel = new javax.swing.JLabel();
        jSeparator17 = new javax.swing.JSeparator();
        motherNameLabel = new javax.swing.JLabel();
        motherNameTextField = new javax.swing.JTextField();
        mACodeTextField = new javax.swing.JTextField();
        mphoneNumberTextField = new javax.swing.JTextField();
        mphoneNumberLabel = new javax.swing.JLabel();
        mareaCodeLabel = new javax.swing.JLabel();
        mlandlineLabel = new javax.swing.JLabel();
        mMobileNumberTextField = new javax.swing.JTextField();
        mEmailLabel = new javax.swing.JLabel();
        mMobileNumberLabel = new javax.swing.JLabel();
        jSeparator18 = new javax.swing.JSeparator();
        emergencyContactLabel = new javax.swing.JLabel();
        guardianNameLabel = new javax.swing.JLabel();
        guardianNameTextField = new javax.swing.JTextField();
        relationToGuardianLabel = new javax.swing.JLabel();
        gContactNumbersLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        guardianAddress = new javax.swing.JTextArea();
        MobileNumber1 = new javax.swing.JTextField();
        MobileNumber2 = new javax.swing.JTextField();
        mEmailTextField = new javax.swing.JTextField();
        relationToGuardian = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        gContactNumber1 = new javax.swing.JTextField();
        clearButton1 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();

        chooser.setControlButtonsAreShown(false);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Registration");
        setUndecorated(true);
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        mainPanel.setMaximumSize(new java.awt.Dimension(1188, 513));
        mainPanel.setMinimumSize(new java.awt.Dimension(1188, 513));

        basicInfoPanel.setBackground(new java.awt.Color(255, 255, 255));
        basicInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Basic Information", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Rondalo", 0, 12))); // NOI18N

        nameLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        nameLabel.setText("Name:");

        lastNameTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        lastNameTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                lastNameTextFieldCaretUpdate(evt);
            }
        });

        firstNameTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        firstNameTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                firstNameTextFieldCaretUpdate(evt);
            }
        });

        middleNameLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        middleNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        middleNameLabel.setText("Middle Name");

        collegeLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        collegeLabel.setText("College/University Attending:");

        collegeTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        collegeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                collegeTextFieldKeyTyped(evt);
            }
        });

        departmentTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        departmentTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                departmentTextFieldKeyTyped(evt);
            }
        });

        departmentLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        departmentLabel.setText("School/Department:");

        courseLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        courseLabel.setText("Course:");

        courseTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        courseTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                courseTextFieldKeyTyped(evt);
            }
        });

        yearLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        yearLabel.setText("Year:");

        yearTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        yearTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                yearTextFieldKeyTyped(evt);
            }
        });

        genderLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        genderLabel.setText("Gender:");

        homeAddressTextArea.setColumns(20);
        homeAddressTextArea.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        homeAddressTextArea.setLineWrap(true);
        homeAddressTextArea.setRows(5);
        homeAddressTextArea.setWrapStyleWord(true);
        homeAddressTextArea.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                homeAddressTextAreaCaretUpdate(evt);
            }
        });
        jScrollPane6.setViewportView(homeAddressTextArea);

        uploadPictureButton.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        uploadPictureButton.setText("Upload Picture");
        uploadPictureButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        uploadPictureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadPictureButtonActionPerformed(evt);
            }
        });

        pictureFileNameLabel.setFont(new java.awt.Font("Rondalo", 2, 12)); // NOI18N
        pictureFileNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        pictureFileNameLabel.setText("picture.jpg");

        homeAddressLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        homeAddressLabel.setText("Home Address:");

        birthDateLabel.setText("Birth date:");

        birthDateChooser.setCurrentView(new datechooser.view.appearance.AppearancesList("Light",
            new datechooser.view.appearance.ViewAppearance("custom",
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    true,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 255),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(128, 128, 128),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(0, 0, 255),
                    false,
                    true,
                    new datechooser.view.appearance.swing.LabelPainter()),
                new datechooser.view.appearance.swing.SwingCellAppearance(new java.awt.Font("Tahoma", java.awt.Font.PLAIN, 11),
                    new java.awt.Color(0, 0, 0),
                    new java.awt.Color(255, 0, 0),
                    false,
                    false,
                    new datechooser.view.appearance.swing.ButtonPainter()),
                (datechooser.view.BackRenderer)null,
                false,
                true)));
    birthDateChooser.setCalendarBackground(new java.awt.Color(255, 255, 255));
    birthDateChooser.setNothingAllowed(false);
    birthDateChooser.setFormat(1);
    try {
        birthDateChooser.setDefaultPeriods(new datechooser.model.multiple.PeriodSet(new datechooser.model.multiple.Period(new java.util.GregorianCalendar(1995, 0, 1),
            new java.util.GregorianCalendar(1995, 0, 1))));
} catch (datechooser.model.exeptions.IncompatibleDataExeption e1) {
    e1.printStackTrace();
    }
    birthDateChooser.setBehavior(datechooser.model.multiple.MultyModelBehavior.SELECT_SINGLE);
    birthDateChooser.addCommitListener(new datechooser.events.CommitListener() {
        public void onCommit(datechooser.events.CommitEvent evt) {
            birthDateChooserOnCommit(evt);
        }
    });

    middleNameTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N

    male.setBackground(new java.awt.Color(255, 255, 255));
    gender.add(male);
    male.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    male.setText("Male");
    male.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    male.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            maleMouseClicked(evt);
        }
    });
    male.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            maleActionPerformed(evt);
        }
    });

    female.setBackground(new java.awt.Color(255, 255, 255));
    gender.add(female);
    female.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    female.setText("Female");
    female.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    female.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            femaleMouseClicked(evt);
        }
    });
    female.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            femaleActionPerformed(evt);
        }
    });

    lastNameLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    lastNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    lastNameLabel.setText("Last Name");

    firstNameLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    firstNameLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    firstNameLabel.setText("First Name");

    jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel19.setForeground(new java.awt.Color(255, 0, 0));
    jLabel19.setText("*");

    jLabel20.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel20.setForeground(new java.awt.Color(255, 0, 0));
    jLabel20.setText("*");

    jLabel21.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel21.setForeground(new java.awt.Color(255, 0, 0));
    jLabel21.setText("*");

    jLabel25.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel25.setForeground(new java.awt.Color(255, 0, 0));
    jLabel25.setText("*");

    javax.swing.GroupLayout basicInfoPanelLayout = new javax.swing.GroupLayout(basicInfoPanel);
    basicInfoPanel.setLayout(basicInfoPanelLayout);
    basicInfoPanelLayout.setHorizontalGroup(
        basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, basicInfoPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(jScrollPane6)
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, basicInfoPanelLayout.createSequentialGroup()
                    .addComponent(collegeLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(collegeTextField))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, basicInfoPanelLayout.createSequentialGroup()
                    .addGap(45, 45, 45)
                    .addComponent(departmentLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(departmentTextField))
                .addGroup(basicInfoPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(pictureFileNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(uploadPictureButton))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, basicInfoPanelLayout.createSequentialGroup()
                    .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(basicInfoPanelLayout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addComponent(nameLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, basicInfoPanelLayout.createSequentialGroup()
                            .addComponent(jLabel19)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lastNameLabel)
                            .addGap(56, 56, 56)))
                    .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(basicInfoPanelLayout.createSequentialGroup()
                            .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, basicInfoPanelLayout.createSequentialGroup()
                            .addComponent(jLabel20)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(firstNameLabel)
                            .addGap(72, 72, 72)))
                    .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(middleNameTextField)
                        .addComponent(middleNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(basicInfoPanelLayout.createSequentialGroup()
                    .addComponent(courseLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(courseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(yearLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(yearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(birthDateLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(birthDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jLabel21)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(genderLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(male)
                    .addGap(12, 12, 12)
                    .addComponent(female, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, basicInfoPanelLayout.createSequentialGroup()
                    .addComponent(jLabel25)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(homeAddressLabel)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addContainerGap())
    );
    basicInfoPanelLayout.setVerticalGroup(
        basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(basicInfoPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(nameLabel)
                .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(middleNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(middleNameLabel)
                .addComponent(lastNameLabel)
                .addComponent(firstNameLabel)
                .addComponent(jLabel19)
                .addComponent(jLabel20))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(collegeLabel)
                .addComponent(collegeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(departmentLabel)
                .addComponent(departmentTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(genderLabel)
                    .addComponent(male)
                    .addComponent(female)
                    .addComponent(jLabel21))
                .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(birthDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(courseLabel)
                        .addComponent(courseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(yearLabel)
                        .addComponent(yearTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(birthDateLabel))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(homeAddressLabel)
                .addComponent(jLabel25))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(basicInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(uploadPictureButton)
                .addComponent(pictureFileNameLabel))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    othersPanel.setBackground(new java.awt.Color(255, 255, 255));
    othersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Others", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Rondalo", 0, 12))); // NOI18N

    roomNumberLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    roomNumberLabel.setText("Room Number:");

    roomTypeLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    roomTypeLabel.setText("Room Type:");

    applianceAndInventoryFormButton.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    applianceAndInventoryFormButton.setText("Inventory Form");
    applianceAndInventoryFormButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    applianceAndInventoryFormButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            applianceAndInventoryFormButtonActionPerformed(evt);
        }
    });

    roomTypeTextField.setEditable(false);
    roomTypeTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    roomTypeTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

    roomNumberTextField.setEditable(false);
    roomNumberTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    roomNumberTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    roomNumberTextField.addCaretListener(new javax.swing.event.CaretListener() {
        public void caretUpdate(javax.swing.event.CaretEvent evt) {
            roomNumberTextFieldCaretUpdate(evt);
        }
    });

    jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Floor Plan.png"))); // NOI18N
    jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jLabel2MouseClicked(evt);
        }
    });

    javax.swing.GroupLayout othersPanelLayout = new javax.swing.GroupLayout(othersPanel);
    othersPanel.setLayout(othersPanelLayout);
    othersPanelLayout.setHorizontalGroup(
        othersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(othersPanelLayout.createSequentialGroup()
            .addGap(10, 10, 10)
            .addComponent(jLabel2)
            .addGap(66, 66, 66)
            .addGroup(othersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(roomNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(roomTypeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(9, 9, 9)
            .addGroup(othersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(roomNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(roomTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(applianceAndInventoryFormButton, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(83, 83, 83))
    );
    othersPanelLayout.setVerticalGroup(
        othersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(othersPanelLayout.createSequentialGroup()
            .addGroup(othersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel2)
                .addGroup(othersPanelLayout.createSequentialGroup()
                    .addGap(27, 27, 27)
                    .addGroup(othersPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(othersPanelLayout.createSequentialGroup()
                            .addComponent(roomNumberLabel)
                            .addGap(15, 15, 15)
                            .addComponent(roomTypeLabel))
                        .addGroup(othersPanelLayout.createSequentialGroup()
                            .addComponent(roomNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(9, 9, 9)
                            .addComponent(roomTypeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(9, 9, 9)
                            .addComponent(applianceAndInventoryFormButton)))))
            .addGap(8, 8, 8))
    );

    saveButton.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    saveButton.setText("Save");
    saveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    saveButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            saveButtonActionPerformed(evt);
        }
    });

    cancelButton.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    cancelButton.setText("Back");
    cancelButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelButtonActionPerformed(evt);
        }
    });

    contactDetailsPanel.setBackground(new java.awt.Color(255, 255, 255));
    contactDetailsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Contact Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Rondalo", 0, 12))); // NOI18N

    jLabel135.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel135.setText("/");

    mobileNumberLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    mobileNumberLabel.setText("Mobile Number:");

    emailLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    emailLabel.setText("Email:");

    email.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N

    fatherNameTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    fatherNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            fatherNameTextFieldKeyTyped(evt);
        }
    });

    flandlineLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    flandlineLabel.setText("Landline:");

    fACodeTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    fACodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            fACodeTextFieldKeyTyped(evt);
        }
    });

    fphoneNumberTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    fphoneNumberTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            fphoneNumberTextFieldKeyTyped(evt);
        }
    });

    fPhoneNumberLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    fPhoneNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    fPhoneNumberLabel.setText("Phone No.");

    fareaCodeLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    fareaCodeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    fareaCodeLabel.setText("Area Code");

    fatherNameLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    fatherNameLabel.setText("Father's Name:");

    fMobileNumberLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    fMobileNumberLabel.setText("Mobile Number:");

    fMobileNumberTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    fMobileNumberTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            fMobileNumberTextFieldKeyTyped(evt);
        }
    });

    fEmailTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    fEmailTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            fEmailTextFieldKeyTyped(evt);
        }
    });

    fEmailLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    fEmailLabel.setText("Email:");

    motherNameLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    motherNameLabel.setText("Mother's Name:");

    motherNameTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    motherNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            motherNameTextFieldKeyTyped(evt);
        }
    });

    mACodeTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    mACodeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            mACodeTextFieldKeyTyped(evt);
        }
    });

    mphoneNumberTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    mphoneNumberTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            mphoneNumberTextFieldKeyTyped(evt);
        }
    });

    mphoneNumberLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    mphoneNumberLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    mphoneNumberLabel.setText("Phone No.");

    mareaCodeLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    mareaCodeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    mareaCodeLabel.setText("Area Code");

    mlandlineLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    mlandlineLabel.setText("Landline:");

    mMobileNumberTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    mMobileNumberTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            mMobileNumberTextFieldKeyTyped(evt);
        }
    });

    mEmailLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    mEmailLabel.setText("Email:");

    mMobileNumberLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    mMobileNumberLabel.setText("Mobile Number:");

    emergencyContactLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    emergencyContactLabel.setText("Emergency Contacts:");

    guardianNameLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    guardianNameLabel.setText("Guardian Name:");

    guardianNameTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    guardianNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            guardianNameTextFieldKeyTyped(evt);
        }
    });

    relationToGuardianLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    relationToGuardianLabel.setText("Relation to Guardian:");

    gContactNumbersLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    gContactNumbersLabel.setText("Contact Number:");

    jLabel1.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    jLabel1.setText("Address:");

    guardianAddress.setColumns(20);
    guardianAddress.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    guardianAddress.setLineWrap(true);
    guardianAddress.setRows(5);
    guardianAddress.setWrapStyleWord(true);
    guardianAddress.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            guardianAddressKeyTyped(evt);
        }
    });
    jScrollPane1.setViewportView(guardianAddress);

    MobileNumber1.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    MobileNumber1.addCaretListener(new javax.swing.event.CaretListener() {
        public void caretUpdate(javax.swing.event.CaretEvent evt) {
            MobileNumber1CaretUpdate(evt);
        }
    });

    MobileNumber2.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    MobileNumber2.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            MobileNumber2KeyTyped(evt);
        }
    });

    mEmailTextField.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    mEmailTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            mEmailTextFieldKeyTyped(evt);
        }
    });

    relationToGuardian.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    relationToGuardian.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            relationToGuardianKeyTyped(evt);
        }
    });

    jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel22.setForeground(new java.awt.Color(255, 0, 0));
    jLabel22.setText("*");

    jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
    jLabel24.setForeground(new java.awt.Color(255, 0, 0));
    jLabel24.setText("*");

    gContactNumber1.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    gContactNumber1.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyTyped(java.awt.event.KeyEvent evt) {
            gContactNumber1KeyTyped(evt);
        }
    });

    javax.swing.GroupLayout contactDetailsPanelLayout = new javax.swing.GroupLayout(contactDetailsPanel);
    contactDetailsPanel.setLayout(contactDetailsPanelLayout);
    contactDetailsPanelLayout.setHorizontalGroup(
        contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                    .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                            .addComponent(motherNameLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(motherNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                            .addComponent(fMobileNumberLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(fMobileNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                            .addComponent(fatherNameLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(fatherNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                                    .addComponent(fEmailLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(fEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap(25, Short.MAX_VALUE))
                                .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                                    .addComponent(mlandlineLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(mACodeTextField)
                                        .addComponent(mareaCodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(mphoneNumberLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(mphoneNumberTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(32, 32, 32))))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contactDetailsPanelLayout.createSequentialGroup()
                            .addGap(55, 55, 55)
                            .addComponent(fareaCodeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(fPhoneNumberLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(27, 27, 27))
                        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(flandlineLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(fACodeTextField)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(fphoneNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addContainerGap())))
                .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                    .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                            .addGap(51, 51, 51)
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                            .addGap(12, 12, 12)
                            .addComponent(gContactNumbersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(1, 1, 1)))
                    .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                            .addComponent(gContactNumber1)
                            .addGap(195, 195, 195))
                        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                            .addComponent(jScrollPane1)
                            .addContainerGap())))
                .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                    .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                            .addComponent(jLabel24)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(emergencyContactLabel))
                        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                            .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(emailLabel)
                                .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel22)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(mobileNumberLabel)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(MobileNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabel135)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(MobileNumber2, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                    .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, contactDetailsPanelLayout.createSequentialGroup()
                            .addComponent(mMobileNumberLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(mMobileNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(mEmailLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(mEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                            .addGap(8, 8, 8)
                            .addComponent(guardianNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(guardianNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(relationToGuardianLabel)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(relationToGuardian))
                        .addComponent(jSeparator17)
                        .addComponent(jSeparator18, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jSeparator16, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addContainerGap())))
    );
    contactDetailsPanelLayout.setVerticalGroup(
        contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(contactDetailsPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(mobileNumberLabel)
                .addComponent(jLabel135)
                .addComponent(MobileNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(MobileNumber2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel22))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(emailLabel)
                .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jSeparator16, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(1, 1, 1)
            .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fatherNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fatherNameLabel))
                .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                    .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(fphoneNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(flandlineLabel)
                            .addComponent(fACodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fPhoneNumberLabel)
                        .addComponent(fareaCodeLabel))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(fMobileNumberLabel)
                        .addComponent(fMobileNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fEmailLabel)
                        .addComponent(fEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jSeparator17, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(17, 17, 17)
            .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                    .addGap(27, 27, 27)
                    .addComponent(mphoneNumberLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mMobileNumberLabel)
                        .addComponent(mMobileNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mEmailLabel)
                        .addComponent(mEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(contactDetailsPanelLayout.createSequentialGroup()
                    .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(mlandlineLabel)
                        .addComponent(mACodeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(motherNameLabel)
                        .addComponent(motherNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mphoneNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(mareaCodeLabel)))
            .addGap(18, 18, 18)
            .addComponent(jSeparator18, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(emergencyContactLabel)
                .addComponent(jLabel24))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(guardianNameLabel)
                .addComponent(guardianNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(relationToGuardianLabel)
                .addComponent(relationToGuardian, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(gContactNumbersLabel)
                .addComponent(gContactNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(contactDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(14, Short.MAX_VALUE))
    );

    clearButton1.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
    clearButton1.setText("Clear");
    clearButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    clearButton1.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            clearButton1ActionPerformed(evt);
        }
    });

    jLabel23.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
    jLabel23.setForeground(new java.awt.Color(255, 0, 0));
    jLabel23.setText("* Required Fields");

    javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
    mainPanel.setLayout(mainPanelLayout);
    mainPanelLayout.setHorizontalGroup(
        mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(mainPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(othersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(basicInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(contactDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addContainerGap())
    );
    mainPanelLayout.setVerticalGroup(
        mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(mainPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addGroup(mainPanelLayout.createSequentialGroup()
                    .addComponent(basicInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(othersPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addComponent(contactDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(cancelButton)
                    .addComponent(clearButton1))
                .addComponent(jLabel23))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );

    pack();
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private boolean insertIntoDatabase() {
        boolean status;
        try {
            registrationDetails = new ArrayList<>();
            registrationDetails.add(roomNumberTextField.getText());//0
            registrationDetails.add(collegeTextField.getText().trim());//1
            registrationDetails.add(courseTextField.getText().trim());//2
            registrationDetails.add(yearTextField.getText().trim());//3
            registrationDetails.add(departmentTextField.getText().trim());//4
            
            DateFormat targetFormat = new SimpleDateFormat("yyyy-MM-dd");
            String formattedDate = targetFormat.format(birthDateChooser.getDateFormat().parse(birthDateChooser.getText()));
            
            registrationDetails.add(formattedDate);//5

            if (male.isSelected()) {
                registrationDetails.add("Male");//6
            } else {
                registrationDetails.add("Female");//6
            }
            registrationDetails.add(MobileNumber1.getText().trim());//7
            registrationDetails.add(MobileNumber2.getText().trim());//8
            registrationDetails.add(fatherNameTextField.getText().trim());//9
            registrationDetails.add(fACodeTextField.getText().trim() + fphoneNumberTextField.getText().trim());//10
            registrationDetails.add(fMobileNumberTextField.getText().trim());//11
            registrationDetails.add(fEmailTextField.getText().trim());//12
            registrationDetails.add(motherNameTextField.getText());//13
            registrationDetails.add(mACodeTextField.getText().trim() + mphoneNumberTextField.getText().trim());//14
            registrationDetails.add(mMobileNumberTextField.getText().trim());//15
            registrationDetails.add(mEmailTextField.getText().trim());//16
            registrationDetails.add(guardianNameTextField.getText().trim());//17
            registrationDetails.add(guardianAddress.getText().trim());//18
            registrationDetails.add(gContactNumber1.getText());//19
            registrationDetails.add(relationToGuardian.getText());//20
            registrationDetails.add(file);//21
            registrationDetails.add(id);//22
            registrationDetails.add(lastNameTextField.getText());//23
            registrationDetails.add(firstNameTextField.getText());//24
            registrationDetails.add(middleNameTextField.getText());//25
            registrationDetails.add(homeAddressTextArea.getText());//26
            registrationDetails.add(email.getText());//27
            byte[] cc = null;
            if(file != null){
                File thisFile = new File(file);
                cc = Files.readAllBytes(thisFile.toPath());
            }
            if (client.insertTenantRegistration(registrationDetails,cc)) {
                if(!roomNumberTextField.getText().equals(roomNumber)){
                    if(!client.updateRoomStatus(roomNumber.trim(), roomNumberTextField.getText().trim()) && !client.updateFurnitureTosNull()){
                        md.warning(this, "Room Status not Updated");
                    }
                }
                insertBilling();
                md.successful(this);
                saveButton.setEnabled(false);
                status = true;
                new Reservation(client,user).setVisible(true);
                dispose();
            } else {
                md.unsuccessful(this);
                status = false;
            }
            
        } catch (ParseException | RemoteException ex) {
            status = false;
            md.error(this, ex.getMessage());
//            Logger.getLogger(Registration_Tenant.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            status = false;
            md.error(this, "File not Found");
//            Logger.getLogger(Registration_Tenant.class.getName()).log(Level.SEVERE, null, ex);
        }
        return status;
    }

    private boolean checker() {
        boolean tester;
        //
        if (nameChecker() & address() & emergencyContact()
                & mobileNumber1Checker() 
                & emailAddress1Checker() 
                & mobileNumber2Checker()
                & mobileNumber3Checker() 
                & emailAddress2Checker() 
                & mobileNumber4Checker() 
                & emailAddress3Checker()
                & mobileNumber5Checker() 
                & yearChecker() 
                & phoneNumber1Checker() 
                & phoneNumber2Checker()) {
            tester = true;
        } else {
            tester = false;
        }
        return tester;
    }

    private boolean address(){
        if(homeAddressTextArea.getText().trim().isEmpty()){
            md.error(this, "Address is required to fill-in.");
            return false;
        }
        return true;
    }
    
    private boolean pictureChecker() {
        boolean tester = true;
        if (pictureFileNameLabel.getText().trim().equals("picture.jpg") || file == null) {
            tester = false;
        }
        return tester;
    }
    
    //mobile number of student
    private boolean mobileNumber1Checker() {
        String str = MobileNumber1.getText().trim();
        char[] chars = str.toCharArray();
        boolean tester = false;
        //if it is null                
        if (!str.equals("")) {
            //checks if the number is alphanumeric
            for (int i = 0; i < chars.length; i++) {
                try {
                    Integer.parseInt(String.valueOf(chars[i]));
                } catch (NumberFormatException nfe) {
                    md.error(this, "Not a number");
                    MobileNumber1.setText("");
                }
            }
            //checks if the number is 11 digits.
            if (str.length() == 11) {
                tester = true;
            } else {
                md.error(this, "The mobile number must be 11 digits.");
                MobileNumber1.setText("");
            }
        }
        return tester;
    }

    //mobile number of student
    private boolean mobileNumber2Checker() {
        String str = MobileNumber2.getText().trim();
        char[] chars = str.toCharArray();
        boolean tester = true;
        //if it is null                
        if (!str.equals("")) {
            //checks if the number is alphanumeric
            for (int i = 0; i < chars.length; i++) {
                try {
                    Integer.parseInt(String.valueOf(chars[i]));
                } catch (NumberFormatException nfe) {
                    md.error(this, "Not a number");
                    MobileNumber2.setText("");
                    tester = false;
                    break;
                }
            }
            //checks if the number is 11 digits.
            if (str.length() != 11) {
                md.error(this, "The mobile number must be 11 digits.");
                MobileNumber2.setText("");
                tester = false;
            }
        }
        return tester;
    }
    
    //email add of the student
    private boolean emailAddress1Checker() {
        char atSymbol = '@';
        String dotCom = ".com";
        String emailAddress = email.getText().trim();
        boolean tester = true;
        //find the @ symbol
        int atpos = emailAddress.indexOf(atSymbol);
        //find the .com
        int emadd = emailAddress.indexOf(dotCom, atpos);
        //if it is null                
        if (!emailAddress.equals("")) {
            if (emadd == -1) {
                md.error(this, "Invalid email address.");
                tester = false;
            }
        }
        return tester;
    }
    
    //mobile number of father
    private boolean mobileNumber3Checker() {
        String str = fMobileNumberTextField.getText().trim();
        char[] chars = str.toCharArray();
        boolean tester = true;
        //if it is null                
        if (!str.equals("")) {
            //checks if the number is alphanumeric
            for (int i = 0; i < chars.length; i++) {
                try {
                    Integer.parseInt(String.valueOf(chars[i]));
                } catch (NumberFormatException nfe) {
                    md.error(this, "Not a number");
                    fMobileNumberTextField.setText("");
                    tester = false;
                    break;
                }
            }
            //checks if the number is 11 digits.
            if (str.length() != 11) {
                md.error(this, "The mobile number must be 11 digits.");
                fMobileNumberTextField.setText("");
                tester = false;
            }
        }
        return tester;
    }
    
    //email add of the father
    private boolean emailAddress2Checker() {
        char atSymbol = '@';
        String dotCom = ".com";
        String emailAddress = fEmailTextField.getText().trim();
        boolean tester = true;
        //find the @ symbol
        int atpos = emailAddress.indexOf(atSymbol);
        //find the .com
        int emadd = emailAddress.indexOf(dotCom, atpos);
        //if it is null                
        if (!emailAddress.equals("")) {
            if (emadd == -1) {
                md.error(this, "Invalid email address.");
                tester = false;
            }
        }
        return tester;
    }
    
    //mobile number of mother
    private boolean mobileNumber4Checker() {
        String str = mMobileNumberTextField.getText().trim();
        char[] chars = str.toCharArray();
        boolean tester = true;
        //if it is null                
        if (!str.equals("")) {
            //checks if the number is alphanumeric
            for (int i = 0; i < chars.length; i++) {
                try {
                    Integer.parseInt(String.valueOf(chars[i]));
                } catch (NumberFormatException nfe) {
                    md.error(this, "Not a number");
                    mMobileNumberTextField.setText("");
                    tester = false;
                    break;
                }
            }
            //checks if the number is 11 digits.
            if (str.length() != 11) {
                md.error(this, "The mobile number must be 11 digits.");
                mMobileNumberTextField.setText("");
                tester = false;
            }
        }
        return tester;
    }
    
    //email add of the mother
    private boolean emailAddress3Checker() {
        char atSymbol = '@';
        String dotCom = ".com";
        String emailAddress = mEmailTextField.getText().trim();
        boolean tester = true;
        //find the @ symbol
        int atpos = emailAddress.indexOf(atSymbol);
        //find the .com
        int emadd = emailAddress.indexOf(dotCom, atpos);
        //if it is null                
        if (!emailAddress.equals("")) {
            if (emadd == -1) {
                md.error(this, "Invalid email address.");
                tester = false;
            }
        }
        return tester;
    }
    
    //mobile number of guardian
    private boolean mobileNumber5Checker() {
        String str = gContactNumber1.getText().trim();
        char[] chars = str.toCharArray();
        boolean tester = true;
        //if it is null                
        if (!str.equals("")) {
            //checks if the number is alphanumeric
            for (int i = 0; i < chars.length; i++) {
                try {
                    Integer.parseInt(String.valueOf(chars[i]));
                } catch (NumberFormatException nfe) {
                    md.error(this, "Not a number");
                    gContactNumber1.setText("");
                    tester = false;
                    break;
                }
            }
            //checks if the number is 11 digits.
            if (str.length() != 11) {
                md.error(this, "The mobile number must be 11 digits.");
                gContactNumber1.setText("");
                
            }
        }
        return tester;
    }
    
   //year of the student
    private boolean yearChecker() {
        String str = yearTextField.getText().trim();
        char[] chars = str.toCharArray();
        boolean tester = true;
        //if it is null
        if (!str.equals("")) {
            //checks if the Year is alphanummeric
            for (int i = 0; i < chars.length; i++) {
                try {
                    Integer.parseInt(String.valueOf(chars[i]));
                } catch (NumberFormatException nfe) {
                    md.error(this, "You've entered an alphanumeric, please try again.");
                    yearTextField.setText("");
                    tester = false;
                }
            }
            //checks if the Year is 4 digits.
            if (str.length() != 1) {
                md.error(this, "The number you've enter is more than 1 digits.");
                yearTextField.setText("");
                
            }
        }
        return tester;
    }
    
    //phone number for father
    private boolean phoneNumber1Checker() {
        String str = fphoneNumberTextField.getText().trim();
        char[] chars = str.toCharArray();
        boolean tester = true;
        //if it is null
        if (!str.equals("")) {
            //checks if the phone number is alphanummeric
            for (int i = 0; i < chars.length; i++) {
                try {
                    Integer.parseInt(String.valueOf(chars[i]));
                } catch (NumberFormatException nfe) {
                    md.error(this, "You've entered an alphanumeric, please try again.");
                    fphoneNumberTextField.setText("");
                    tester = false;
                    break;
                }
            }
            //checks if the phone number is 7 digits.
            if (str.length() != 7) {
                md.error(this, "The number you've enter is more than 7 digits.");
                fphoneNumberTextField.setText("");
                tester = false;
            }
        }
        return tester;
    }
    
    //phone number for mother
    private boolean phoneNumber2Checker() {
        String str = mphoneNumberTextField.getText().trim();
        char[] chars = str.toCharArray();
        boolean tester = true;
        //if it is null
        if (!str.equals("")) {
            //checks if the phone number is alphanummeric
            for (int i = 0; i < chars.length; i++) {
                try {
                    Integer.parseInt(String.valueOf(chars[i]));
                } catch (NumberFormatException nfe) {
                    md.error(this, "You've entered an alphanumeric, please try again.");
                    mphoneNumberTextField.setText("");
                    tester = false;
                    break;
                }
            }
            //checks if the phone number is 7 digits.
            if (str.length() != 7) {
                md.error(this, "The number you've enter is more than 7 digits.");
                mphoneNumberTextField.setText("");
                tester = false;
            }
        }
        return tester;
    }
    
    private void enableClearButton() {
        // TODO add your handling code here:
        if ( !collegeTextField.getText().isEmpty()
                || !departmentTextField.getText().isEmpty()
                || !courseTextField.getText().isEmpty()
                || !MobileNumber2.getText().isEmpty()
                || !fatherNameTextField.getText().isEmpty()
                || !fACodeTextField.getText().isEmpty()
                || !fphoneNumberTextField.getText().isEmpty()
                || !fMobileNumberTextField.getText().isEmpty()
                || !fEmailTextField.getText().isEmpty()
                || !motherNameTextField.getText().isEmpty()
                || !mACodeTextField.getText().isEmpty()
                || !mphoneNumberTextField.getText().isEmpty()
                || !mMobileNumberTextField.getText().isEmpty()
                || !mEmailTextField.getText().isEmpty()
                || !guardianNameTextField.getText().isEmpty()
                || !gContactNumber1.getText().isEmpty()
                || !relationToGuardian.getText().isEmpty()
                || !guardianAddress.getText().isEmpty()) {
            clearButton1.setEnabled(true);
        } else
            clearButton1.setEnabled(false);
    }
    
    private void enableButton() {
        // TODO add your handling code here:
        if ((male.isSelected() | female.isSelected()) 
                && !lastNameTextField.getText().trim().isEmpty()
                && !firstNameTextField.getText().trim().isEmpty()
                && !MobileNumber1.getText().trim().isEmpty()
                && !homeAddressTextArea.getText().trim().isEmpty()
                && !guardianNameTextField.getText().trim().isEmpty()
                && !relationToGuardian.getText().trim().isEmpty()
                && !gContactNumber1.getText().trim().isEmpty()
                && !guardianAddress.getText().trim().isEmpty()) {
            saveButton.setEnabled(true);
        }
        else{
            saveButton.setEnabled(false);
        }
    }
    
    private void clearAll() {
        collegeTextField.setText("");
        departmentTextField.setText("");
        courseTextField.setText("");
        fatherNameTextField.setText("");
        fACodeTextField.setText("");
        fphoneNumberTextField.setText("");
        fMobileNumberTextField.setText("");
        fEmailTextField.setText("");
        MobileNumber2.setText("");
        motherNameTextField.setText("");
        mACodeTextField.setText("");
        mphoneNumberTextField.setText("");
        mMobileNumberTextField.setText("");
        mEmailTextField.setText("");
        guardianNameTextField.setText("");
        gContactNumber1.setText("");
        relationToGuardian.setText("");
        guardianAddress.setText(""); 
    }
    
    private boolean emergencyContact(){
        if(guardianNameTextField.getText().trim().isEmpty() && relationToGuardian.getText().trim().isEmpty() && guardianAddress.getText().trim().isEmpty()){
            md.error(this, "All Fields Under Emergency Contact are required to fill-in.");
            return false;
        }
        return true;
    }
    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (checker()) {
            if (md.confirmationSave(this) == md.YES) {
                saveToPdf();
                insertIntoDatabase();
                iForm.setInventoryFormVisible();
                ifpp.setIFPPVisible();
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void collegeTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_collegeTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_collegeTextFieldKeyTyped

    private void departmentTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_departmentTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_departmentTextFieldKeyTyped

    private void courseTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_courseTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_courseTextFieldKeyTyped

    private void yearTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_yearTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_yearTextFieldKeyTyped

    private void fatherNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fatherNameTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_fatherNameTextFieldKeyTyped

    private void fACodeTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fACodeTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_fACodeTextFieldKeyTyped

    private void fphoneNumberTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fphoneNumberTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_fphoneNumberTextFieldKeyTyped

    private void fMobileNumberTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fMobileNumberTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_fMobileNumberTextFieldKeyTyped

    private void fEmailTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fEmailTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_fEmailTextFieldKeyTyped

    private void clearButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButton1ActionPerformed
        // TODO add your handling code here:
        clearAll();
        saveButton.setEnabled(false);
        clearButton1.setEnabled(false);
    }//GEN-LAST:event_clearButton1ActionPerformed

    private void applianceAndInventoryFormButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applianceAndInventoryFormButtonActionPerformed
        inventoryFormButton();
    }//GEN-LAST:event_applianceAndInventoryFormButtonActionPerformed

    private void inventoryFormButton() {
        // TODO add your handling code here:
        ifpp.setIFPPVisible();
        if(!iForm.isVisible()){
            String fullName;
            String roomNumber;
            String roomTypes;
            if(middleNameTextField.getText().isEmpty()){
                fullName = lastNameTextField.getText().trim() + ", " + firstNameTextField.getText().trim();
            } else {
                fullName = lastNameTextField.getText().trim() + ", " + firstNameTextField.getText().trim() + " " + middleNameTextField.getText().charAt(0) + ".";
            }
            roomNumber = roomNumberTextField.getText().trim();
            roomTypes = roomTypeTextField.getText().trim();
            iForm = new InventoryForm(client, id, fullName, roomNumber, roomTypes);
            iForm.setVisible(true);
        }
    }

    private void uploadPictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadPictureButtonActionPerformed
        FileFilter filter = new FileNameExtensionFilter("jpg and png files","jpg","png");
        chooser.setFileFilter(filter);
        chooser.showOpenDialog(null);
        if (chooser.getSelectedFile() != null) {
            pictureFileNameLabel.setText(chooser.getSelectedFile().getName() + " ");
            file = chooser.getSelectedFile().toString();
        }
    }//GEN-LAST:event_uploadPictureButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        String buttonName = cancelButton.getText();
        try {
            if (md.confirmationCancel(this) == md.YES) {
                if (!client.removeFurniture()) {
                    md.warning(this, "Furniture(s) update failed!");
                }

                if (client.removeGadget()) {
                    md.warning(this, "Gadget(s) delete failed!");
                }
                iForm.setInventoryFormVisible();
                ifpp.setIFPPVisible();
                new Reservation(client, user).setVisible(true);
                this.dispose();
            }
        } catch (RemoteException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Registration_Tenant.class.getName()).log(Level.SEVERE, null, ex);
        }
        if(iForm.isVisible()){
            iForm.setVisible(false);
        }
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void MobileNumber2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MobileNumber2KeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_MobileNumber2KeyTyped

    private void motherNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_motherNameTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_motherNameTextFieldKeyTyped

    private void mACodeTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mACodeTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_mACodeTextFieldKeyTyped

    private void mphoneNumberTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mphoneNumberTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_mphoneNumberTextFieldKeyTyped

    private void mMobileNumberTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mMobileNumberTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_mMobileNumberTextFieldKeyTyped

    private void mEmailTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_mEmailTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_mEmailTextFieldKeyTyped

    private void guardianNameTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_guardianNameTextFieldKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_guardianNameTextFieldKeyTyped

    private void relationToGuardianKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_relationToGuardianKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_relationToGuardianKeyTyped

    private void gContactNumber1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_gContactNumber1KeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_gContactNumber1KeyTyped

    private void guardianAddressKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_guardianAddressKeyTyped
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_guardianAddressKeyTyped

    private void maleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_maleMouseClicked
        enableButton();
    }//GEN-LAST:event_maleMouseClicked

    private void femaleMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_femaleMouseClicked
        enableButton();
    }//GEN-LAST:event_femaleMouseClicked

    private void lastNameTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_lastNameTextFieldCaretUpdate
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_lastNameTextFieldCaretUpdate

    private void firstNameTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_firstNameTextFieldCaretUpdate
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_firstNameTextFieldCaretUpdate

    private void MobileNumber1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_MobileNumber1CaretUpdate
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_MobileNumber1CaretUpdate

    private void maleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleActionPerformed
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_maleActionPerformed

    private void femaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleActionPerformed
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_femaleActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        iForm.setInventoryFormVisible();
        if(!ifpp.isVisible()){
            ifpp = new IFloorPlanPreview(roomNumberTextField, client, roomTypeTextField);
            ifpp.setVisible(true);
        } else {
            ifpp.setAlwaysOnTop(true);
            ifpp.setAlwaysOnTop(false);
        }
    }//GEN-LAST:event_jLabel2MouseClicked

    private void roomNumberTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_roomNumberTextFieldCaretUpdate
        // TODO add your handling code here:
        if(roomNumberTextField.getText().trim().isEmpty()){
            System.out.println("yes");
        }
    }//GEN-LAST:event_roomNumberTextFieldCaretUpdate

    private void birthDateChooserOnCommit(datechooser.events.CommitEvent evt) {//GEN-FIRST:event_birthDateChooserOnCommit
        try {
            // TODO add your handling code here:
            Date birthdate = birthDateChooser.getDateFormat().parse(birthDateChooser.getText());
            if(birthdate.after(Calendar.getInstance().getTime())){
                md.error(this, "Birthdate can't be later than the date today.");
                Calendar cal = Calendar.getInstance();
                cal.setTime(lastDate);
                birthDateChooser.setSelectedDate(cal);
                birthDateChooser.setDefaultPeriods(new PeriodSet(new Period(cal,cal)));
            } else {
                lastDate = birthDateChooser.getDateFormat().parse(birthDateChooser.getText());
            }
        } catch (ParseException | IncompatibleDataExeption ex) {
//            Logger.getLogger(Registration_Tenant.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }//GEN-LAST:event_birthDateChooserOnCommit

    private void homeAddressTextAreaCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_homeAddressTextAreaCaretUpdate
        // TODO add your handling code here:
        enableClearButton();   
        enableButton();
    }//GEN-LAST:event_homeAddressTextAreaCaretUpdate

    
    private boolean nameChecker(){
        if(lastNameTextField.getText().contains(",") || firstNameTextField.getText().contains(",") || middleNameTextField.getText().contains(",")){
            md.error(this, "Check Comma (,) in the fields Last Name, First Name, and Middle Name");
            return false;
        }
        return true;
    }
    
    private void saveToPdf(){
        byte[] cc = null;
        try {
            RegistrationImpl registrationImpl = new RegistrationImpl();
            ResidentImpl residentImpl = new ResidentImpl();

            residentImpl.setLName(lastNameTextField.getText().trim());
            residentImpl.setFName(firstNameTextField.getText().trim());
            residentImpl.setMName(middleNameTextField.getText().trim());
            if(file != null){
                File thisFile = new File(file);
                cc = Files.readAllBytes(thisFile.toPath());
            }
            residentImpl.setPicture(cc);
            String g;
            if (male.isSelected()) {
                g = "Male";//6
            } else {
                g = "Female";//6
            }
            residentImpl.setGender(g);
            
            registrationImpl.setCollege(collegeTextField.getText().trim());
            registrationImpl.setDepartment(departmentTextField.getText().trim());
            registrationImpl.setCourse(courseTextField.getText().trim());
            registrationImpl.setYear(yearTextField.getText().trim());
            registrationImpl.setAddress(homeAddressTextArea.getText().trim());
            registrationImpl.setRoom_number(roomNumberTextField.getText().trim());
            registrationImpl.setRoom_type(roomTypeTextField.getText().trim());
            registrationImpl.setMobile_number(MobileNumber1.getText().trim());
            registrationImpl.setMobile_number2(MobileNumber2.getText().trim());
            registrationImpl.setEmail(email.getText().trim());
            registrationImpl.setFatherName(fatherNameTextField.getText().trim());
            registrationImpl.setFatherAreaCode(fACodeTextField.getText().trim());
            registrationImpl.setFatherPhone(fphoneNumberTextField.getText().trim());
            registrationImpl.setFatherMobile(fMobileNumberTextField.getText().trim());
            registrationImpl.setFatherEmail(fEmailTextField.getText().trim());
            registrationImpl.setMotherName(motherNameTextField.getText().trim());
            registrationImpl.setMotherAreaCode(mACodeTextField.getText().trim());
            registrationImpl.setMotherPhone(mphoneNumberTextField.getText().trim());
            registrationImpl.setMotherMobile(mMobileNumberTextField.getText().trim());
            registrationImpl.setMotherEmail(mEmailTextField.getText().trim());
            registrationImpl.setGuardianName(guardianNameTextField.getText().trim());
            registrationImpl.setGuardianRelation(relationToGuardian.getText().trim());
            registrationImpl.setGuardianMobile( gContactNumber1.getText().trim());
            registrationImpl.setGuardianAddress(guardianAddress.getText().trim());
            
            if(client.saveRegistrationToPdf(registrationImpl, residentImpl)){
                md.successful(this, "Done saving Registration Form to PDF");
            } else {
                md.unsuccessful(this, "Failed to save file to PDF");
            }
        } catch (IOException ex) {
            md.error(this, "File Not Found");
        }
        
    }
    
    private void insertBilling() {
        try {
            ArrayList<String> billing = new ArrayList<>();
            DateFormat format = new SimpleDateFormat("yyyy-MM-dd");

            String datePaid = new SimpleDateFormat("yyyy-MM-dd").format(Calendar.getInstance().getTime()); // 0
            Calendar cal1 = Calendar.getInstance();
            cal1.add(Calendar.DATE, -1);
            String datein = new SimpleDateFormat("yyyy-MM-dd").format(cal1.getTime()); // 1

            Calendar cal = Calendar.getInstance();
            cal.set(Calendar.DAY_OF_MONTH, cal.getActualMaximum(Calendar.DAY_OF_MONTH));

//            String dateOut = new SimpleDateFormat("yyyy-MM-" + cal.getTime().getDate()).format(Calendar.getInstance().getTime()); // 2
            String dateOut = datein;

            String billingType = "Daily"; // 3
            int days = 0; // 4
            if (format.parse(dateOut).getDate() == 1) {
                billingType = "Monthly";
                days = format.parse(dateOut).getDate();
            } else {
                days = format.parse(dateOut).getDate() - format.parse(datein).getDate();
            }
            
            double roomRate = 0.0; // 5
            switch(roomTypeTextField.getText()){
                case "Triple-Sharing Room":
                    roomRate = client.getRoomRate("Triple-Sharing Room");
                    break;
                case "Double-Sharing Room":
                    roomRate = client.getRoomRate("Double-Sharing Room");
                    break;
                case "Single Room":
                    roomRate = client.getRoomRate("Single Room");
                    break;
                default:
                    System.out.println(client.getRoomRate("Single Room"));
                    roomRate = client.getRoomRate("Single Room");
            }
            System.out.println(roomRate);
            if(billingType.equals("Daily")){
                roomRate = roomRate * (days/30.0);
            }
            
            String residentId = client.getResidentId(lastNameTextField.getText().trim() + ", " + firstNameTextField.getText().trim());
            String roomId = client.getRoomIdFromResidentId(residentId);
            billing.add(datePaid); // 0
            billing.add(datein); // 1
            billing.add(datein); // 2
            billing.add(billingType); // 3
            billing.add(days+""); // 4
            billing.add(roomRate+""); // 5
            billing.add(null); // 6
            billing.add(null); // 7
            billing.add("0.00"); // 8
            billing.add(null); // 9
            billing.add(residentId); // 10
            billing.add(roomId); // 11
            billing.add(roomRate+""); // 12
            billing.add("0.00"); // 13
            billing.add(roomRate+""); // 14
            billing.add(null); // 15
            billing.add(null); // 16
            billing.add(null); // 17
            billing.add("Paid"); //18
            
            if(!client.insertBilling(billing)){
                md.unsuccessful(this, "Billing info not saved");
            }
        } catch (ParseException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Registration_Tenant.class.getName()).log(Level.SEVERE, null, ex);
        } catch (RemoteException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Registration_Tenant.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Registration.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Registration(null,null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField MobileNumber1;
    private javax.swing.JTextField MobileNumber2;
    private javax.swing.JButton applianceAndInventoryFormButton;
    private javax.swing.JPanel basicInfoPanel;
    private datechooser.beans.DateChooserCombo birthDateChooser;
    private javax.swing.JLabel birthDateLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JFileChooser chooser;
    private javax.swing.JButton clearButton1;
    private javax.swing.JLabel collegeLabel;
    private javax.swing.JTextField collegeTextField;
    private javax.swing.JPanel contactDetailsPanel;
    private javax.swing.JLabel courseLabel;
    private javax.swing.JTextField courseTextField;
    private javax.swing.JLabel departmentLabel;
    private javax.swing.JTextField departmentTextField;
    private javax.swing.JTextField email;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JLabel emergencyContactLabel;
    private javax.swing.JTextField fACodeTextField;
    private javax.swing.JLabel fEmailLabel;
    private javax.swing.JTextField fEmailTextField;
    private javax.swing.JLabel fMobileNumberLabel;
    private javax.swing.JTextField fMobileNumberTextField;
    private javax.swing.JLabel fPhoneNumberLabel;
    private javax.swing.JLabel fareaCodeLabel;
    private javax.swing.JLabel fatherNameLabel;
    private javax.swing.JTextField fatherNameTextField;
    private javax.swing.JRadioButton female;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JLabel flandlineLabel;
    private javax.swing.JTextField fphoneNumberTextField;
    private javax.swing.JTextField gContactNumber1;
    private javax.swing.JLabel gContactNumbersLabel;
    private javax.swing.ButtonGroup gender;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JTextArea guardianAddress;
    private javax.swing.JLabel guardianNameLabel;
    private javax.swing.JTextField guardianNameTextField;
    private javax.swing.JLabel homeAddressLabel;
    private javax.swing.JTextArea homeAddressTextArea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel135;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator16;
    private javax.swing.JSeparator jSeparator17;
    private javax.swing.JSeparator jSeparator18;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JTextField mACodeTextField;
    private javax.swing.JLabel mEmailLabel;
    private javax.swing.JTextField mEmailTextField;
    private javax.swing.JLabel mMobileNumberLabel;
    private javax.swing.JTextField mMobileNumberTextField;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton male;
    private javax.swing.JLabel mareaCodeLabel;
    private javax.swing.JLabel middleNameLabel;
    private javax.swing.JTextField middleNameTextField;
    private javax.swing.JLabel mlandlineLabel;
    private javax.swing.JLabel mobileNumberLabel;
    private javax.swing.JLabel motherNameLabel;
    private javax.swing.JTextField motherNameTextField;
    private javax.swing.JLabel mphoneNumberLabel;
    private javax.swing.JTextField mphoneNumberTextField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.ButtonGroup occupation;
    private javax.swing.JPanel othersPanel;
    private javax.swing.JLabel pictureFileNameLabel;
    private javax.swing.JTextField relationToGuardian;
    private javax.swing.JLabel relationToGuardianLabel;
    private javax.swing.JLabel roomNumberLabel;
    private javax.swing.JTextField roomNumberTextField;
    private javax.swing.JLabel roomTypeLabel;
    private javax.swing.JTextField roomTypeTextField;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton uploadPictureButton;
    private javax.swing.JLabel yearLabel;
    private javax.swing.JTextField yearTextField;
    // End of variables declaration//GEN-END:variables

}
