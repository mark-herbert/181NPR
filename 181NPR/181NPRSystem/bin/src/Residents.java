
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Jefren
 */
public class Residents extends javax.swing.JFrame {
    private DefaultTableModel tableModel = new DefaultTableModel();
    private ArrayList<ResidentImpl> residentInfo;
    private final NPRInterface client;
    private String idNum = "";
    private String roomId = "";
    private String name = "";
    private String status = "";
    private String resident = "";
    private int row = 0;
    private final String user;
    private viewProfile vP = new viewProfile();
    private ChangeRoom cr = new ChangeRoom();
    private final MessageDialog md = new MessageDialog();

    /**
     * Creates new form Residents
     * @param client
     */
    public Residents(NPRInterface client, String user){
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons/Resident.png")));
        initComponents();
        this.client = client;
        this.user = user;
        tableModel = (DefaultTableModel) residentTable.getModel();
        try {
            setRow();
            sort();
        } catch (ClassNotFoundException | SQLException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Residents.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void sort() {
        residentTable.setRowSorter(new TableRowSorter(tableModel));
        int[] selection = residentTable.getSelectedRows();
        for (int i = 0; i < selection.length; i++) {
            selection[i] = residentTable.convertRowIndexToModel(selection[i]);
        }
    }

    private void setRow() throws ClassNotFoundException, SQLException {
        try {
            tableModel.getDataVector().removeAllElements();
            tableModel.fireTableDataChanged();
            residentInfo = client.getAllResident();
            for (ResidentImpl info : residentInfo) {
                tableModel.addRow(new Object[]{
                        info.getFullName(),
                        info.getStatus()
                    });
            }
            residentTable.setModel(tableModel);
        } catch (RemoteException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Residents.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popUp = new javax.swing.JPopupMenu();
        activate = new javax.swing.JMenuItem();
        deactivate = new javax.swing.JMenuItem();
        viewProfile = new javax.swing.JMenuItem();
        changeRoom = new javax.swing.JMenuItem();
        leave = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        residentTable = new javax.swing.JTable();
        filter = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        home = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        activate.setText("Activate Biometric");
        activate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activateActionPerformed(evt);
            }
        });
        popUp.add(activate);

        deactivate.setText("Deactivate Biometric");
        deactivate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deactivateActionPerformed(evt);
            }
        });
        popUp.add(deactivate);

        viewProfile.setText("View Profile");
        viewProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewProfileActionPerformed(evt);
            }
        });
        popUp.add(viewProfile);

        changeRoom.setText("Change Room");
        changeRoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeRoomActionPerformed(evt);
            }
        });
        popUp.add(changeRoom);

        leave.setText("Leave Dorm");
        leave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaveActionPerformed(evt);
            }
        });
        popUp.add(leave);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/monitoringsystem/181.jpg"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        jLabel1.setText("Filter by:");

        searchField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchFieldCaretUpdate(evt);
            }
        });

        residentTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Name", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        residentTable.setRowSelectionAllowed(false);
        residentTable.getTableHeader().setReorderingAllowed(false);
        residentTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                residentTableMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(residentTable);
        if (residentTable.getColumnModel().getColumnCount() > 0) {
            residentTable.getColumnModel().getColumn(1).setMinWidth(160);
            residentTable.getColumnModel().getColumn(1).setPreferredWidth(160);
            residentTable.getColumnModel().getColumn(1).setMaxWidth(160);
        }

        filter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Resident", "Active", "Not Active" }));
        filter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterItemStateChanged(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel2.setText("Search:");

        home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Back.png"))); // NOI18N
        home.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeMouseClicked(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/help.png"))); // NOI18N
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchField))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(home, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(home)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void residentTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_residentTableMouseReleased
        if (evt.isPopupTrigger()) {
            status = residentTable.getValueAt(residentTable.getSelectedRow(), 1).toString();
            if (status.equalsIgnoreCase("Active")) {
                activate.setEnabled(false);
                deactivate.setEnabled(true);
            } else {
                activate.setEnabled(true);
                deactivate.setEnabled(false);
            }
            javax.swing.JTable source = (javax.swing.JTable) evt.getSource();
            row = source.rowAtPoint(evt.getPoint());
            int column = source.columnAtPoint(evt.getPoint());
            if (!source.isRowSelected(row)) {
                source.changeSelection(row, column, false, false);
            }
            popUp.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_residentTableMouseReleased

    private void activateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activateActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to activate?", "Confirmation",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            String selectedName = residentTable.getValueAt(residentTable.getSelectedRow(), 0).toString();
            try {
                if (client.updateResidentStatus("Active", client.getResidentId(selectedName))) {
                    String[] name = selectedName.split(",");
                    JOptionPane.showMessageDialog(null, name[1].trim() + " " + name[0].trim() + " is Activated.", "Successful", JOptionPane.INFORMATION_MESSAGE);
                    setRow();
                } else {
                    JOptionPane.showMessageDialog(null, "Resident Status update failed.", "Failed!", JOptionPane.ERROR_MESSAGE);
                }
            } catch (RemoteException | ClassNotFoundException | SQLException ex) {
//                Logger.getLogger(Reservation.class.getName()).log(Level.SEVERE, null, ex);
                new MessageDialog().error(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_activateActionPerformed

    private void deactivateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deactivateActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to deactivate the resident?", "Confirmation",
                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            String selectedName = residentTable.getValueAt(residentTable.getSelectedRow(), 0).toString();
            try {
                if (client.updateResidentStatus("Not Active", client.getResidentId(selectedName))) {
                    String[] name = selectedName.split(",");
                    JOptionPane.showMessageDialog(null, name[1].trim() + " " + name[0].trim() + " is Deactivated.", "Successful", JOptionPane.INFORMATION_MESSAGE);
                    setRow();
                } else {
                    JOptionPane.showMessageDialog(null, "Resident Status update failed.", "Failed!", JOptionPane.ERROR_MESSAGE);
                }
            } catch (RemoteException | ClassNotFoundException | SQLException ex) {
                md.error(this, ex.getMessage());
//                Logger.getLogger(Reservation.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_deactivateActionPerformed

    private void viewProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewProfileActionPerformed
        try {
            String selectedName = residentTable.getValueAt(residentTable.getSelectedRow(), 0).toString();
            if(!vP.isVisible()){
                vP = new viewProfile(client, client.getResidentId(selectedName));
                vP.setVisible(true);
                if(cr.isVisible()){
                    cr.dispose();
                }
            } else {
                vP.dispose();
                vP = new viewProfile(client, client.getResidentId(selectedName));
                vP.setVisible(true);
            }
        } catch (RemoteException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Reservation.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_viewProfileActionPerformed

    private void leaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaveActionPerformed
        try {
            String selectedName = residentTable.getValueAt(residentTable.getSelectedRow(), 0).toString();
            if (client.residentHasPreviousStatement(client.getResidentId(selectedName)) || client.getResidentBalance(client.getResidentId(selectedName)) > 0) {
                if(JOptionPane.showConfirmDialog(this, selectedName + " still have an unsettled billing account.\nPress YES to Redirect to Billing form", "Unsettled Billing", JOptionPane.YES_OPTION) == JOptionPane.YES_OPTION){
                    dispose();
                    Billing_Resident br = new Billing_Resident(client, user);
                    br.setVisible(true);
                    br.searchFieldUpdater.setText(selectedName.split(",")[0]);
                }
            } else if (JOptionPane.showConfirmDialog(null, "Are you sure you want to remove the resident from the list?", "Confirmation",
                    JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                if (client.updateRoomStatusFromResident(selectedName)) {
                    if (client.updateResidentStatus("Leave", client.getResidentId(selectedName))) {
                        String[] name = selectedName.split(",");
                        JOptionPane.showMessageDialog(null, name[1].trim() + " " + name[0].trim() + " left.", "Success", JOptionPane.INFORMATION_MESSAGE);
                        setRow();
                    } else {
                        JOptionPane.showMessageDialog(null, "Resident Status update failed.", "Failed!", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Room Status update failed.", "Failed!", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (RemoteException | ClassNotFoundException | SQLException ex) {
//            Logger.getLogger(Residents.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }//GEN-LAST:event_leaveActionPerformed

    private void searchFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchFieldCaretUpdate
        try {
            String filterBy = filter.getSelectedItem().toString();
            switch (filterBy) {
                case "Not Active":
                    if (searchField.getText().length() > 0) {
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        residentInfo = client.getAllResidentForSearch("Not Active", searchField.getText().trim());
                        for (ResidentImpl info : residentInfo) {
                            tableModel.addRow(new Object[]{
                                info.getFullName(),
                                info.getStatus()
                            });
                        }
                        residentTable.setModel(tableModel);
                    } else {
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        residentInfo = client.getAllResidentForSearch("Not Active", "");
                        for (ResidentImpl info : residentInfo) {
                            tableModel.addRow(new Object[]{
                                info.getFullName(),
                                info.getStatus()
                            });
                        }
                        residentTable.setModel(tableModel);
                    }
                    break;
                    
                case "Active":
                    if (searchField.getText().length() > 0) {
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        residentInfo = client.getAllResidentForSearch("Active", searchField.getText().trim());
                        for (ResidentImpl info : residentInfo) {
                            tableModel.addRow(new Object[]{
                                info.getFullName(),
                                info.getStatus()
                            });
                        }
                        residentTable.setModel(tableModel);
                    } else {
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        residentInfo = client.getAllResidentForSearch("Active", "");
                        for (ResidentImpl info : residentInfo) {
                            tableModel.addRow(new Object[]{
                                info.getFullName(),
                                info.getStatus()
                            });
                        }
                        residentTable.setModel(tableModel);
                    }
                    break;
                    
                default:
                    if (searchField.getText().length() > 0) {
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        residentInfo = client.getAllResidentForSearch("", searchField.getText().trim());
                        for (ResidentImpl info : residentInfo) {
                            tableModel.addRow(new Object[]{
                                info.getFullName(),
                                info.getStatus()
                            });
                        }
                        residentTable.setModel(tableModel);
                    } else {
                        setRow();
                    }
                    break;
            }
        } catch (ClassNotFoundException | SQLException | RemoteException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Residents.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchFieldCaretUpdate

    private void filterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterItemStateChanged
        try {
            String filterBy = filter.getSelectedItem().toString();
            switch (filterBy) {
                case "Not Active":
                    if (searchField.getText().length() > 0) {
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        residentInfo = client.getAllResidentForSearch("Not Active", searchField.getText().trim());
                        for (ResidentImpl info : residentInfo) {
                            tableModel.addRow(new Object[]{
                                info.getFullName(),
                                info.getStatus()
                            });
                        }
                        residentTable.setModel(tableModel);
                    } else {
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        residentInfo = client.getAllResidentForSearch("Not Active", "");
                        for (ResidentImpl info : residentInfo) {
                            tableModel.addRow(new Object[]{
                                info.getFullName(),
                                info.getStatus()
                            });
                        }
                        residentTable.setModel(tableModel);
                    }
                    break;
                    
                case "Active":
                    if (searchField.getText().length() > 0) {
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        residentInfo = client.getAllResidentForSearch("Active", searchField.getText().trim());
                        for (ResidentImpl info : residentInfo) {
                            tableModel.addRow(new Object[]{
                                info.getFullName(),
                                info.getStatus()
                            });
                        }
                        residentTable.setModel(tableModel);
                    } else {
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        residentInfo = client.getAllResidentForSearch("Active", "");
                        for (ResidentImpl info : residentInfo) {
                            tableModel.addRow(new Object[]{
                                info.getFullName(),
                                info.getStatus()
                            });
                        }
                        residentTable.setModel(tableModel);
                    }
                    break;
                    
                default:
                    if (searchField.getText().length() > 0) {
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        residentInfo = client.getAllResidentForSearch("", searchField.getText().trim());
                        for (ResidentImpl info : residentInfo) {
                            tableModel.addRow(new Object[]{
                                info.getFullName(),
                                info.getStatus()
                            });
                        }
                        residentTable.setModel(tableModel);
                    } else {
                        setRow();
                    }
                    break;
            }
        } catch (ClassNotFoundException | SQLException | RemoteException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Residents.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_filterItemStateChanged

    private void changeRoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeRoomActionPerformed
        try {
            String selectedName = residentTable.getValueAt(residentTable.getSelectedRow(), 0).toString();
            if(!cr.isVisible()){
                cr = new ChangeRoom(client, client.getResidentId(selectedName));
                cr.setVisible(true);
                if(vP.isVisible()){
                    vP.dispose();
                }
            } else {
                cr.dispose();
                cr = new ChangeRoom(client, client.getResidentId(selectedName));
                cr.setVisible(true);
            }
        } catch (RemoteException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Residents.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_changeRoomActionPerformed

    private void homeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeMouseClicked
        this.dispose();
        if(vP.isVisible()){
            vP.dispose();
        }
        if(cr.isVisible()){
            cr.dispose();
        }
        new Main(client, user).setVisible(true);
    }//GEN-LAST:event_homeMouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        // TODO add your handling code here:
        try {
            String path = "";
            BufferedReader br = new BufferedReader(new FileReader("dir\\docs.txt"));
            try {
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                }
                path = sb.toString().trim();
            } catch (IOException ex) {
//                Logger.getLogger(AdminArchiveFrame.class.getName()).log(Level.SEVERE, null, ex);
                new MessageDialog().error(this, ex.getMessage());
            } finally {
                br.close();
            }
            Desktop.getDesktop().browse(new File(path).toURI());
        } catch (IOException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Residents.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Residents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Residents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Residents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Residents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Residents(null, null).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem activate;
    private javax.swing.JMenuItem changeRoom;
    private javax.swing.JMenuItem deactivate;
    private javax.swing.JComboBox filter;
    private javax.swing.JLabel home;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem leave;
    private javax.swing.JPopupMenu popUp;
    private javax.swing.JTable residentTable;
    private javax.swing.JTextField searchField;
    private javax.swing.JMenuItem viewProfile;
    // End of variables declaration//GEN-END:variables
}
