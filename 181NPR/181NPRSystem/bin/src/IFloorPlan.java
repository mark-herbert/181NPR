
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLEncoder;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Kenneth
 */
public class IFloorPlan extends javax.swing.JFrame {

    /**
     * Creates new form HTMLCode
     */
    //private Component[] component = null;
    private final NPRInterface client;
    private ArrayList<String> resultSet;
    private ArrayList<RoomImpl> roomImpl;
    private final String user;
    private final DefaultTableModel model;
    private String currentRoom = "200";
    
    public IFloorPlan(NPRInterface client, String user) {
        initComponents();
        detailsPane.setVisible(false);
        ImagePanel panel = new ImagePanel(new ImageIcon(getClass().getResource("/floorplan.jpg")).getImage());
        jPanel1.add(panel);
        this.client = client;
        this.user = user;
        itemOwnerTable.getTableHeader().setReorderingAllowed(Boolean.FALSE);
        model = (DefaultTableModel) itemOwnerTable.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        dormNumber = new javax.swing.JComboBox();
        dormLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        r14 = new javax.swing.JLabel();
        r11 = new javax.swing.JLabel();
        r09 = new javax.swing.JLabel();
        r07 = new javax.swing.JLabel();
        r06 = new javax.swing.JLabel();
        r05 = new javax.swing.JLabel();
        r04 = new javax.swing.JLabel();
        r03 = new javax.swing.JLabel();
        r02 = new javax.swing.JLabel();
        r00 = new javax.swing.JLabel();
        r01 = new javax.swing.JLabel();
        r08 = new javax.swing.JLabel();
        r10 = new javax.swing.JLabel();
        r12 = new javax.swing.JLabel();
        r15 = new javax.swing.JLabel();
        detailsPanel = new javax.swing.JPanel();
        detailsPane = new javax.swing.JLayeredPane();
        id1 = new javax.swing.JLabel();
        reserveButton = new javax.swing.JButton();
        capacity = new javax.swing.JTextField();
        id2Name = new javax.swing.JTextField();
        id1Name = new javax.swing.JTextField();
        id2NameLabel = new javax.swing.JLabel();
        id3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        itemOwnerTable = new javax.swing.JTable();
        id2 = new javax.swing.JLabel();
        id1NameLabel = new javax.swing.JLabel();
        itemInventoryLabel = new javax.swing.JLabel();
        capacityLabel = new javax.swing.JLabel();
        id3Name = new javax.swing.JTextField();
        editButton = new javax.swing.JButton();
        roomNumber = new javax.swing.JTextField();
        id3NameLabel = new javax.swing.JLabel();
        roomLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Floor Plan");
        setIconImage(new ImageIcon(getClass().getResource("icons/181NPR.png")).getImage());
        setUndecorated(true);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        dormNumber.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        dormNumber.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        dormNumber.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dormNumber.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dormNumberItemStateChanged(evt);
            }
        });

        dormLabel.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        dormLabel.setText("DORM:");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        r14.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r14.setText("214");
        r14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r14MouseClicked(evt);
            }
        });

        r11.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r11.setText("211");
        r11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r11MouseClicked(evt);
            }
        });

        r09.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r09.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r09.setText("209");
        r09.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r09.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r09MouseClicked(evt);
            }
        });

        r07.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r07.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r07.setText("207");
        r07.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r07.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r07MouseClicked(evt);
            }
        });

        r06.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r06.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r06.setText("206");
        r06.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r06.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r06MouseClicked(evt);
            }
        });

        r05.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r05.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r05.setText("205");
        r05.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r05.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r05MouseClicked(evt);
            }
        });

        r04.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r04.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r04.setText("204");
        r04.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r04.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r04MouseClicked(evt);
            }
        });

        r03.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r03.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r03.setText("203");
        r03.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r03.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r03MouseClicked(evt);
            }
        });

        r02.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r02.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r02.setText("202");
        r02.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r02.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r02MouseClicked(evt);
            }
        });

        r00.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r00.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r00.setText("200");
        r00.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r00.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r00MouseClicked(evt);
            }
        });

        r01.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r01.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r01.setText("201");
        r01.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r01.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r01MouseClicked(evt);
            }
        });

        r08.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r08.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r08.setText("208");
        r08.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r08.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r08MouseClicked(evt);
            }
        });

        r10.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r10.setText("210");
        r10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r10MouseClicked(evt);
            }
        });

        r12.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r12.setText("212");
        r12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r12MouseClicked(evt);
            }
        });

        r15.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r15.setText("215");
        r15.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r15MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(r14, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r15, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r09, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r10, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(r07, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r06, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(r05, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r04, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(r08, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r01, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(r03, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r02, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(r00, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(r11, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r09, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r07, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r06, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r05, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r04, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r03, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r02, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r00, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r15, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(r01, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r08, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r10, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r12, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r14, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(126, Short.MAX_VALUE))
        );

        detailsPanel.setBackground(new java.awt.Color(255, 255, 255));

        detailsPane.setBackground(new java.awt.Color(255, 255, 255));
        detailsPane.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        id1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        id1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        id1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        id1.setMaximumSize(new java.awt.Dimension(75, 75));
        id1.setMinimumSize(new java.awt.Dimension(75, 75));
        id1.setPreferredSize(new java.awt.Dimension(75, 75));
        detailsPane.add(id1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 38, -1, -1));

        reserveButton.setFont(new java.awt.Font("Rondalo", 0, 18)); // NOI18N
        reserveButton.setText("RESERVE");
        reserveButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        reserveButton.setEnabled(false);
        reserveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reserveButtonActionPerformed(evt);
            }
        });
        detailsPane.add(reserveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(319, 38, 115, -1));

        capacity.setEditable(false);
        capacity.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        capacity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        detailsPane.add(capacity, new org.netbeans.lib.awtextra.AbsoluteConstraints(187, 11, 33, -1));

        id2Name.setEditable(false);
        id2Name.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        id2Name.setMinimumSize(new java.awt.Dimension(220, 26));
        id2Name.setName(""); // NOI18N
        id2Name.setPreferredSize(new java.awt.Dimension(220, 26));
        detailsPane.add(id2Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 141, -1, -1));

        id1Name.setEditable(false);
        id1Name.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        id1Name.setMinimumSize(new java.awt.Dimension(220, 35));
        id1Name.setPreferredSize(new java.awt.Dimension(220, 35));
        detailsPane.add(id1Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 59, -1, 26));

        id2NameLabel.setFont(new java.awt.Font("Rondalo", 1, 12)); // NOI18N
        id2NameLabel.setText("NAME:");
        detailsPane.add(id2NameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 120, -1, -1));

        id3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        id3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        id3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        id3.setMaximumSize(new java.awt.Dimension(75, 75));
        id3.setMinimumSize(new java.awt.Dimension(75, 75));
        id3.setPreferredSize(new java.awt.Dimension(75, 75));
        detailsPane.add(id3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 202, -1, -1));

        itemOwnerTable.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        itemOwnerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item", "Serial #", "Owner"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        itemOwnerTable.setEnabled(false);
        jScrollPane5.setViewportView(itemOwnerTable);

        detailsPane.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 38, 388, 237));

        id2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        id2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        id2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        id2.setMaximumSize(new java.awt.Dimension(75, 75));
        id2.setMinimumSize(new java.awt.Dimension(75, 75));
        id2.setPreferredSize(new java.awt.Dimension(75, 75));
        detailsPane.add(id2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 120, -1, -1));

        id1NameLabel.setFont(new java.awt.Font("Rondalo", 1, 12)); // NOI18N
        id1NameLabel.setText("NAME:");
        detailsPane.add(id1NameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 38, -1, -1));

        itemInventoryLabel.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        itemInventoryLabel.setText("ITEM INVENTORY");
        detailsPane.add(itemInventoryLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 14, -1, -1));

        capacityLabel.setFont(new java.awt.Font("Rondalo", 1, 12)); // NOI18N
        capacityLabel.setText("CAPACITY:");
        detailsPane.add(capacityLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 14, -1, -1));

        id3Name.setEditable(false);
        id3Name.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        id3Name.setMinimumSize(new java.awt.Dimension(220, 26));
        id3Name.setPreferredSize(new java.awt.Dimension(220, 26));
        detailsPane.add(id3Name, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 223, -1, -1));

        editButton.setFont(new java.awt.Font("Rondalo", 0, 18)); // NOI18N
        editButton.setText("EDIT");
        editButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        detailsPane.add(editButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(319, 75, 115, -1));

        roomNumber.setEditable(false);
        roomNumber.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        roomNumber.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        roomNumber.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                roomNumberroomNumberCaretUpdate(evt);
            }
        });
        detailsPane.add(roomNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 11, 41, -1));

        id3NameLabel.setFont(new java.awt.Font("Rondalo", 1, 12)); // NOI18N
        id3NameLabel.setText("NAME:");
        detailsPane.add(id3NameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 202, -1, -1));

        roomLabel.setFont(new java.awt.Font("Rondalo", 1, 12)); // NOI18N
        roomLabel.setText("ROOM NO.:");
        detailsPane.add(roomLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 14, -1, -1));

        javax.swing.GroupLayout detailsPanelLayout = new javax.swing.GroupLayout(detailsPanel);
        detailsPanel.setLayout(detailsPanelLayout);
        detailsPanelLayout.setHorizontalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(detailsPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        detailsPanelLayout.setVerticalGroup(
            detailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailsPanelLayout.createSequentialGroup()
                .addComponent(detailsPane, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Back.png"))); // NOI18N
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/monitoringsystem/iFloorPlan.png"))); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/help.png"))); // NOI18N
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(detailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(dormLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dormNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addGap(100, 100, 100)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1))
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dormLabel)
                            .addComponent(dormNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(detailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void dormNumberItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dormNumberItemStateChanged
        // TODO add your handling code here:
        int d = Integer.parseInt(dormNumber.getSelectedItem().toString())+1;
        r00.setText(d + "00");
        r01.setText(d + "01");
        r02.setText(d + "02");
        r03.setText(d + "03");
        r04.setText(d + "04");
        r05.setText(d + "05");
        r06.setText(d + "06");
        r07.setText(d + "07");
        r08.setText(d + "08");
        r09.setText(d + "09");
        r10.setText(d + "10");
        r11.setText(d + "11");
        r12.setText(d + "12");
        r14.setText(d + "14");
        r15.setText(d + "15");
        roomNumber.setText("");
        detailsPane.setVisible(false);
        setToolTipJava();
    }//GEN-LAST:event_dormNumberItemStateChanged

    private void r14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r14MouseClicked
        // TODO add your handling code here:
        currentRoom = r14.getText();
        roomNumber.setText(r14.getText());
        detailsPane.setVisible(true);
        setTransients(r14.getToolTipText());
    }//GEN-LAST:event_r14MouseClicked

    private void r01MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r01MouseClicked
        // TODO add your handling code here:
        currentRoom = r01.getText();
        roomNumber.setText(r01.getText());
        detailsPane.setVisible(true);
        setTransients(r01.getToolTipText());
    }//GEN-LAST:event_r01MouseClicked

    private void r02MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r02MouseClicked
        // TODO add your handling code here:
        currentRoom = r02.getText();
        roomNumber.setText(r02.getText());
        detailsPane.setVisible(true);
        setTransients(r02.getToolTipText());
    }//GEN-LAST:event_r02MouseClicked

    private void r03MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r03MouseClicked
        // TODO add your handling code here:
        currentRoom = r03.getText();
        roomNumber.setText(r03.getText());
        detailsPane.setVisible(true);
        setTransients(r03.getToolTipText());
    }//GEN-LAST:event_r03MouseClicked

    private void r04MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r04MouseClicked
        // TODO add your handling code here:
        currentRoom = r04.getText();
        roomNumber.setText(r04.getText());
        detailsPane.setVisible(true);
        setTransients(r04.getToolTipText());
    }//GEN-LAST:event_r04MouseClicked

    private void r05MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r05MouseClicked
        // TODO add your handling code here:
        currentRoom = r05.getText();
        roomNumber.setText(r05.getText());
        detailsPane.setVisible(true);
        setTransients(r05.getToolTipText());
    }//GEN-LAST:event_r05MouseClicked

    private void r06MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r06MouseClicked
        // TODO add your handling code here:
        currentRoom = r06.getText();
        roomNumber.setText(r06.getText());
        detailsPane.setVisible(true);
        setTransients(r06.getToolTipText());
    }//GEN-LAST:event_r06MouseClicked

    private void r07MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r07MouseClicked
        // TODO add your handling code here:
        currentRoom = r07.getText();
        roomNumber.setText(r07.getText());
        detailsPane.setVisible(true);
        setTransients(r07.getToolTipText());
    }//GEN-LAST:event_r07MouseClicked

    private void r08MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r08MouseClicked
        // TODO add your handling code here:
        currentRoom = r08.getText();
        roomNumber.setText(r08.getText());
        detailsPane.setVisible(true);
        setTransients(r08.getToolTipText());
    }//GEN-LAST:event_r08MouseClicked

    private void r09MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r09MouseClicked
        // TODO add your handling code here:
        currentRoom = r09.getText();
        roomNumber.setText(r09.getText());
        detailsPane.setVisible(true);
        setTransients(r09.getToolTipText());
    }//GEN-LAST:event_r09MouseClicked

    private void r10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r10MouseClicked
        // TODO add your handling code here:
        currentRoom = r10.getText();
        roomNumber.setText(r10.getText());
        detailsPane.setVisible(true);
        setTransients(r10.getToolTipText());
    }//GEN-LAST:event_r10MouseClicked

    private void r11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r11MouseClicked
        // TODO add your handling code here:
        currentRoom = r11.getText();
        roomNumber.setText(r11.getText());
        detailsPane.setVisible(true);
        setTransients(r11.getToolTipText());
    }//GEN-LAST:event_r11MouseClicked

    private void r12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r12MouseClicked
        // TODO add your handling code here:
        currentRoom = r12.getText();
        roomNumber.setText(r12.getText());
        detailsPane.setVisible(true);
        setTransients(r12.getToolTipText());
    }//GEN-LAST:event_r12MouseClicked

    private void r15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r15MouseClicked
        // TODO add your handling code here:
        currentRoom = r15.getText();
        roomNumber.setText(r15.getText());
        detailsPane.setVisible(true);
        setTransients(r15.getToolTipText());
    }//GEN-LAST:event_r15MouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
        roomNumber.setText("");
        detailsPane.setVisible(false);
    }//GEN-LAST:event_jPanel1MouseClicked

    private void roomNumberroomNumberCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_roomNumberroomNumberCaretUpdate
        // TODO add your handling code here:
        reserveButton.setEnabled(true);
//        editButton.setEnabled(true);
        panelChanger(currentRoom);
        setReservationForRoom();
        setToolTipJava();
        setInventoryTable();
    }//GEN-LAST:event_roomNumberroomNumberCaretUpdate

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        this.dispose();
        new Main(client, user).setVisible(true);
    }//GEN-LAST:event_jLabel1MouseClicked

    private void r00MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r00MouseClicked
        // TODO add your handling code here:
        currentRoom = r00.getText();
        roomNumber.setText(r00.getText());
        detailsPane.setVisible(true);
        setTransients(r00.getToolTipText());
    }//GEN-LAST:event_r00MouseClicked

    private void reserveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reserveButtonActionPerformed
        // TODO add your handling code here:
        new Reservation_Tenant(client, user, roomNumber.getText().trim(),"ifloorplan").setVisible(true);
        dispose();
    }//GEN-LAST:event_reserveButtonActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        setToolTipJava();
    }//GEN-LAST:event_formWindowOpened

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        new EditRooms(client, roomNumber.getText(), user, roomNumber).setVisible(true);
    }//GEN-LAST:event_editButtonActionPerformed

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        try {
            String path = "";
            BufferedReader br = new BufferedReader(new FileReader("dir\\docs.txt"));
            try {
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                }
                path = sb.toString().trim();
            } catch (IOException ex) {
//                Logger.getLogger(AdminArchiveFrame.class.getName()).log(Level.SEVERE, null, ex);
                new MessageDialog().error(this, ex.getMessage());
            } finally {
                br.close();
            }
            Desktop.getDesktop().browse(new File(path).toURI());
        } catch (IOException ex) {
            new MessageDialog().error(this, ex.getMessage());
//            Logger.getLogger(IFloorPlan.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel2MouseClicked

    private void setToolTipJava(){
        try {
            int number = 0;
            resultSet = client.getRooms(Integer.parseInt(dormNumber.getSelectedItem().toString()));
            roomImpl = client.getNumberOfOccupants();
            int numOfRes = 0;
            int numOfTrans = 0;
            if(resultSet != null){
                for(String res : resultSet){
                    String[] col = res.split(",");
                    switch(col[0].substring(1,3)){
                        case "00":
                            for(RoomImpl n : roomImpl){
                                if(r00.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r00.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r00.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r00.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r00.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r00.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r00.setToolTipText("Reserved for Transient");
                                }
                            }
                            r00.setForeground(color(col[1]));
                            break;
                        case "01":
                            for(RoomImpl n : roomImpl){
                                if(r01.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r01.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r01.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r01.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r02.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r01.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r01.setToolTipText("Reserved for Transient");
                                }
                            }
                            r01.setForeground(color(col[1]));
                            break;
                        case "02":
                            for(RoomImpl n : roomImpl){
                                if(r02.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r02.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r02.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r02.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r02.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r02.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r02.setToolTipText("Reserved for Transient");
                                }
                            }
                            r02.setForeground(color(col[1]));
                            break;
                        case "03":
                            for(RoomImpl n : roomImpl){
                                if(r03.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r03.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r03.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r03.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r03.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r03.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r03.setToolTipText("Reserved for Transient");
                                }
                            }
                            r03.setForeground(color(col[1]));
                            break;
                        case "04":
                            for(RoomImpl n : roomImpl){
                                if(r04.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r04.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r04.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r04.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r04.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r04.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r04.setToolTipText("Reserved for Transient");
                                }
                            }
                            r04.setForeground(color(col[1]));
                            break;
                        case "05":
                            for(RoomImpl n : roomImpl){
                                if(r05.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r05.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r05.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r05.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r05.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r05.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r05.setToolTipText("Reserved for Transient");
                                }
                            }
                            r05.setForeground(color(col[1]));
                            break;
                        case "06":
                            for(RoomImpl n : roomImpl){
                                if(r06.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r06.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r06.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r06.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r06.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r06.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r06.setToolTipText("Reserved for Transient");
                                }
                            }
                            r06.setForeground(color(col[1]));
                            break;
                        case "07":
                            for(RoomImpl n : roomImpl){
                                if(r07.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r07.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r07.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r07.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r07.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r07.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r07.setToolTipText("Reserved for Transient");
                                }
                            }
                            r07.setForeground(color(col[1]));
                            break;
                        case "08":
                            for(RoomImpl n : roomImpl){
                                if(r08.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r08.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r08.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r08.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r08.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r08.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r08.setToolTipText("Reserved for Transient");
                                }
                            }
                            r08.setForeground(color(col[1]));
                            break;
                        case "09":
                            for(RoomImpl n : roomImpl){
                                if(r09.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r09.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r09.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r09.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r09.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r09.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r09.setToolTipText("Reserved for Transient");
                                }
                            }
                            r09.setForeground(color(col[1]));
                            break;
                        case "10":
                            for(RoomImpl n : roomImpl){
                                if(r10.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r10.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r10.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r10.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r10.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r10.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r10.setToolTipText("Reserved for Transient");
                                }
                            }
                            r10.setForeground(color(col[1]));
                            break;
                        case "11":
                            for(RoomImpl n : roomImpl){
                                if(r11.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r11.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r11.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r11.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r11.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r11.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r11.setToolTipText("Reserved for Transient");
                                }
                            }
                            r11.setForeground(color(col[1]));
                            break;
                        case "12":
                            for(RoomImpl n : roomImpl){
                                if(r12.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r12.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r12.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r12.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r12.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r12.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r12.setToolTipText("Reserved for Transient");
                                }
                            }
                            r12.setForeground(color(col[1]));
                            break;
                        case "14":
                            for(RoomImpl n : roomImpl){
                                if(r14.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r14.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r14.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r14.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r14.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r14.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r14.setToolTipText("Reserved for Transient");
                                }
                            }
                            r14.setForeground(color(col[1]));
                            break;
                        case "15":
                            for(RoomImpl n : roomImpl){
                                if(r15.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r15.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r15.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r15.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r15.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r15.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r15.setToolTipText("Reserved for Transient");
                                }
                            }
                            r15.setForeground(color(col[1]));
                            break;
                    }
                    number = 0;
                }
            } else {
                System.out.println("Table ROOM is Empty");
            }
        } catch (RemoteException ex) {
//            Logger.getLogger(IFloorPlan.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }
    
    private String type(String col){
        String num = "";
        switch(col){
            case "S":
                num = "1";
                break;
            case "D":
                num = "2";
                break;
            case "T":
                num = "3";
                break;
            default:
                num = "0";
        }
        return num;
    }
    private Color color(String col){
        Color color = Color.BLACK;
        switch(col){
            case "unoccupied":
                color = new Color(0,128,0);
                break;
            case "fully occupied":
                color = Color.BLUE;
                break;
            case "partially occupied":
                color = new Color(135,206,250);
                break;
            case "not available":
                color = Color.RED;
                break;
        }
        return color;
    }
    private void panelChanger(String roomNumber){
        id1.setIcon(null);
        id2.setIcon(null);
        id3.setIcon(null);
        id1.setText("Vacant");
        id2.setText("Vacant");
        id3.setText("Vacant");
        id1Name.setText("");
        id2Name.setText("");
        id3Name.setText("");
        try {
            String[] details = client.getRoomDetails(roomNumber);
            ArrayList<ResidentImpl> residentImpl = client.getOccupants(roomNumber);
            switch(details[1]){
                case "S":
                    //1st
                    id1.setVisible(true);
                    id1NameLabel.setVisible(true);
                    id1Name.setVisible(true);
                    //2nd
                    id2.setVisible(false);
                    id2NameLabel.setVisible(false);
                    id2Name.setVisible(false);
                    //3rd
                    id3.setVisible(false);
                    id3NameLabel.setVisible(false);
                    id3Name.setVisible(false);
                    
                    reserveButton.setEnabled(true);
                    break;
                case "D":
                    //1st
                    id1.setVisible(true);
                    id1NameLabel.setVisible(true);
                    id1Name.setVisible(true);
                    //3rd
                    id3.setVisible(false);
                    id3NameLabel.setVisible(false);
                    id3Name.setVisible(false);
                    //2nd
                    id2.setVisible(true);
                    id2NameLabel.setVisible(true);
                    id2Name.setVisible(true);
                    
                    reserveButton.setEnabled(true);
                    break;
                case "T":
                    //1st
                    id1.setVisible(true);
                    id1NameLabel.setVisible(true);
                    id1Name.setVisible(true);
                    //2nd
                    id2.setVisible(true);
                    id2NameLabel.setVisible(true);
                    id2Name.setVisible(true);
                    //3rd
                    id3.setVisible(true);
                    id3NameLabel.setVisible(true);
                    id3Name.setVisible(true);
                    
                    reserveButton.setEnabled(true);
                    break;
                default:
                    //1st
                    id1.setVisible(false);
                    id1NameLabel.setVisible(false);
                    id1Name.setVisible(false);
                    //2nd
                    id2.setVisible(false);
                    id2NameLabel.setVisible(false);
                    id2Name.setVisible(false);
                    //3rd
                    id3.setVisible(false);
                    id3NameLabel.setVisible(false);
                    id3Name.setVisible(false);
                    
                    reserveButton.setEnabled(false);
            }
            capacity.setText(type(details[1]));
            switch (details[1]) {
                case "S":
                    if(!residentImpl.isEmpty()){
                        if(residentImpl.get(0).getPicture() != null ){
                            InputStream in = new ByteArrayInputStream(residentImpl.get(0).getPicture());
                            BufferedImage img = ImageIO.read(in);
                            if(img != null){
                                Image image = img.getScaledInstance(75, 75, Image.SCALE_SMOOTH);
                                id1.setIcon(new ImageIcon(image));
                            }
                        }
                        id1Name.setText(residentImpl.get(0).getFullName());
                        id1.setText("");
                    }
                    editButton.setEnabled(true);
                    break;
                case "D":
                    if(!residentImpl.isEmpty()){
                        if(residentImpl.get(0).getPicture() != null ){
                            InputStream in = new ByteArrayInputStream(residentImpl.get(0).getPicture());
                            BufferedImage img = ImageIO.read(in);
                            if(img != null){
                                Image image = img.getScaledInstance(75, 75, Image.SCALE_SMOOTH);
                                id1.setIcon(new ImageIcon(image));
                            }
                        }
                        id1Name.setText(residentImpl.get(0).getFullName());
                        id1.setText("");
                    }   if(residentImpl.size() > 1){
                        if(residentImpl.get(1).getPicture() != null ){
                            InputStream in = new ByteArrayInputStream(residentImpl.get(1).getPicture());
                            BufferedImage img = ImageIO.read(in);
                            if(img != null){
                                Image image = img.getScaledInstance(75, 75, Image.SCALE_SMOOTH);
                                id2.setIcon(new ImageIcon(image));
                            }
                        }
                        id2Name.setText(residentImpl.get(1).getFullName());
                        id2.setText("");
                    }
                    editButton.setEnabled(true);
                    break;
                case "T":
                    if(!residentImpl.isEmpty()){
                        if(residentImpl.get(0).getPicture() != null){
                            InputStream in = new ByteArrayInputStream(residentImpl.get(0).getPicture());
                            BufferedImage img = ImageIO.read(in);
                            if(img != null){
                                Image image = img.getScaledInstance(75, 75, Image.SCALE_SMOOTH);
                                id1.setIcon(new ImageIcon(image));
                            }
                        }
                        id1Name.setText(residentImpl.get(0).getFullName());
                        id1.setText("");
                    }   if(residentImpl.size() > 1){
                        if(residentImpl.get(1).getPicture() != null) {
                            InputStream in = new ByteArrayInputStream(residentImpl.get(1).getPicture());
                            BufferedImage img = ImageIO.read(in);
                            if(img != null){
                                Image image = img.getScaledInstance(75, 75, Image.SCALE_SMOOTH);
                                id2.setIcon(new ImageIcon(image));
                            }
                        }
                        id2Name.setText(residentImpl.get(1).getFullName());
                        id2.setText("");
                    }   if(residentImpl.size() > 2){
                        if(residentImpl.get(2).getPicture() != null){
                            InputStream in = new ByteArrayInputStream(residentImpl.get(2).getPicture());
                            BufferedImage img = ImageIO.read(in);
                            if(img != null){
                                Image image = img.getScaledInstance(75, 75, Image.SCALE_SMOOTH);
                                id3.setIcon(new ImageIcon(image));
                            }
                        }
                        id3Name.setText(residentImpl.get(2).getFullName());
                        id3.setText("");
                    }   
                    if(id1Name.getText().trim().isEmpty() || id2Name.getText().trim().isEmpty() || id3Name.getText().trim().isEmpty()){
                        editButton.setEnabled(true);
                    } else {
                        editButton.setEnabled(false);
                    }
                    break;
            }
        } catch (RemoteException ex) {
//            Logger.getLogger(IFloorPlan.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        } catch (IOException ex) {
//            Logger.getLogger(IFloorPlan.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }
    
    private void setInventoryTable(){
        try {
            model.getDataVector().removeAllElements();
            model.fireTableDataChanged();
            for(FurnitureImpl furn : client.getAllFurnitureFromRoom(roomNumber.getText().trim())){
                model.addRow(new Object[]{
                    furn.getItem_name(),
                    furn.getControl_number(),
                    furn.getFurniture_id()
                });
            }
            for(GadgetImpl gad : client.getAllGadgetFromRoom(roomNumber.getText().trim())){
                model.addRow(new Object[]{
                    gad.getItem_name(),
                    gad.getSerial_number(),
                    gad.getFullname()
                });
            }
        } catch (RemoteException ex) {
//            Logger.getLogger(IFloorPlan.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }
    
    private void setReservationForRoom(){
        try {
            for(ReservationImpl res : client.getAllReservationsFromRoom(roomNumber.getText().trim())){
                if(id1Name.getText().trim().isEmpty()){
                    id1.setText("Reserved");
                    id1Name.setText(res.getFullName());
                } else if(id2Name.getText().trim().isEmpty()){
                    id2.setText("Reserved");
                    id2Name.setText(res.getFullName());
                } else if(id3Name.getText().trim().isEmpty()){
                    id3.setText("Reserved");
                    id3Name.setText(res.getFullName());
                }
            }
            if((id1.getText().equals("Vacant") && id1.isVisible()) || (id2.getText().equals("Vacant") && id2.isVisible()) || (id3.getText().equals("Vacant") && id3.isVisible())){
                reserveButton.setEnabled(true);
            } else {
                reserveButton.setEnabled(false);
            }
        } catch (RemoteException ex) {
//            Logger.getLogger(IFloorPlan.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }
    
    private void setTransients(String status) {
        try {
            for (String names : client.getTransientFromRoom(roomNumber.getText())) {
                if (id1Name.getText().trim().isEmpty()) {
                    id1.setText("Transient");
                    id1Name.setText(names);
                    id2.setVisible(false);
                    id2Name.setVisible(false);
                    id2NameLabel.setVisible(false);
                    id3.setVisible(false);
                    id3Name.setVisible(false);
                    id3NameLabel.setVisible(false);
                } else if (id2Name.getText().trim().isEmpty()) {
                    id2.setText("Transient");
                    id2Name.setText(names);
                    id3.setVisible(false);
                    id3Name.setVisible(false);
                    id3NameLabel.setVisible(false);
                } else if (id3Name.getText().trim().isEmpty()) {
                    id3.setText("Transient");
                    id3Name.setText(names);
                }
                break;
            }
            reserveButton.setEnabled(false);
            editButton.setEnabled(false);
            for (FurnitureImpl furn : client.getTransientFurnitureFromRoom(id1Name.getText(), currentRoom)) {
                model.addRow(new Object[]{
                    furn.getItem_name(),
                    furn.getControl_number(),
                    id1Name.getText()
                });
            }
        } catch (RemoteException ex) {
//            Logger.getLogger(IFloorPlan.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IFloorPlan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
        new IFloorPlan(new AccessibleServer()).setVisible(true);
        }
        });*/
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IFloorPlan(null, null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField capacity;
    private javax.swing.JLabel capacityLabel;
    private javax.swing.JLayeredPane detailsPane;
    private javax.swing.JPanel detailsPanel;
    private javax.swing.JLabel dormLabel;
    private javax.swing.JComboBox dormNumber;
    private javax.swing.JButton editButton;
    private javax.swing.JLabel id1;
    private javax.swing.JTextField id1Name;
    private javax.swing.JLabel id1NameLabel;
    private javax.swing.JLabel id2;
    private javax.swing.JTextField id2Name;
    private javax.swing.JLabel id2NameLabel;
    private javax.swing.JLabel id3;
    private javax.swing.JTextField id3Name;
    private javax.swing.JLabel id3NameLabel;
    private javax.swing.JLabel itemInventoryLabel;
    private javax.swing.JTable itemOwnerTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel r00;
    private javax.swing.JLabel r01;
    private javax.swing.JLabel r02;
    private javax.swing.JLabel r03;
    private javax.swing.JLabel r04;
    private javax.swing.JLabel r05;
    private javax.swing.JLabel r06;
    private javax.swing.JLabel r07;
    private javax.swing.JLabel r08;
    private javax.swing.JLabel r09;
    private javax.swing.JLabel r10;
    private javax.swing.JLabel r11;
    private javax.swing.JLabel r12;
    private javax.swing.JLabel r14;
    private javax.swing.JLabel r15;
    private javax.swing.JButton reserveButton;
    private javax.swing.JLabel roomLabel;
    private javax.swing.JTextField roomNumber;
    // End of variables declaration//GEN-END:variables
}
