
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.rmi.RemoteException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Mark Herbert Cabuang
 */
public class Transient_Form extends javax.swing.JFrame {

    /**
     * Creates new form Transient_Form
     */
    private DefaultTableModel tableModel = new DefaultTableModel();
    private ArrayList<TransientImpl> transientInfo;
    private final NPRInterface client;
    private String idNum = "";
    private String name = "";
    private String status = "";
    private String resident = "";
    private int row = 0;
    private final String user;
    private final MessageDialog md = new MessageDialog();
    private DecimalFormat df = new DecimalFormat("#,##0.00");
    

    /**
     * Creates new form Residents
     *
     * @param client
     */
    public Transient_Form(NPRInterface client, String user) {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons/Transient.png")));
        initComponents();
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(javax.swing.JLabel.RIGHT);
        transientTable.getColumnModel().getColumn(4).setCellRenderer(rightRenderer);
        this.client = client;
        this.user = user;
        setRow();
        popUp.add(checkOut);
        popUp.add(extend);
        sort();
    }
    
    private void sort() {
        tableModel = (DefaultTableModel) transientTable.getModel();
        transientTable.setRowSorter(new TableRowSorter(tableModel));
        int[] selection = transientTable.getSelectedRows();
        for (int i = 0; i < selection.length; i++) {
            selection[i] = transientTable.convertRowIndexToModel(selection[i]);
        }
    }

    private void setRow() {
        try {
            tableModel = (DefaultTableModel) transientTable.getModel();
            tableModel.getDataVector().removeAllElements();
            tableModel.fireTableDataChanged();
            transientInfo = client.getAllTransient();
            for (TransientImpl info : transientInfo) {
                String b = df.format(Double.parseDouble(info.getBalance()));
                if(Double.parseDouble(info.getBalance()) < 0){
                    b = "( " + df.format(Double.parseDouble(info.getBalance()) * -1) +" )";
                }
                tableModel.addRow(new Object[]{
                    info.getFull_name(),
                    info.getArrival(),
                    info.getDeparture(),
                    info.getTotalDays(),
                    b,
                    info.getStatus()
                });
            }
            transientTable.setModel(tableModel);
        } catch (RemoteException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Transient_Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popUp = new javax.swing.JPopupMenu();
        extend = new javax.swing.JMenuItem();
        checkOut = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        searchField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        transientTable = new javax.swing.JTable();
        filter = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        extend.setText("Extend / Add Guest");
        extend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extendActionPerformed(evt);
            }
        });
        popUp.add(extend);

        checkOut.setText("Checkout");
        checkOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutActionPerformed(evt);
            }
        });
        popUp.add(checkOut);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/monitoringsystem/181.jpg"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        jLabel1.setText("Filter by:");

        searchField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchFieldCaretUpdate(evt);
            }
        });

        transientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Date In", "Date Out", "No. of Days", "Balance", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        transientTable.setRowSelectionAllowed(false);
        transientTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                transientTableMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(transientTable);
        if (transientTable.getColumnModel().getColumnCount() > 0) {
            transientTable.getColumnModel().getColumn(0).setMinWidth(200);
            transientTable.getColumnModel().getColumn(0).setPreferredWidth(200);
            transientTable.getColumnModel().getColumn(0).setMaxWidth(200);
            transientTable.getColumnModel().getColumn(1).setResizable(false);
            transientTable.getColumnModel().getColumn(2).setResizable(false);
            transientTable.getColumnModel().getColumn(3).setResizable(false);
            transientTable.getColumnModel().getColumn(4).setResizable(false);
            transientTable.getColumnModel().getColumn(5).setResizable(false);
        }

        filter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All Transient", "Active", "Extend" }));
        filter.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        filter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                filterItemStateChanged(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Prev.png"))); // NOI18N
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/help.png"))); // NOI18N
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(680, 680, 680))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 573, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38)))
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(8, 8, 8)
                                .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10)
                                .addComponent(searchField)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(filter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void transientTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transientTableMouseReleased
        try {
            if (evt.isPopupTrigger()) {
                status = transientTable.getValueAt(transientTable.getSelectedRow(), 5).toString();
//                if (status.equalsIgnoreCase("Active")) {
                    checkOut.setEnabled(true);
                    extend.setEnabled(true);
//                } else {
//                    checkOut.setEnabled(true);
//                    extend.setEnabled(false);
//                }
                javax.swing.JTable source = (javax.swing.JTable) evt.getSource();
                row = source.rowAtPoint(evt.getPoint());
                int column = source.columnAtPoint(evt.getPoint());
                if (!source.isRowSelected(row)) {
                    source.changeSelection(row, column, false, false);
                }
                popUp.show(evt.getComponent(), evt.getX(), evt.getY());
            }

        } catch (IndexOutOfBoundsException e) {
            md.error(this, e.getMessage());
        }

    }//GEN-LAST:event_transientTableMouseReleased

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        this.dispose();
        new Main(client, user).setVisible(true);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void checkOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutActionPerformed
//        if (JOptionPane.showConfirmDialog(null, "Are you sure the transient will checkout?", "Confirmation",
//                JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
//            try {
//                String selectedName = transientTable.getValueAt(transientTable.getSelectedRow(), 0).toString();
//                if (client.updateTransientStatus("Checkout", client.getTransientId(selectedName))) {
//                    boolean tester = true;
//                    for (String room : client.getRoomsFromTransient(client.getTransientId(selectedName))) {
//                        if (!client.updateRoomStatusFromTransient(room, "unoccupied")) {
//                            JOptionPane.showMessageDialog(null, "Room(s) update failed!", "Failed", JOptionPane.ERROR_MESSAGE);
//                            tester = false;
//                            break;
//                        } else if (client.removeFurniture(room)) {
//                            JOptionPane.showMessageDialog(null, "Furniture(s) update failed!", "Failed", JOptionPane.ERROR_MESSAGE);
//                            tester = false;
//                            break;
//                        } else {
//                            tester = true;
//                        }
//                    }
//                    if (tester) {
//                        JOptionPane.showMessageDialog(null, "Transient was Checkout!", "Success", JOptionPane.INFORMATION_MESSAGE);
//                        setRow();
//                    } else {
//                        JOptionPane.showMessageDialog(null, "Checkout failed!", "Failed", JOptionPane.WARNING_MESSAGE);
//                        setRow();
//                    }
//                } else {
//                    JOptionPane.showMessageDialog(null, "SQLError!", "Error", JOptionPane.ERROR_MESSAGE);
//                }
//            } catch (RemoteException ex) {
//                JOptionPane.showMessageDialog(null, "Error!", "Error", JOptionPane.ERROR_MESSAGE);
//                Logger.getLogger(Transient_Form.class.getName()).log(Level.SEVERE, null, ex);
//            }
//            filter.setSelectedItem("All Transient");
//        }
        try {
            String transientIdnum = client.getTransientId(transientTable.getValueAt(transientTable.getSelectedRow(), 0).toString());
            new CheckoutTransient(this, true,client, transientIdnum,transientTable.getValueAt(transientTable.getSelectedRow(), 0).toString(), user).setVisible(true);
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    setRow();
                }
            });
        } catch (RemoteException ex) {
//            Logger.getLogger(Transient_Form.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }//GEN-LAST:event_checkOutActionPerformed

    private void extendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extendActionPerformed
        String selectedName = transientTable.getValueAt(transientTable.getSelectedRow(), 0).toString();
        try {
            new Registration_Transient(client, client.getTransientId(selectedName), "transient_form", user).setVisible(true);
        } catch (RemoteException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Transient_Form.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }//GEN-LAST:event_extendActionPerformed

    private void filterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_filterItemStateChanged
        try {
            String str = filter.getSelectedItem().toString();

            switch (str) {
                case "Active":
                    tableModel = (DefaultTableModel) transientTable.getModel();
                    tableModel.getDataVector().removeAllElements();
                    tableModel.fireTableDataChanged();
                    transientInfo = client.getAllTransientByStatus("Active");
                    for (TransientImpl info : transientInfo) {
                        String b = info.getBalance();
                        if(Double.parseDouble(info.getBalance()) < 0){
                            b = "( " + df.format(Double.parseDouble(info.getBalance()) * -1) +" )";
                        }
                        tableModel.addRow(new Object[]{
                            info.getFull_name(),
                            info.getArrival(),
                            info.getDeparture(),
                            info.getTotalDays(),
                            b,
                            info.getStatus()
                        });
                    }
                    break;
                    
                case "Extend":
                    tableModel = (DefaultTableModel) transientTable.getModel();
                    tableModel.getDataVector().removeAllElements();
                    tableModel.fireTableDataChanged();
                    transientInfo = client.getAllTransientByStatus("Extend");
                    for (TransientImpl info : transientInfo) {
                        String b = info.getBalance();
                        if(Double.parseDouble(info.getBalance()) < 0){
                            b = "( " + df.format(Double.parseDouble(info.getBalance()) * -1) +" )";
                        }
                        tableModel.addRow(new Object[]{
                            info.getFull_name(),
                            info.getArrival(),
                            info.getDeparture(),
                            info.getTotalDays(),
                            b,
                            info.getStatus()
                        });
                    }
                    break;

                default:
                    setRow();
                    break;
            }
        } catch (RemoteException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Transient_Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_filterItemStateChanged

    private void searchFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchFieldCaretUpdate
        try {
            if (searchField.getText().length() > 0) {
                String str = filter.getSelectedItem().toString();

                switch (str) {
                    case "Active":
                        tableModel = (DefaultTableModel) transientTable.getModel();
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        transientInfo = client.getAllTransientByName("Active", searchField.getText());
                        for (TransientImpl info : transientInfo) {
                            String b = info.getBalance();
                            if (Double.parseDouble(info.getBalance()) < 0) {
                                b = "( " + df.format(Double.parseDouble(info.getBalance()) * -1) + " )";
                            }
                            tableModel.addRow(new Object[]{
                                info.getFull_name(),
                                info.getArrival(),
                                info.getDeparture(),
                                info.getTotalDays(),
                                b,
                                info.getStatus()
                            });
                        }
                        break;
                        
                    case "Extend":
                        tableModel = (DefaultTableModel) transientTable.getModel();
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        transientInfo = client.getAllTransientByName("Extend", searchField.getText());
                        for (TransientImpl info : transientInfo) {
                            String b = info.getBalance();
                            if (Double.parseDouble(info.getBalance()) < 0) {
                                b = "( " + df.format(Double.parseDouble(info.getBalance()) * -1) + " )";
                            }
                            tableModel.addRow(new Object[]{
                                info.getFull_name(),
                                info.getArrival(),
                                info.getDeparture(),
                                info.getTotalDays(),
                                b,
                                info.getStatus()
                            });
                        }
                        break;

                    default:
                        tableModel = (DefaultTableModel) transientTable.getModel();
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        transientInfo = client.getAllTransientByName("", searchField.getText());
                        for (TransientImpl info : transientInfo) {
                            String b = info.getBalance();
                            if (Double.parseDouble(info.getBalance()) < 0) {
                                b = "( " + df.format(Double.parseDouble(info.getBalance()) * -1) + " )";
                            }
                            tableModel.addRow(new Object[]{
                                info.getFull_name(),
                                info.getArrival(),
                                info.getDeparture(),
                                info.getTotalDays(),
                                b,
                                info.getStatus()
                            });
                        }
                        break;
                }
            } else {
                String str = filter.getSelectedItem().toString();

                switch (str) {
                    case "Active":
                        tableModel = (DefaultTableModel) transientTable.getModel();
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        transientInfo = client.getAllTransientByStatus("Active");
                        for (TransientImpl info : transientInfo) {
                            String b = info.getBalance();
                            if (Double.parseDouble(info.getBalance()) < 0) {
                                b = "( " + df.format(Double.parseDouble(info.getBalance()) * -1) + " )";
                            }
                            tableModel.addRow(new Object[]{
                                info.getFull_name(),
                                info.getArrival(),
                                info.getDeparture(),
                                info.getTotalDays(),
                                b,
                                info.getStatus()
                            });
                        }
                        break;
                        
                    case "Extend":
                        tableModel = (DefaultTableModel) transientTable.getModel();
                        tableModel.getDataVector().removeAllElements();
                        tableModel.fireTableDataChanged();
                        transientInfo = client.getAllTransientByStatus("Extend");
                        for (TransientImpl info : transientInfo) {
                            String b = info.getBalance();
                            if (Double.parseDouble(info.getBalance()) < 0) {
                                b = "( " + df.format(Double.parseDouble(info.getBalance()) * -1) + " )";
                            }
                            tableModel.addRow(new Object[]{
                                info.getFull_name(),
                                info.getArrival(),
                                info.getDeparture(),
                                info.getTotalDays(),
                                b,
                                info.getStatus()
                            });
                        }
                        break;

                    default:
                        setRow();
                        break;
                }
            }

        } catch (RemoteException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Transient_Form.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchFieldCaretUpdate

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        try {
            String path = "";
            BufferedReader br = new BufferedReader(new FileReader("dir\\docs.txt"));
            try {
                StringBuilder sb = new StringBuilder();
                String line = br.readLine();

                while (line != null) {
                    sb.append(line);
                    sb.append(System.lineSeparator());
                    line = br.readLine();
                }
                path = sb.toString().trim();
            } catch (IOException ex) {
//                Logger.getLogger(AdminArchiveFrame.class.getName()).log(Level.SEVERE, null, ex);
                new MessageDialog().error(this, ex.getMessage());
            } finally {
                br.close();
            }
            Desktop.getDesktop().browse(new File(path).toURI());
        } catch (IOException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Registration_Transient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel3MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Transient_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Transient_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Transient_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Transient_Form.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Transient_Form(null,null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem checkOut;
    private javax.swing.JMenuItem extend;
    private javax.swing.JComboBox filter;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPopupMenu popUp;
    private javax.swing.JTextField searchField;
    private javax.swing.JTable transientTable;
    // End of variables declaration//GEN-END:variables
}
