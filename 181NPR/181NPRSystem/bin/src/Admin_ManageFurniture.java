
import java.awt.Component;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Jefren
 */
public class Admin_ManageFurniture extends javax.swing.JFrame {
    private DefaultTableModel tableModel = new DefaultTableModel();
    private ArrayList<FurnitureImpl> furnitureInfo;
    private final NPRInterface client;
    private TableColumn tc;
    private final String user;
    private final MessageDialog md = new MessageDialog();
    /**
     * Creates new form Admin_ManageFurniture
     * @param client
     */
    public Admin_ManageFurniture(NPRInterface client, String user) {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons/Manage Furniture.png")));
        initComponents();
        this.client = client;
        this.user = user;
        edit.setEnabled(false);
        delete.setEnabled(false);
        tableModel = (DefaultTableModel) furnitureTable.getModel();
        searchFunction();
        setComboBoxes();
        
        TableColumn tc = furnitureTable.getColumnModel().getColumn(0);
        tc.setCellEditor(furnitureTable.getDefaultEditor(Boolean.class));
        tc.setCellRenderer(furnitureTable.getDefaultRenderer(Boolean.class));
        tc.setHeaderRenderer(new CheckBoxHeader(new MyItemListener()));
    }
    
    private void setComboBoxes(){
        try {
            ArrayList<String> item1 = client.getFurnituresItems();
            for (String i : item1) {
                itemName.addItem(i);
            }
        } catch (RemoteException ex) {
//            Logger.getLogger(Admin_ManageFurniture.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        jPanel1 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        furnitureTable = new javax.swing.JTable();
        delete = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        add = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        itemName = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        search = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/monitoringsystem/181.jpg"))); // NOI18N

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Previous.png"))); // NOI18N
        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        furnitureTable.setAutoCreateRowSorter(true);
        furnitureTable.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        furnitureTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "", "Item Name", "Control Number", "Purchase Date", "Brand", "Room", "Resident"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        furnitureTable.getTableHeader().setReorderingAllowed(false);
        furnitureTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                furnitureTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(furnitureTable);
        if (furnitureTable.getColumnModel().getColumnCount() > 0) {
            furnitureTable.getColumnModel().getColumn(0).setMinWidth(20);
            furnitureTable.getColumnModel().getColumn(0).setPreferredWidth(20);
            furnitureTable.getColumnModel().getColumn(0).setMaxWidth(20);
        }

        delete.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        delete.setText("Delete");
        delete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        edit.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        edit.setText("Edit");
        edit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        add.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        add.setText("Add");
        add.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel3.setText("Item Name:");

        itemName.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        itemName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        itemName.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        itemName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                itemNameItemStateChanged(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel4.setText("Search:");

        search.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        search.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                searchCaretUpdate(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(add)
                                .addGap(18, 18, 18)
                                .addComponent(edit)
                                .addGap(18, 18, 18)
                                .addComponent(delete))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(itemName, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(search))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 740, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(itemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(delete)
                    .addComponent(edit)
                    .addComponent(add))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        this.dispose();
        new Administrator(client, user).setVisible(true);
    }//GEN-LAST:event_jLabel2MouseClicked

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        this.dispose();
        new AddFurniture(client,user).setVisible(true);
    }//GEN-LAST:event_addActionPerformed

    private void itemNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_itemNameItemStateChanged
        searchFunction();
    }//GEN-LAST:event_itemNameItemStateChanged

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete these furniture(s)?", "Confirmation", JOptionPane.YES_NO_OPTION)
                == JOptionPane.YES_OPTION) {
            boolean test = true;
            tableModel = (DefaultTableModel) furnitureTable.getModel();
            for (int count = 0; count < tableModel.getRowCount(); count++) {
                if (((Boolean) tableModel.getValueAt(count, 0))) {
                    try {
                        if (!client.deleteFurniture(tableModel.getValueAt(count, 2).toString())) {
                            md.unsuccessful(this);
                            test = false;
                            break;
                        }
                    } catch (RemoteException ex) {
                        md.error(this, ex.getMessage());
//                        Logger.getLogger(Admin_ManageFurniture.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            if (test) {
                md.successful(this);
                searchFunction();
            }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        try {
            tableModel = (DefaultTableModel) furnitureTable.getModel();
            ArrayList<String> items = new ArrayList<>();
            for (int count = 0; count < tableModel.getRowCount(); count++) {
                if (((Boolean) tableModel.getValueAt(count, 0))) {
                    if(tableModel.getValueAt(count, 2) != null){
                        items.add(tableModel.getValueAt(count, 2).toString());
                    } else {
                        items.add("");
                    }
                }
            }
            new AddFurniture(client, items, user).setVisible(true);
            this.dispose();
        } catch (RemoteException | ParseException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Admin_ManageFurniture.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_editActionPerformed

    private void furnitureTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_furnitureTableMouseClicked
        tableModel = (DefaultTableModel) furnitureTable.getModel();
        int c = 0;
        for (int count = 0; count < tableModel.getRowCount(); count++) {
            if (!((Boolean) tableModel.getValueAt(count, 0))) {
                c++;
            }
        }
        if (c != tableModel.getRowCount()) {
            edit.setEnabled(true);
            delete.setEnabled(true);
        } else {
            edit.setEnabled(false);
            delete.setEnabled(false);
        }
    }//GEN-LAST:event_furnitureTableMouseClicked

    private void searchCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_searchCaretUpdate
        searchFunction();
    }//GEN-LAST:event_searchCaretUpdate

    private void searchFunction() {
        try {
            tableModel = (DefaultTableModel) furnitureTable.getModel();
            if(search.getText().length() != 0){
                tableModel.getDataVector().removeAllElements();
                tableModel.fireTableDataChanged();
                furnitureInfo = client.getAllFurnituresForSearch(
                        itemName.getSelectedItem().toString().trim(), 
                        search.getText());
                for (FurnitureImpl info : furnitureInfo) {
                    String dateF = "";
                    if (info.getPurchaseDate().length() != 0) {
                        SimpleDateFormat oldFormat = new SimpleDateFormat("yyyy-MM-dd");
                        java.util.Date utilDate = oldFormat.parse(info.getPurchaseDate());
                        SimpleDateFormat newFormat = new SimpleDateFormat("MMMM d, yyyy");
                        dateF = newFormat.format(utilDate);
                        utilDate = newFormat.parse(dateF);
                        java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
                        dateF = newFormat.format(sqlDate);
                    }
                    tableModel.addRow(new Object[]{
                        false,
                        info.getItem_name(),
                        info.getControl_number(),
                        dateF,
                        info.getBrand(),
                        info.getRoom(),
                        info.getResident()

                    });
                }
                furnitureTable.setModel(tableModel);
            } else {
                tableModel.getDataVector().removeAllElements();
                tableModel.fireTableDataChanged();
                furnitureInfo = client.getAllFurnituresForSearch(
                        itemName.getSelectedItem().toString().trim(), "");
                for (FurnitureImpl info : furnitureInfo) {
                    String dateF = "";
                    if (info.getPurchaseDate().length() != 0) {
                        SimpleDateFormat oldFormat = new SimpleDateFormat("yyyy-MM-dd");
                        java.util.Date utilDate = oldFormat.parse(info.getPurchaseDate());
                        SimpleDateFormat newFormat = new SimpleDateFormat("MMMM d, yyyy");
                        dateF = newFormat.format(utilDate);
                        utilDate = newFormat.parse(dateF);
                        java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
                        dateF = newFormat.format(sqlDate);
                    }
                    
                    tableModel.addRow(new Object[]{
                        false,
                        info.getItem_name(),
                        info.getControl_number(),
                        dateF,
                        info.getBrand(),
                        info.getRoom(),
                        info.getResident()

                    });
                }
                furnitureTable.setModel(tableModel);
            }            
        } catch (RemoteException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Admin_ManageFurniture.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            md.error(this, ex.getMessage());
//            Logger.getLogger(Admin_ManageFurniture.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    class MyItemListener implements ItemListener {

        @Override
        public void itemStateChanged(ItemEvent e) {
            Object source = e.getSource();
            if (source instanceof AbstractButton == false) {
                return;
            }
            boolean checked = e.getStateChange() == ItemEvent.SELECTED;
            edit.setEnabled(checked);
            delete.setEnabled(checked);
            for (int x = 0, y = tableModel.getRowCount(); x < y; x++) {
                tableModel.setValueAt(new Boolean(checked), x, 0);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Admin_ManageFurniture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Admin_ManageFurniture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Admin_ManageFurniture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Admin_ManageFurniture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Admin_ManageFurniture(null,null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JTable furnitureTable;
    private javax.swing.JComboBox itemName;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField search;
    // End of variables declaration//GEN-END:variables
}

class CheckBoxHeader extends JCheckBox
        implements TableCellRenderer, MouseListener {

    protected CheckBoxHeader rendererComponent;
    protected int column;
    protected boolean mousePressed = false;

    public CheckBoxHeader(ItemListener itemListener) {
        rendererComponent = this;
        rendererComponent.addItemListener(itemListener);
    }

    @Override
    public Component getTableCellRendererComponent(
            JTable table, Object value,
            boolean isSelected, boolean hasFocus, int row, int column) {
        if (table != null) {
            JTableHeader header = table.getTableHeader();
            if (header != null) {
                rendererComponent.setForeground(header.getForeground());
                rendererComponent.setBackground(header.getBackground());
                rendererComponent.setFont(header.getFont());
                header.addMouseListener(rendererComponent);
            }
        }
        setColumn(column);
        rendererComponent.setText("Check All");
        setBorder(UIManager.getBorder("TableHeader.cellBorder"));
        return rendererComponent;
    }

    protected void setColumn(int column) {
        this.column = column;
    }

    public int getColumn() {
        return column;
    }

    protected void handleClickEvent(MouseEvent e) {
        if (mousePressed) {
            mousePressed = false;
            JTableHeader header = (JTableHeader) (e.getSource());
            JTable tableView = header.getTable();
            TableColumnModel columnModel = tableView.getColumnModel();
            int viewColumn = columnModel.getColumnIndexAtX(e.getX());
            int column = tableView.convertColumnIndexToModel(viewColumn);

            if (viewColumn == this.column && e.getClickCount() == 1 && column != -1) {
                doClick();
            }
        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        handleClickEvent(e);
        ((JTableHeader) e.getSource()).repaint();
    }

    @Override
    public void mousePressed(MouseEvent e) {
        mousePressed = true;
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }
}
