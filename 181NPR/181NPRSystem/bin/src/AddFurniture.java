
import java.awt.Toolkit;
import java.rmi.RemoteException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Jefren
 */
public class AddFurniture extends javax.swing.JFrame {
    private DefaultTableModel tableModel = new DefaultTableModel();
    private final NPRInterface client;
    private ArrayList<String> furnitures;
    private final String user;
    private final MessageDialog md = new MessageDialog();

    /**
     * Creates new form AddFurniture
     * @param client
     */
    public AddFurniture(NPRInterface client, String user) {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons/Administrator.png")));
        initComponents();
        this.client = client;
        this.user = user;
        tableModel = (DefaultTableModel) furnitureTable.getModel();
        try {
            jLabel1.setVisible(true);
            jSpinner1.setVisible(true);
            title.setText("Add Furniture");
            tableModel.setRowCount(Integer.parseInt("" + jSpinner1.getValue()));
            setColumn();
        } catch (RemoteException ex) {
//            Logger.getLogger(AddFurniture.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }

    private void setColumn() throws RemoteException {
        TableColumn column = furnitureTable.getColumnModel().getColumn(5);
        ArrayList<String> room = client.getAllRooms();
        rooms.addItem("None");
        for (String r : room) {
            rooms.addItem(r);
        }
        column.setCellEditor(new DefaultCellEditor(rooms));
    }
    
    public AddFurniture(NPRInterface client, ArrayList<String> furnitures, String user) throws RemoteException, ParseException {
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons/Administrator.png")));
        initComponents();
        this.client = client;
        this.furnitures = furnitures;
        this.user = user;
        tableModel = (DefaultTableModel) furnitureTable.getModel();
        TableColumn column = furnitureTable.getColumnModel().getColumn(5);
        ArrayList<String> room = client.getAllRooms();
        rooms.addItem("None");
        for (String r : room) {
            rooms.addItem(r);
        }
        column.setCellEditor(new DefaultCellEditor(rooms));
        tableModel.getDataVector().removeAllElements();
        tableModel.fireTableDataChanged();
        jLabel1.setVisible(false);
        jSpinner1.setVisible(false);
        title.setText("Edit Furniture");
        for (String f : furnitures) {
            String dateF = "";
            ArrayList<String> item = client.getFurnitureFromCtrlNo(f);
            if(item.get(3) != null){
                SimpleDateFormat oldFormat = new SimpleDateFormat("yyyy-MM-dd");
                java.util.Date utilDate = oldFormat.parse(item.get(3));
                SimpleDateFormat newFormat = new SimpleDateFormat("MMMM d, yyyy");
                dateF = newFormat.format(utilDate);
                utilDate = newFormat.parse(dateF);
                java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
                dateF = newFormat.format(sqlDate);
            }
            
            tableModel.addRow(new Object[]{
                item.get(0),
                item.get(1),
                item.get(2),
                dateF,
                item.get(4),
                item.get(5)
            });
        }
        furnitureTable.setModel(tableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooserCombo1 = new datechooser.beans.DateChooserCombo();
        rooms = new javax.swing.JComboBox();
        purchaseDate = new javax.swing.JFormattedTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        furnitureTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        title = new javax.swing.JLabel();

        dateChooserCombo1.setFormat(1);

        rooms.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N

        purchaseDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.LONG))));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        furnitureTable.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        furnitureTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "Item Name", "Color", "Control Number", "Purchase Date(MMMM d, yyyy)", "Brand", "Room"
            }
        ));
        furnitureTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(furnitureTable);

        jLabel1.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jLabel1.setText("Furniture count:");

        jSpinner1.setFont(new java.awt.Font("Rondalo", 0, 12)); // NOI18N
        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Rondalo", 0, 11)); // NOI18N
        jButton1.setText("Cancel");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Rondalo", 0, 11)); // NOI18N
        jButton2.setText("Save");
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        title.setFont(new java.awt.Font("Rondalo", 0, 24)); // NOI18N
        title.setText("Add/Edit Furniture");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 838, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(title))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(title))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        new Admin_ManageFurniture(client,user).setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        tableModel = (DefaultTableModel) furnitureTable.getModel();
        tableModel.setNumRows(Integer.parseInt("" + jSpinner1.getValue()));
        furnitureTable.setModel(tableModel);
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (md.confirmationSave(this) == md.YES) {
            tableModel = (DefaultTableModel) furnitureTable.getModel();
            if (title.getText().contains("Add Furniture")) {
                boolean test = true;
                for (int c = 0; c < tableModel.getRowCount(); c++) {
                    try {
                        ArrayList<String> item = new ArrayList<>();
                        if(tableModel.getValueAt(c, 2) != null){
                            item.add(tableModel.getValueAt(c, 2).toString());
                        } else {
                            String mes = "Control Number cannot be empty\nSuccessful: "+ (c)+"\nUnsuccessful: " +(furnitureTable.getRowCount()-c);
                            md.error(this, mes);
                            test = false;
                            break;
                        }
                        if(tableModel.getValueAt(c, 1) != null){
                            item.add(tableModel.getValueAt(c, 1).toString());
                        } else {
                            item.add(null);
                        }
                        if(tableModel.getValueAt(c, 4) != null){
                            item.add(tableModel.getValueAt(c, 4).toString());
                        } else {
                            item.add(null);
                        }
                        if(tableModel.getValueAt(c, 3) != null){
                            item.add(tableModel.getValueAt(c, 3).toString());
                        } else {
                            item.add(null);
                        }
                        if(tableModel.getValueAt(c, 0) != null){
                            item.add(tableModel.getValueAt(c, 0).toString());
                        } else {
                            String mes = "Item Name cannot be empty\nSuccessful: "+ (c+1)+"\nUnsuccessful: " +(furnitureTable.getRowCount()-c+1);
                            md.error(this, mes);
                            test = false;
                            break;
                        }
                        if (tableModel.getValueAt(c, 5) != null) {
                            if (!tableModel.getValueAt(c, 5).toString().equals("None")) {
                                item.add(tableModel.getValueAt(c, 5).toString());
                            } else {
                                item.add(null);
                            }
                        } else {
                            item.add(null);
                        }
                        if (!client.insertFurniture(item)) {
                            md.error(this, "Not Saved!");
                            test = false;
                            break;
                        }
                    } catch (RemoteException ex) {
                        md.error(this, ex.getMessage());
//                        Logger.getLogger(AddFurniture.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if (test) {
                    md.successful(this);
                    new Admin_ManageFurniture(client,user).setVisible(true);
                    this.dispose();
                }
            } else {
                boolean test = true;
                for (int c = 0; c < tableModel.getRowCount(); c++) {
                    try {
                        ArrayList<String> item = new ArrayList<>();
                        item.add(tableModel.getValueAt(c, 2).toString());
                        if(tableModel.getValueAt(c, 1) != null){
                            item.add(tableModel.getValueAt(c, 1).toString());
                        } else {
                            item.add(null);
                        }
                        if(tableModel.getValueAt(c, 4) != null){
                            item.add(tableModel.getValueAt(c, 4).toString());
                        } else {
                            item.add(null);
                        }
                        if(tableModel.getValueAt(c, 3) != null){
                            item.add(tableModel.getValueAt(c, 3).toString());
                        } else {
                            item.add(null);
                        }
                        item.add(tableModel.getValueAt(c, 0).toString());
                        if(tableModel.getValueAt(c, 5) != null){
                            item.add(tableModel.getValueAt(c, 5).toString());
                        } else {
                            item.add(null);
                        }
                        if (!client.updateFurniture(furnitures.get(c), item)) {
                            md.error(this, "Not saved!");
                            test = false;
                            break;
                        }
                    } catch (RemoteException ex) {
                        md.error(this, ex.getMessage());
//                        Logger.getLogger(AddFurniture.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if (test) {
                    md.successful(this);
                    new Admin_ManageFurniture(client,user).setVisible(true);
                    this.dispose();
                }
            }
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddFurniture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddFurniture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddFurniture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddFurniture.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddFurniture(null,null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private datechooser.beans.DateChooserCombo dateChooserCombo1;
    private javax.swing.JTable furnitureTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JFormattedTextField purchaseDate;
    private javax.swing.JComboBox rooms;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}

//class DateRenderer extends DefaultTableCellRenderer {
//
//    @Override
//    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
//        super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
//        if ((value != null) && (value instanceof Date)) {
//            String strDate = new SimpleDateFormat("MMMM d, yyyy").format((Date) value);
//            this.setText(strDate);
//        } else {
//            if(value != null){
//                JOptionPane.showMessageDialog(null, "Not a date!", "Warning!", JOptionPane.WARNING_MESSAGE);
//                this.setText("");
//            }
//        }
//        return this;
//    }
//}
