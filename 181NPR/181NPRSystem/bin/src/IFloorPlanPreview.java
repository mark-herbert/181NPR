
import java.awt.Color;
import java.rmi.RemoteException;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextField;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Kenneth
 */
public class IFloorPlanPreview extends javax.swing.JFrame {

    /**
     * Creates new form HTMLCode
     */
    //private Component[] component = null;
    private final NPRInterface client;
    private ArrayList<String> resultSet;
    private JTextField numberOfRooms = new JTextField();
    private JTextField parentRoomNumber = new JTextField();
    private JComboBox parent = new JComboBox();
    private DatabaseConnection database = new DatabaseConnection();
    private ResultSet result;
    private ArrayList<RoomImpl> roomImpl;
    private final String base;
    
    public IFloorPlanPreview(){
        base = null;
        client = null;
    }
    public IFloorPlanPreview(JTextField numberOfRooms, JTextField roomNumber,NPRInterface client) {
        initComponents();
        ImagePanel panel = new ImagePanel(new ImageIcon(getClass().getResource("/floorplan.jpg")).getImage());
        jPanel1.add(panel);
        this.client = client;
        this.numberOfRooms = numberOfRooms;
        this.parentRoomNumber = roomNumber;
        roomInfo();
        base = "transient";
    }
    
    public IFloorPlanPreview(JComboBox parent, NPRInterface client) {
        initComponents();
        ImagePanel panel = new ImagePanel(new ImageIcon(getClass().getResource("/floorplan.jpg")).getImage());
        jPanel1.add(panel);
        this.client = client;
        this.parent = parent;
        roomInfo();
        base = "others";
    }
    
    public IFloorPlanPreview(JTextField parent, NPRInterface client, JTextField roomType) {
        initComponents();
        ImagePanel panel = new ImagePanel(new ImageIcon(getClass().getResource("/floorplan.jpg")).getImage());
        jPanel1.add(panel);
        this.client = client;
        this.numberOfRooms = roomType;
        this.parentRoomNumber = parent;
        roomInfo();
        base = "reg";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        dormNumber = new javax.swing.JComboBox();
        dormLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        r14 = new javax.swing.JLabel();
        r11 = new javax.swing.JLabel();
        r09 = new javax.swing.JLabel();
        r07 = new javax.swing.JLabel();
        r06 = new javax.swing.JLabel();
        r05 = new javax.swing.JLabel();
        r04 = new javax.swing.JLabel();
        r03 = new javax.swing.JLabel();
        r02 = new javax.swing.JLabel();
        r00 = new javax.swing.JLabel();
        r01 = new javax.swing.JLabel();
        r08 = new javax.swing.JLabel();
        r10 = new javax.swing.JLabel();
        r12 = new javax.swing.JLabel();
        r15 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Floor Plan");
        setUndecorated(true);
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        dormNumber.setFont(new java.awt.Font("Rondalo", 0, 14)); // NOI18N
        dormNumber.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        dormNumber.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        dormNumber.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dormNumberItemStateChanged(evt);
            }
        });

        dormLabel.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        dormLabel.setText("DORM:");

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPanel1MouseClicked(evt);
            }
        });

        r14.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r14.setText("214");
        r14.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r14MouseClicked(evt);
            }
        });

        r11.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r11.setText("211");
        r11.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r11MouseClicked(evt);
            }
        });

        r09.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r09.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r09.setText("209");
        r09.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r09.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r09MouseClicked(evt);
            }
        });

        r07.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r07.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r07.setText("207");
        r07.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r07.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r07MouseClicked(evt);
            }
        });

        r06.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r06.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r06.setText("206");
        r06.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r06.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r06MouseClicked(evt);
            }
        });

        r05.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r05.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r05.setText("205");
        r05.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r05.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r05MouseClicked(evt);
            }
        });

        r04.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r04.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r04.setText("204");
        r04.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r04.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r04MouseClicked(evt);
            }
        });

        r03.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r03.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r03.setText("203");
        r03.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r03.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r03MouseClicked(evt);
            }
        });

        r02.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r02.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r02.setText("202");
        r02.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r02.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r02MouseClicked(evt);
            }
        });

        r00.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r00.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r00.setText("200");
        r00.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r00.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r00MouseClicked(evt);
            }
        });

        r01.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r01.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r01.setText("201");
        r01.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r01.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r01MouseClicked(evt);
            }
        });

        r08.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r08.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r08.setText("208");
        r08.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r08.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r08MouseClicked(evt);
            }
        });

        r10.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r10.setText("210");
        r10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r10MouseClicked(evt);
            }
        });

        r12.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r12.setText("212");
        r12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r12MouseClicked(evt);
            }
        });

        r15.setFont(new java.awt.Font("Rondalo", 1, 14)); // NOI18N
        r15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        r15.setText("215");
        r15.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        r15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                r15MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(r14, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r15, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r11, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r12, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r09, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r10, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(r07, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r06, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(r05, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r04, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(r08, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(r01, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(r03, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(r02, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(r00, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(r11, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r09, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r07, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r06, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r05, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r04, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r03, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r02, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r00, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r15, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(r01, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r08, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r10, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r12, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(r14, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(126, Short.MAX_VALUE))
        );

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Prev.png"))); // NOI18N
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/monitoringsystem/iFloorPlan.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(dormLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dormNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(152, 152, 152)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dormLabel)
                        .addComponent(dormNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void dormNumberItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dormNumberItemStateChanged
        roomInfo();
    }//GEN-LAST:event_dormNumberItemStateChanged

    private void r14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r14MouseClicked
        setRooms(r14);
    }//GEN-LAST:event_r14MouseClicked

    private void r01MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r01MouseClicked
        setRooms(r01);
    }//GEN-LAST:event_r01MouseClicked

    private void r02MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r02MouseClicked
        setRooms(r02);
    }//GEN-LAST:event_r02MouseClicked

    private void r03MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r03MouseClicked
        setRooms(r03);
    }//GEN-LAST:event_r03MouseClicked

    private void r04MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r04MouseClicked
        setRooms(r04);
    }//GEN-LAST:event_r04MouseClicked

    private void r05MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r05MouseClicked
        setRooms(r05);
    }//GEN-LAST:event_r05MouseClicked

    private void r06MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r06MouseClicked
        setRooms(r06);
    }//GEN-LAST:event_r06MouseClicked

    private void r07MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r07MouseClicked
        setRooms(r07);
    }//GEN-LAST:event_r07MouseClicked

    private void r08MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r08MouseClicked
        setRooms(r08);
    }//GEN-LAST:event_r08MouseClicked

    private void r09MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r09MouseClicked
        setRooms(r09);
    }//GEN-LAST:event_r09MouseClicked

    private void r10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r10MouseClicked
        setRooms(r10);
    }//GEN-LAST:event_r10MouseClicked

    private void r11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r11MouseClicked
        setRooms(r11);
    }//GEN-LAST:event_r11MouseClicked

    private void r12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r12MouseClicked
        setRooms(r12);
    }//GEN-LAST:event_r12MouseClicked

    private void r15MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r15MouseClicked
        setRooms(r15);
    }//GEN-LAST:event_r15MouseClicked

    private void jPanel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1MouseClicked

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void r00MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_r00MouseClicked
        setRooms(r00);
    }//GEN-LAST:event_r00MouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        setToolTipJava();
    }//GEN-LAST:event_formWindowOpened

    private void setToolTipJava(){
        try {
            int number = 0;
            resultSet = client.getRooms(Integer.parseInt(dormNumber.getSelectedItem().toString()));
            roomImpl = client.getNumberOfOccupants();
            int numOfRes = 0;
            int numOfTrans = 0;
            if(resultSet != null){
                for(String res : resultSet){
                    String[] col = res.split(",");
                    switch(col[0].substring(1,3)){
                        case "00":
                            for(RoomImpl n : roomImpl){
                                if(r00.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r00.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r00.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r00.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r00.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r00.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r00.setToolTipText("Reserved for Transient");
                                }
                            }
                            r00.setForeground(color(col[1]));
                            break;
                        case "01":
                            for(RoomImpl n : roomImpl){
                                if(r01.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r01.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r01.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r01.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r02.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r01.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r01.setToolTipText("Reserved for Transient");
                                }
                            }
                            r01.setForeground(color(col[1]));
                            break;
                        case "02":
                            for(RoomImpl n : roomImpl){
                                if(r02.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r02.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r02.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r02.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r02.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r02.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r02.setToolTipText("Reserved for Transient");
                                }
                            }
                            r02.setForeground(color(col[1]));
                            break;
                        case "03":
                            for(RoomImpl n : roomImpl){
                                if(r03.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r03.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r03.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r03.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r03.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r03.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r03.setToolTipText("Reserved for Transient");
                                }
                            }
                            r03.setForeground(color(col[1]));
                            break;
                        case "04":
                            for(RoomImpl n : roomImpl){
                                if(r04.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r04.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r04.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r04.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r04.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r04.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r04.setToolTipText("Reserved for Transient");
                                }
                            }
                            r04.setForeground(color(col[1]));
                            break;
                        case "05":
                            for(RoomImpl n : roomImpl){
                                if(r05.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r05.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r05.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r05.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r05.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r05.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r05.setToolTipText("Reserved for Transient");
                                }
                            }
                            r05.setForeground(color(col[1]));
                            break;
                        case "06":
                            for(RoomImpl n : roomImpl){
                                if(r06.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r06.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r06.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r06.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r06.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r06.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r06.setToolTipText("Reserved for Transient");
                                }
                            }
                            r06.setForeground(color(col[1]));
                            break;
                        case "07":
                            for(RoomImpl n : roomImpl){
                                if(r07.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r07.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r07.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r07.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r07.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r07.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r07.setToolTipText("Reserved for Transient");
                                }
                            }
                            r07.setForeground(color(col[1]));
                            break;
                        case "08":
                            for(RoomImpl n : roomImpl){
                                if(r08.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r08.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r08.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r08.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r08.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r08.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r08.setToolTipText("Reserved for Transient");
                                }
                            }
                            r08.setForeground(color(col[1]));
                            break;
                        case "09":
                            for(RoomImpl n : roomImpl){
                                if(r09.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r09.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r09.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r09.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r09.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r09.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r09.setToolTipText("Reserved for Transient");
                                }
                            }
                            r09.setForeground(color(col[1]));
                            break;
                        case "10":
                            for(RoomImpl n : roomImpl){
                                if(r10.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r10.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r10.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r10.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r10.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r10.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r10.setToolTipText("Reserved for Transient");
                                }
                            }
                            r10.setForeground(color(col[1]));
                            break;
                        case "11":
                            for(RoomImpl n : roomImpl){
                                if(r11.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r11.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r11.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r11.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r11.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r11.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r11.setToolTipText("Reserved for Transient");
                                }
                            }
                            r11.setForeground(color(col[1]));
                            break;
                        case "12":
                            for(RoomImpl n : roomImpl){
                                if(r12.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r12.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r12.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r12.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r12.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r12.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r12.setToolTipText("Reserved for Transient");
                                }
                            }
                            r12.setForeground(color(col[1]));
                            break;
                        case "14":
                            for(RoomImpl n : roomImpl){
                                if(r14.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r14.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r14.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r14.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r14.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r14.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r14.setToolTipText("Reserved for Transient");
                                }
                            }
                            r14.setForeground(color(col[1]));
                            break;
                        case "15":
                            for(RoomImpl n : roomImpl){
                                if(r15.getText().equals(n.getRoomNumber()))
                                    number = n.getNumberOfOccupants();
                            }
                            numOfRes = client.getAllReservationsFromRoom(r15.getText()).size();
                            numOfTrans = client.getTransientFromRoom(r15.getText()).size();
                            if(!"0".equals(type(col[2]))){
                                r15.setToolTipText("<html>Vacant: " + (Integer.parseInt(type(col[2]))-(number+numOfRes)) + "<br>Occupied: " + number + "<br>Reserved: " + 
                                        numOfRes + "<br>Transient: " + numOfTrans + "</html>");
                                if(number == 0 && numOfRes == 0 && numOfTrans > 0){
                                    r15.setToolTipText("Reserved for Transient");
                                }
                            } else {
                                r15.setToolTipText("Master Suite");
                                if(numOfTrans > 0){
                                    r15.setToolTipText("Reserved for Transient");
                                }
                            }
                            r15.setForeground(color(col[1]));
                            break;
                    }
                    number = 0;
                }
            } else {
                System.out.println("Table ROOM is Empty");
            }
        } catch (RemoteException ex) {
//            Logger.getLogger(IFloorPlan.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
    }
    
    private String type(String col){
        String num = "";
        switch(col){
            case "S":
                num = "1";
                break;
            case "D":
                num = "2";
                break;
            case "T":
                num = "3";
                break;
            default:
                num = "0";
        }
        return num;
    }
    
    private String type2(String col){
        String num = "";
        switch(col){
            case "S":
                num = "Single Room";
                break;
            case "D":
                num = "Double Sharing Room";
                break;
            case "T":
                num = "Triple Sharing Room";
                break;
            default:
                num = "Private Suite";
        }
        return num;
    }
    
    private Color color(String col){
        Color color = Color.BLACK;
        switch(col){
            case "unoccupied":
                color = new Color(0,128,0);
                break;
            case "fully occupied":
                color = Color.BLUE;
                break;
            case "partially occupied":
                color = new Color(135,206,250);
                break;
            case "not available":
                color = Color.RED;
                break;
        }
        return color;
    }
    
    private boolean checkRoom(String room){
        boolean res = false;
        try {
            String status = client.getStatus(room);
            switch (base) {
                case "transient":
                    if (status.equalsIgnoreCase("fully occupied") || status.equalsIgnoreCase("not available") || status.equalsIgnoreCase("partially occupied")) {
                        res = true;
                    }   break;
                case "others":
                    if (status.equalsIgnoreCase("fully occupied") || status.equalsIgnoreCase("not available")) {
                        res = true;
                    }   break;
                case "reg":
                    if (status.equalsIgnoreCase("fully occupied") || status.equalsIgnoreCase("not available")) {
                        res = true;
                    }   break;
            }
        } catch (RemoteException ex) {
//            Logger.getLogger(IFloorPlanPreview.class.getName()).log(Level.SEVERE, null, ex);
            new MessageDialog().error(this, ex.getMessage());
        }
        return res;
    }
    
    private void setRooms(JLabel room) throws NumberFormatException {
        if(checkRoom(room.getText())){
            if(base.equals("transient")){
                new MessageDialog().warning(this, "Room " + room.getText() + " is not available for transient");
            }
            
        } else {
            if (!numberOfRooms.getText().equals("") && base.equals("transient")) {
                if (!parentRoomNumber.getText().contains(room.getText())) {
                    numberOfRooms.setText((Integer.parseInt(numberOfRooms.getText()) + 1) + "");
                }
            } else {
                numberOfRooms.setText("1");
            }
            if(base.equals("transient")){
                if (!parentRoomNumber.getText().equals("")) {
                    if (!parentRoomNumber.getText().contains(room.getText())) {
                        parentRoomNumber.setText(parentRoomNumber.getText() + ", " + room.getText());
                    }
                } else {
                    parentRoomNumber.setText(room.getText());
                }
            } else {
                String type = "Suite";
                try {
                    type = client.getRoomType(room.getText());
                } catch (RemoteException ex) {
//                    Logger.getLogger(IFloorPlanPreview.class.getName()).log(Level.SEVERE, null, ex);
                    new MessageDialog().error(this, ex.getMessage());
                }
                numberOfRooms.setText(type2(type));
                parentRoomNumber.setText(room.getText());
            }
            
            parent.setSelectedItem(room.getText());
            dispose();
        }
    }
    
    private void roomInfo() throws NumberFormatException {
        int d = Integer.parseInt(dormNumber.getSelectedItem().toString()) + 1;
        r00.setText(d + "00");
        r01.setText(d + "01");
        r02.setText(d + "02");
        r03.setText(d + "03");
        r04.setText(d + "04");
        r05.setText(d + "05");
        r06.setText(d + "06");
        r07.setText(d + "07");
        r08.setText(d + "08");
        r09.setText(d + "09");
        r10.setText(d + "10");
        r11.setText(d + "11");
        r12.setText(d + "12");
        r14.setText(d + "14");
        r15.setText(d + "15");
        setToolTipJava();
    }
    
    public void setIFPPVisible(){
        dispose();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IFloorPlan.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
        new IFloorPlan(new AccessibleServer()).setVisible(true);
        }
        });*/
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        /*java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IFloorPlan(new AccessibleServer()).setVisible(true);
            }
        });*/
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel dormLabel;
    private javax.swing.JComboBox dormNumber;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel r00;
    private javax.swing.JLabel r01;
    private javax.swing.JLabel r02;
    private javax.swing.JLabel r03;
    private javax.swing.JLabel r04;
    private javax.swing.JLabel r05;
    private javax.swing.JLabel r06;
    private javax.swing.JLabel r07;
    private javax.swing.JLabel r08;
    private javax.swing.JLabel r09;
    private javax.swing.JLabel r10;
    private javax.swing.JLabel r11;
    private javax.swing.JLabel r12;
    private javax.swing.JLabel r14;
    private javax.swing.JLabel r15;
    // End of variables declaration//GEN-END:variables
}
